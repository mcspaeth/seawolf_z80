0001   0000             				;; @2024 Mark Spaeth -- mspaeth@gmail.com
0002   0000             				;; Whitespace for emacs asm mode w/ tab width 2
0003   0000             
0004   0000             				;; Programmed for tasm z80 mode using only 8080 instructions
0005   0000             
0006   0000             				;; Config variables
0007   0000             				;; Original release: SC3DIG=0, OLDDIP=1, OLDINT=1, OLDTEST=1, MINEFIX=0
0008   0000             				;; 3 digit scoring:  SC3DIG=1, OLDDIP=1, OLDINT=0, OLDTEST=0, MINEFIX=0
0009   0000             
0010   0000             SC3DIG	= 1											; 3 digit scoring, simplified coinage
0011   0000             OLDDIP	= 0											; Table lookup vs calculated DIPs
0012   0000             OLDINT	= 0											; Exclude interpreter changes that save bytes
0013   0000             OLDTEST	= 0											; Use $0200 byte self test routine
0014   0000             GETMAC	= 0											; Use jsr for GETBC, GETDE (saves 1 byte per -- unneeded)
0015   0000             MOREEXP	= 1											; More mine explosion text
0016   0000             MINEFIX	= 1											; Fix the mines jumping on reload
0017   0000             DOCOPY	= 1											; Add copyright to self test
0018   0000             HSSAVE	= 0											; Prevent HS from being cleared at reset
0019   0000             				
0020   0000             				;; Graphics changes
0021   0000             OLDMINE	= 1											; Use original mine gfx
0022   0000             SW2024	= 0											; Change Q to '24
0023   0000             
0024   0000             				;; Generic variables
0025   0000             SINC		= $000D									; Ship entry length
0026   0000             MINC		= $000D									; Mine entry length
0027   0000             RINC		= $0020									; Row increment
0028   0000             TINC		= $001E									; Torpedo entry length
0029   0000             
0030   0000             				;; Memory locations
0031   0000             PRGPTR	= $2000									; $2000-2001
0032   0000             
0033   0000             #IF SC3DIG
0034   0000             HSCORE	= $2002									; Was $2006
0035   0000             HSCOREH	= HSCORE+1							; High byte
0036   0000             GTIME		= $2004									; Was $2002
0037   0000             TIMER		= $2005									; Was $2003
0038   0000             CREDIT	= $2006									; Was $2005, half credit not used
0039   0000             MISSED	= $200E									; (Previously unused)
0040   0000             PSCORE	= $2012									; Was $202B
0041   0000             PSCOREH	= PSCORE+1							; High byte
0042   0000             TXTBUF	= $21E8									; Space for 1 more digit
0043   0000~            #ELSE
0044   0000~            GTIME		= $2002
0045   0000~            TIMER		= $2003
0046   0000~            HCREDIT	= $2004
0047   0000~            CREDIT	= $2005									; Was $2005, half credit not used
0048   0000~            HSCORE	= $2006
0049   0000~            PSCORE	= $202B									; Was $202B
0050   0000~            TXTBUF	= $21E9
0051   0000             #ENDIF
0052   0000             
0053   0000             
0054   0000             IN1			= $2007
0055   0000             IN0			= $2008
0056   0000             TIMER1	= $2010
0057   0000             TIMER2	= $2011
0058   0000             HMINE		= $2014									; Next mine to update
0059   0000             HTORP		= $2016									; Next torp to update
0060   0000             HSHIPA	= $2018									; SHIPA handle
0061   0000             HSHIPB	= $201A									; SHIPB handle
0062   0000             HSUNK		= $201C									; SUNK handle (?)
0063   0000             
0064   0000             ATIMER	= $2025									; Audio timer
0065   0000             
0066   0000             SHIPA0	= $2031									; Base address of ship A
0067   0000             SHIPA1	= SHIPA0+SINC						; $203E ($0d block)
0068   0000             SHIPA2	= SHIPA1+SINC						; $204B ($0d block)
0069   0000             SHIPAX	= SHIPA2+SINC						; Reset to $2031 if here
0070   0000             
0071   0000             SHIPB0	= $2058									; Base address of ship B
0072   0000             SHIPB1	= SHIPB0+SINC						; $2065 ($0d block)
0073   0000             SHIPB2	= SHIPB1+SINC						; $2072 ($0d block)
0074   0000             SHIPBX	= SHIPB2+SINC						; Reset to $2058 if here
0075   0000             
0076   0000             MINES		= $207F									; Base address of mines
0077   0000             MINEX		= MINES+(8*MINC)				; $20E7 (8x $0d blocks)
0078   0000             
0079   0000             TORPS		= $20E7									; Base address of torpedos
0080   0000             TORPX		= TORPS+(4*TINC)				; $215F (4x $1e blocks)
0081   0000             
0082   0000             HMISS		= $21F0
0083   0000             
0084   0000             
0085   0000             				;; Screen addresses for text
0086   0000             WAVLOC	= $27E0									; Loc for "Wave"
0087   0000             GOTLOC	= $2C0B									; Loc for GAME OVER text
0088   0000             SWLTOC	= $2C0C									; Loc for SEA WOLF text
0089   0000             ERRLOC	= $3008									; Loc for ROM errors
0090   0000             COPYLOC	= $3408									; Loc for Copyright
0091   0000             ICTLOC	= $3833									; Loc for Insert Coin / Press Start
0092   0000             HSTLOC	= $3C02									; Loc for HIGH SCORE text
0093   0000             TSTLOC	= $3C0E									; Loc for TIME/SCORE text
0094   0000             HSLOC		= $3E25									; Loc for high score
0095   0000             PSLOC		= $3E36									; Loc for player score
0096   0000             
0097   0000             				;; out 01    = Explosion matrix
0098   0000             				;; out 02    = Torpedo display
0099   0000             				;; out 03    = Shifter data
0100   0000             				;; out 04    = Shifter count
0101   0000             				;; out 05    = Sound triggers
0102   0000             				;; out 06    = watchdog (add this)
0103   0000             
0104   0000             
0105   0000             				;; Original memory addresses (modded for this)
0106   0000             				;; 2000-2001 = Pointer address for main game/attract loop
0107   0000             				;; 2002      = Game time?
0108   0000             				;; 2003      = Down counter ($1E to $00)
0109   0000             				;; 2004      = Partial credits
0110   0000             				;; 2005      = Credits
0111   0000             				;; 2006      = High score byte
0112   0000             				;; 2007      = Last IN1
0113   0000             				;; 2008      = Last IN0
0114   0000             				;; 2009-200a = End game hl pointer store (deprecated)
0115   0000             				;; 200e-200f = Unused?
0116   0000             				;; 2010      = Down counter (when $2003 == 0)
0117   0000             				;; 2011      = Down counter
0118   0000             				;; 2012-2013 = (Not used?)
0119   0000             				;; 2014-2015 = MINE table pointer (last updated)
0120   0000             				;; 2016-2017 = TORP table pointer (last updated)
0121   0000             				;; 2018-2019 = SHIPA table pointer
0122   0000             				;; 201a-201b = SHIPB Table pointer
0123   0000             				;; 201c      = Next sprite?
0124   0000             				;; 201e      = ??
0125   0000             				;; 201f      = Later interrupt called ($00 = rst $08, $FF = rst $10)
0126   0000             
0127   0000             				;; 2020      = Mask for subs to call at 04ce (when [[$2000]] == 00)
0128   0000             				;;             D7 = $2002, D6 = $2010, D5 = $2011, D4 = $2021
0129   0000             				;;             D3 = $2022, D2 = $2023, D1 = $2024, D0 = $2025
0130   0000             				;; 2021      = Down counter (non-zero inhibits fire)
0131   0000             				;; 2022      = Down counter
0132   0000             				;; 2023      = Down counter ($19 for small ship)
0133   0000             				;; 2024      = Timer (to show score / explosion)
0134   0000             				;; 2025      = Timer (audio)
0135   0000             				;; 2026      = Down counter ($0f for small ship)
0136   0000             				;; 2027-2028 = Wave state
0137   0000             				;; 2029      = Next ship type
0138   0000             				;; 202A      = Duplicate game time
0139   0000             				;; 202b      = Player score
0140   0000             				;; 202c      = ?? 
0141   0000             				;; 202d      = Torpedo status
0142   0000             				;; 202e      = 1 if extended time passed
0143   0000             				;; 202f      = Ship Launch direction?
0144   0000             				;; 2030      = Current sprite shift
0145   0000             				;; 2031-203D = Sprite ($0d block)
0146   0000             				;;		Byte 0   = X flags?
0147   0000             				;;		Byte 1   = Delta X
0148   0000             				;;		Byte 2   = X Pos  ((loc-$2400) & $1f)<<3 | (shift & $07)
0149   0000             				;;		Byte 3   = Y flags
0150   0000             				;;		Byte 4   = Delta Y
0151   0000             				;;		Byte 5   = Y Pos  loc-$2400)>>5
0152   0000             				;;		Byte 6   = ??
0153   0000             				;;		Byte 7-8 = Sprite tbl LSB,MSB
0154   0000             				;;		Byte 9-A = Calculated screen location
0155   0000             				;;		Byte C-D = Calculated sprite size
0156   0000             				;; 203E-204A = Sprite ($0d block)
0157   0000             				;; 204B-2057 = Sprite ($0d block)
0158   0000             				;; 2058-2064 = Ship data 0 (Attract?)
0159   0000             				;; 2065-2071 = Ship data 1
0160   0000             				;; 2072-207e = Ship data 2
0161   0000             
0162   0000             				;; 207f-208b = Mine data 0
0163   0000             				;; 208c-2098 = Mine data 1
0164   0000             				;; 2099-20a5 = Mine data 2
0165   0000             				;; 20a6-20b2 = Mine data 3
0166   0000             				;; 20b3-20bf = Mine data 4
0167   0000             				;; 20c0-20cc = Mine data 5
0168   0000             				;; 20cd-20d9 = Mine data 6
0169   0000             				;; 20da-20e6 = Mine data 7
0170   0000             
0171   0000             				;; 20c9-20e6
0172   0000             
0173   0000             				;; Torpedo control
0174   0000             				;; 20e7-2104 = $1e data block
0175   0000             				;; 2105-2122 = $1e data block
0176   0000             				;; 2123-2140 = $1e data block
0177   0000             				;; 2140-21r3 = $1e data block
0178   0000             
0179   0000             				;; 215f-21a3 = $44 data block, cleared at $0088
0180   0000             
0181   0000             				;; 21e8-21ef = 8 character buffer for time+score
0182   0000             				;; 21f0-21f1 = Address for $0A3F clear if non-zero
0183   0000             				;; 21f2-21f3 = Address for $0A3F clear if non-zero
0184   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0185   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0186   0000             
0187   0000             				;; RST $00 ($C7)
0188   0000             				.org		$0000
0189   0000             L0000:
0190   0000 00          				nop
0191   0001 00          				nop
0192   0002 31 00 24    				ld			sp,$2400				; Stack pointer
0193   0005 C3 36 04    				jp			L043A						; Startup jump
0194   0008             
0195   0008             				;; rst $08 ($cf interrupt vector)
0196   0008             RST08:
0197   0008 E5          				push		hl
0198   0009 D5          				push		de
0199   000A C5          				push		bc
0200   000B F5          				push		af
0201   000C C3 7E 00    				jp			L007E
0202   000F 00          				nop
0203   0010             
0204   0010             				;; rst $10 ($d7 interrupt vector)
0205   0010             RST10:
0206   0010 E5          				push		hl
0207   0011 D5          				push		de
0208   0012 C5          				push		bc
0209   0013 F5          				push		af
0210   0014 3A 1F 20    				ld			a,($201F)				; ??
0211   0017 A7          				and			a
0212   0018 C2 3E 00    				jp			nz,L003E
0213   001B             
0214   001B CD BC 03    				call		L03BC						; Update wave
0215   001E CD 2E 01    				call		L012E						; Update a sprite
0216   0021             
0217   0021 2A 16 20    				ld			hl,(HTORP)			; Torpedo handle
0218   0024 7E          				ld			a,(hl)
0219   0025 A7          				and			a
0220   0026 F2 36 00    				jp			p,L0036					; D7=0 = inactive
0221   0029 E6 20       				and			$20
0222   002B CA 36 00    				jp			z,L0036					; D5=0 = don't draw
0223   002E             
0224   002E CD 5A 03    				call		L035B						; Load de, bc from ship data
0225   0031 0D          				dec			c
0226   0032 EB          				ex			de,hl
0227   0033 CD FC 09    				call		L0A2A						; Draw b x c block from de at hl
0228   0036             
0229   0036             L0036:
0230   0036 3E FF       				ld			a,$FF
0231   0038 32 1F 20    				ld			($201F),a
0232   003B C3 69 00    				jp			L0069						; End of interrupt routine
0233   003E             
0234   003E             L003E:
0235   003E 2A 16 20    				ld			hl,(HTORP)			; Torpedo handle
0236   0041 7E          				ld			a,(hl)
0237   0042 A7          				and			a
0238   0043 F2 62 00    				jp			p,L0062					; D7=0 = inactive
0239   0046             
0240   0046 E6 40       				and			$40
0241   0048 C2 50 00    				jp			nz,L0050				; Jump if not set to clear
0242   004B 36 00       				ld			(hl),$00				; Clear sprite
0243   004D C3 62 00    				jp			L0062
0244   0050             
0245   0050             L0050:
0246   0050 7E          				ld			a,(hl)					; Flags
0247   0051 F6 20       				or			$20							; Set SUNK flag
0248   0053 77          				ld			(hl),a
0249   0054 CD 62 01    				call		L0165						; Update sprite
0250   0057 78          				ld			a,b
0251   0058 E5          				push		hl
0252   0059 2A 1C 20    				ld			hl,(HSUNK)			; (HSUNK) to bc
0253   005C 44          				ld			b,h
0254   005D 4D          				ld			c,l
0255   005E E1          				pop			hl
0256   005F CD E8 09    				call		L0A16
0257   0062             
0258   0062             L0062:
0259   0062 CD 67 03    				call		L0368						; Handle ($2020) flags
0260   0065 AF          				xor			a
0261   0066 32 1F 20    				ld			($201F),a
0262   0069             
0263   0069             				;; End of interrupt routine
0264   0069             L0069:
0265   0069 DB 02       				in			a,($02)					; IN1
0266   006B 47          				ld			b,a
0267   006C DB 02       				in			a,($02)					; IN1
0268   006E 21 07 20    				ld			hl,IN1					; Last IN1
0269   0071 11 9E 09    				ld			de,TBLIN1				; IN1 handler table
0270   0074 B8          				cp			b								; Poor man's debounce
0271   0075 CC DB 0A    				call		z,L0B05					; Call if stable
0272   0078             
0273   0078 F1          				pop			af
0274   0079 C1          				pop			bc
0275   007A D1          				pop			de
0276   007B E1          				pop			hl
0277   007C FB          				ei
0278   007D C9          				ret
0279   007E             
0280   007E             				;; Interrupt $08 vector continues...
0281   007E             L007E:
0282   007E 3A 1F 20    				ld			a,($201F)
0283   0081 A7          				and			a
0284   0082 C2 19 01    				jp			nz,L0119
0285   0085 CD BC 03    				call		L03BC						; Update wave
0286   0088             
0287   0088             				;; Clear $215f-$21a3
0288   0088 21 5F 21    				ld			hl,$215F
0289   008B 06 44       				ld			b,$44
0290   008D AF          				xor			a
0291   008E             L008E:
0292   008E 77          				ld			(hl),a
0293   008F 23          				inc			hl
0294   0090 05          				dec			b
0295   0091 C2 8E 00    				jp			nz,L008E
0296   0094             
0297   0094 2A 18 20    				ld			hl,(HSHIPA)			; SHIPA handle
0298   0097 3E 03       				ld			a,$03						; Loop counter 
0299   0099             L0099:
0300   0099 F5          				push		af
0301   009A 7D          				ld			a,l
0302   009B FE 58       				cp			SHIPAX&$FF			; Cycles $2031 / $203E / $204B
0303   009D C2 A3 00    				jp			nz,L00A3
0304   00A0             
0305   00A0             L00A0:
0306   00A0 21 31 20    				ld			hl,SHIPA0				; Resets to $2031
0307   00A3             L00A3:
0308   00A3 B4          				or			h
0309   00A4 CA A0 00    				jp			z,L00A0					; If was $0000, init as $2013
0310   00A7             
0311   00A7 E5          				push		hl
0312   00A8 CD DB 01    				call		L01DE						; Handle sprite
0313   00AB E1          				pop			hl
0314   00AC D2 B2 00    				jp			nc,L00B2
0315   00AF             
0316   00AF 22 18 20    				ld			(HSHIPA),hl			; SHIPA handle
0317   00B2             L00B2:
0318   00B2 11 0D 00    				ld			de,SINC					; Sprite increment
0319   00B5 19          				add			hl,de
0320   00B6 F1          				pop			af
0321   00B7 3D          				dec			a
0322   00B8 C2 99 00    				jp			nz,L0099				; Loop back
0323   00BB             
0324   00BB 2A 18 20    				ld			hl,(HSHIPA)			; SHIPA handle
0325   00BE CD 09 03    				call		L030C						; Erase if sunk
0326   00C1 2A 1A 20    				ld			hl,(HSHIPB)			; SHIPB handle
0327   00C4             
0328   00C4 3E 03       				ld			a,$03						; Loop counter
0329   00C6             L00C6:
0330   00C6 F5          				push		af
0331   00C7 7D          				ld			a,l
0332   00C8 FE 7F       				cp			SHIPBX&$FF			; Cycloes $2058 / $2065 / $2072
0333   00CA C2 D0 00    				jp			nz,L00D0
0334   00CD             L00CD:
0335   00CD 21 58 20    				ld			hl,SHIPB0				; Reset to $2058
0336   00D0             L00D0:
0337   00D0 B4          				or			h
0338   00D1 CA CD 00    				jp			z,L00CD					; If was $0000, init as $2058
0339   00D4             
0340   00D4 E5          				push		hl
0341   00D5 CD DB 01    				call		L01DE						; Handle sprite
0342   00D8 E1          				pop			hl
0343   00D9 D2 DF 00    				jp			nc,L00DF
0344   00DC             
0345   00DC 22 1A 20    				ld			(HSHIPB),hl			; SHIPB handle
0346   00DF             L00DF:
0347   00DF 11 0D 00    				ld			de,SINC					; Sprite increment
0348   00E2 19          				add			hl,de
0349   00E3 F1          				pop			af
0350   00E4 3D          				dec			a
0351   00E5 C2 C6 00    				jp			nz,L00C6				; Loop back
0352   00E8             
0353   00E8 AF          				xor			a
0354   00E9 32 30 20    				ld			($2030),a				; Clear sprite shift
0355   00EC             
0356   00EC 2A 16 20    				ld			hl,(HTORP)			; Torpedo handle
0357   00EF 3E 04       				ld			a,$04						; Loop counter
0358   00F1             L00F1:
0359   00F1 F5          				push		af
0360   00F2 7D          				ld			a,l
0361   00F3 FE 5F       				cp			TORPX&$FF				; Cycles $20E7 / $2105 / $2123 / $2140
0362   00F5 C2 FB 00    				jp			nz,L00FB
0363   00F8             
0364   00F8             L00F8:
0365   00F8 21 E7 20    				ld			hl,TORPS				; Reset to $20E7
0366   00FB             L00FB:
0367   00FB B4          				or			h
0368   00FC CA F8 00    				jp			z,L00F8					; If was $0000, init to $20E7
0369   00FF             
0370   00FF E5          				push		hl
0371   0100 CD 4D 02    				call		L0250						; Handle torpedo
0372   0103 E1          				pop			hl
0373   0104 D2 0A 01    				jp			nc,L010A
0374   0107             
0375   0107 22 16 20    				ld			(HTORP),hl			; Torpedo handle
0376   010A             L010A:
0377   010A 11 1E 00    				ld			de,TINC					; Torp increment
0378   010D 19          				add			hl,de
0379   010E F1          				pop			af
0380   010F 3D          				dec			a
0381   0110 C2 F1 00    				jp			nz,L00F1				; Loop back
0382   0113             
0383   0113 CD 2E 03    				call		L0331						; Update mines
0384   0116 C3 69 00    				jp			L0069						; End of interrupt routine
0385   0119             
0386   0119             
0387   0119             L0119:
0388   0119 2A 1A 20    				ld			hl,(HSHIPB)			; SHIPB handle
0389   011C CD 09 03    				call		L030C						; Erase if sunk
0390   011F             
0391   011F 2A 1A 20    				ld			hl,(HSHIPB)			; SHIPB handle
0392   0122 CD 37 01    				call		L013A
0393   0125             
0394   0125 2A 18 20    				ld			hl,(HSHIPA)			; SHIPA handle
0395   0128 CD 37 01    				call		L013A
0396   012B             
0397   012B C3 69 00    				jp			L0069						; End of interrupt routine
0398   012E             
0399   012E             				;; Called from rst $10
0400   012E             				;; Update and draw a single mine
0401   012E             L012E:
0402   012E 2A 14 20    				ld			hl,(HMINE)
0403   0131 7E          				ld			a,(hl)
0404   0132 A7          				and			a
0405   0133 F0          				ret			p								; D7 clear = inactive
0406   0134             
0407   0134             #IF MINEFIX
0408   0134 C3 46 01    				jp			DRAWOBJ
0409   0137~            #ELSE
0410   0137~            				call		L0165						; Update mine
0411   0137~            				jp			L0192						; Draw mine
0412   0137             #ENDIF
0413   0137             
0414   0137             				;; Handle SHIPA / SHIPB entries
0415   0137             L013A:
0416   0137 7E          				ld			a,(hl)
0417   0138 A7          				and			a
0418   0139 F0          				ret			p								; D7 clear = inactive
0419   013A             
0420   013A E6 40       				and			$40							; Check bit 6
0421   013C C2 42 01    				jp			nz,L0145				; D6 set = clear
0422   013F 36 00       				ld			(hl),$00				; Clear entry
0423   0141 C9          				ret
0424   0142             
0425   0142             L0145:
0426   0142 7E          				ld			a,(hl)
0427   0143 F6 20       				or			$20							; Set bit 5 
0428   0145 77          				ld			(hl),a
0429   0146             
0430   0146             DRAWOBJ:
0431   0146 F5          				push		af
0432   0147 CD 62 01    				call		L0165						; Update sprite params
0433   014A             				;; hl = screen loc, c=shift on return
0434   014A             
0435   014A F1          				pop			af
0436   014B E6 10       				and			$10							; Check bit 4
0437   014D CA 8F 01    				jp			z,L0192					; Draw sprite
0438   0150             
0439   0150 79          				ld			a,c
0440   0151 85          				add			a,l
0441   0152 6F          				ld			l,a
0442   0153 E5          				push		hl
0443   0154 21 30 20    				ld			hl,$2030
0444   0157 7E          				ld			a,(hl)
0445   0158 2F          				cpl
0446   0159 E6 07       				and			$07
0447   015B 77          				ld			(hl),a
0448   015C E1          				pop			hl
0449   015D D3 04       				out			($04),a					; Update shift count
0450   015F C3 B5 01    				jp			L01B8
0451   0162             
0452   0162             				;; Update/redraw sprite
0453   0162             L0165:
0454   0162 23          				inc			hl
0455   0163 23          				inc			hl
0456   0164 5E          				ld			e,(hl)					; LSB of loc + shift
0457   0165 23          				inc			hl
0458   0166 23          				inc			hl
0459   0167 23          				inc			hl
0460   0168 56          				ld			d,(hl)					; MSB of loc
0461   0169 23          				inc			hl
0462   016A 23          				inc			hl
0463   016B CD D2 09    				call		L0A00						; Get address for shifted data
0464   016E             
0465   016E 79          				ld			a,c							; (shift)
0466   016F 32 30 20    				ld			($2030),a				; Shift value
0467   0172 D3 04       				out			($04),a					; Shifter count
0468   0174 D5          				push		de							; Push screen loc
0469   0175             
0470   0175~            #IF GETMAC
0471   0175~            				call		GETDE
0472   0175             #ELSE
0473   0175 5E          				ld			e,(hl)					; Get spite data loc
0474   0176 23          				inc			hl
0475   0177 56          				ld			d,(hl)
0476   0178 23          				inc			hl
0477   0179             #ENDIF
0478   0179             
0479   0179 EB          				ex			de,hl						; rom loc -> hl
0480   017A             
0481   017A~            #IF GETMAC
0482   017A~            				call		GETBC
0483   017A             #ELSE
0484   017A 4E          				ld			c,(hl)					; Read sprite size
0485   017B 23          				inc			hl
0486   017C 46          				ld			b,(hl)
0487   017D 23          				inc			hl
0488   017E             #ENDIF
0489   017E             
0490   017E E3          				ex			(sp),hl					; hl = screen loc
0491   017F EB          				ex			de,hl						; hl Back to ram table
0492   0180             
0493   0180~            #IF GETMAC
0494   0180~            				call		GETDE
0495   0180             #ELSE
0496   0180 73          				ld			(hl),e
0497   0181 23          				inc			hl
0498   0182 72          				ld			(hl),d
0499   0183 23          				inc			hl
0500   0184             #ENDIF
0501   0184             
0502   0184 71          				ld			(hl),c					; Width
0503   0185 34          				inc			(hl)						; +1 wide for shifting?
0504   0186 23          				inc			hl
0505   0187 70          				ld			(hl),b					; Height
0506   0188 23          				inc			hl
0507   0189 22 1C 20    				ld			(HSUNK),hl			; Store next
0508   018C             
0509   018C EB          				ex			de,hl						; hl = screen loc
0510   018D D1          				pop			de							; de = sprite data in ROM
0511   018E C9          				ret
0512   018F             
0513   018F             
0514   018F             				;; Sprite draw, normal
0515   018F             L0192:
0516   018F C5          				push		bc							; bc = bytes wide, pix high
0517   0190 E5          				push		hl							; hl = screen loc
0518   0191             L0194:
0519   0191 1A          				ld			a,(de)					; Sprite byte
0520   0192 13          				inc			de
0521   0193 D3 03       				out			($03),a					; MB12421 data write
0522   0195 DB 03       				in			a,($03)					; MB12421 data read
0523   0197 77          				ld			(hl),a					; Write to screen
0524   0198 23          				inc			hl
0525   0199 0D          				dec			c
0526   019A C2 91 01    				jp			nz,L0194				; Loop for width
0527   019D             
0528   019D AF          				xor			a
0529   019E D3 03       				out			($03),a					; MB12421 data write
0530   01A0 DB 03       				in			a,($03)					; MB12421 data read
0531   01A2 77          				ld			(hl),a					; Final write
0532   01A3 01 20 00    				ld			bc,RINC					; Row increment
0533   01A6 E1          				pop			hl
0534   01A7 09          				add			hl,bc						; Next row
0535   01A8 C1          				pop			bc
0536   01A9 7D          				ld			a,l
0537   01AA E6 E0       				and			$E0
0538   01AC C2 8F 01    				jp			nz,L0192				; Not end of screen
0539   01AF 7C          				ld			a,h
0540   01B0 1F          				rra
0541   01B1 DA 8F 01    				jp			c,L0192					; Not end of screen
0542   01B4 C9          				ret
0543   01B5             
0544   01B5             				;; Sprite draw, flipped
0545   01B5             L01B8:
0546   01B5 C5          				push		bc
0547   01B6 E5          				push		hl
0548   01B7             L01BA:
0549   01B7 1A          				ld			a,(de)
0550   01B8 13          				inc			de
0551   01B9 D3 03       				out			($03),a					; Shifter input
0552   01BB DB 00       				in			a,($00)					; Shifter output
0553   01BD 77          				ld			(hl),a					; Write to screen
0554   01BE 2B          				dec			hl
0555   01BF 0D          				dec			c
0556   01C0 C2 B7 01    				jp			nz,L01BA				; Loop for width
0557   01C3             
0558   01C3 AF          				xor			a
0559   01C4 D3 03       				out			($03),a					; Shifter input 
0560   01C6 DB 00       				in			a,($00)					; Shifter output
0561   01C8 77          				ld			(hl),a					; Write to screen
0562   01C9 01 20 00    				ld			bc,RINC					; Row increment
0563   01CC E1          				pop			hl
0564   01CD 09          				add			hl,bc						; Next line
0565   01CE C1          				pop			bc
0566   01CF 7D          				ld			a,l
0567   01D0 E6 E0       				and			$E0
0568   01D2 C2 B5 01    				jp			nz,L01B8				; Not end of screen
0569   01D5             
0570   01D5 7C          				ld			a,h
0571   01D6 1F          				rra
0572   01D7 DA B5 01    				jp			c,L01B8					; Not end of screen
0573   01DA C9          				ret
0574   01DB             
0575   01DB             
0576   01DB             				;; 
0577   01DB             L01DE:
0578   01DB 7E          				ld			a,(hl)
0579   01DC A7          				and			a
0580   01DD F0          				ret			p								; High bit clear = inactive
0581   01DE             
0582   01DE E5          				push		hl
0583   01DF 23          				inc			hl							; hl now delta X
0584   01E0 E6 07       				and			$07							; Mask low 3 bits 
0585   01E2 C2 EA 01    				jp			nz,L01ED				; (is a ship)
0586   01E5             
0587   01E5             				;; This is a missle?
0588   01E5 23          				inc			hl
0589   01E6 23          				inc			hl
0590   01E7 C3 34 02    				jp			L0237
0591   01EA             
0592   01EA             L01ED:
0593   01EA 7E          				ld			a,(hl)					; Delta X
0594   01EB 11 5F 21    				ld			de,$215F				; Table for +
0595   01EE A7          				and			a
0596   01EF F2 F5 01    				jp			p,L01F8
0597   01F2             
0598   01F2 11 81 21    				ld			de,$2181				; Table for -
0599   01F5             L01F8:
0600   01F5 47          				ld			b,a							; b = delta x
0601   01F6 23          				inc			hl							; (hl) = X
0602   01F7 86          				add			a,(hl)					; a = x + dx
0603   01F8 77          				ld			(hl),a					; store x
0604   01F9 78          				ld			a,b							; a = delta X
0605   01FA A7          				and			a
0606   01FB 7E          				ld			a,(hl)					; a = X
0607   01FC F2 0D 02    				jp			p,L0210					; (left to right)
0608   01FF             
0609   01FF FE 01       				cp			$01
0610   0201 D2 13 02    				jp			nc,L0216
0611   0204             
0612   0204             L0207:
0613   0204 E3          				ex			(sp),hl
0614   0205 7E          				ld			a,(hl)
0615   0206 E6 BF       				and			$BF							; Clear bit 5 (Ship done)
0616   0208 77          				ld			(hl),a
0617   0209 E3          				ex			(sp),hl
0618   020A C3 13 02    				jp			L0216
0619   020D             
0620   020D             L0210:
0621   020D 23          				inc			hl
0622   020E BE          				cp			(hl)						; End X
0623   020F 2B          				dec			hl
0624   0210 D2 04 02    				jp			nc,L0207
0625   0213             
0626   0213             L0216:
0627   0213 7E          				ld			a,(hl)
0628   0214 0F          				rrca
0629   0215 0F          				rrca
0630   0216 0F          				rrca
0631   0217 E6 1F       				and			$1F							; High 5 bits of (hl)
0632   0219 83          				add			a,e
0633   021A 5F          				ld			e,a
0634   021B E3          				ex			(sp),hl
0635   021C 7E          				ld			a,(hl)
0636   021D E3          				ex			(sp),hl
0637   021E E6 07       				and			$07
0638   0220 47          				ld			b,a
0639   0221 23          				inc			hl
0640   0222 7E          				ld			a,(hl)
0641   0223 2F          				cpl
0642   0224 3C          				inc			a
0643   0225 0F          				rrca
0644   0226 0F          				rrca
0645   0227 0F          				rrca
0646   0228 E6 07       				and			$07
0647   022A C6 03       				add			a,$03
0648   022C EB          				ex			de,hl
0649   022D             
0650   022D             L0230:
0651   022D 70          				ld			(hl),b
0652   022E 23          				inc			hl
0653   022F 3D          				dec			a
0654   0230 C2 2D 02    				jp			nz,L0230
0655   0233             
0656   0233 EB          				ex			de,hl
0657   0234             
0658   0234             				;; Handle missiles?
0659   0234             L0237:
0660   0234 11 2F 20    				ld			de,$202F				; Ship launch dir?
0661   0237 1A          				ld			a,(de)
0662   0238 2F          				cpl											; Invert it
0663   0239 12          				ld			(de),a
0664   023A C2 44 02    				jp			nz,L0247
0665   023D             
0666   023D 23          				inc			hl
0667   023E 7E          				ld			a,(hl)					; Delta X
0668   023F 23          				inc			hl
0669   0240 86          				add			a,(hl)					; X Pos
0670   0241 77          				ld			(hl),a					; X Pos
0671   0242 23          				inc			hl
0672   0243 BE          				cp			(hl)						; End X?
0673   0244             L0247:
0674   0244 E1          				pop  hl
0675   0245 37          				scf
0676   0246 C0          				ret  nz
0677   0247             
0678   0247 7E          				ld			a,(hl)					; Flags
0679   0248 E6 BF       				and			$BF							; Clear bit 5
0680   024A 77          				ld			(hl),a					; Flags
0681   024B 37          				scf
0682   024C C9          				ret
0683   024D             
0684   024D             
0685   024D             				;; Handle torpedo
0686   024D             L0250:
0687   024D 7E          				ld			a,(hl)
0688   024E A7          				and			a
0689   024F F0          				ret			p								; D7 clear = inactive
0690   0250             
0691   0250 E5          				push		hl
0692   0251 23          				inc			hl
0693   0252 23          				inc			hl
0694   0253 4E          				ld			c,(hl)					; +2
0695   0254 23          				inc			hl
0696   0255 23          				inc			hl
0697   0256 7E          				ld			a,(hl)					; +4 dx?
0698   0257 23          				inc			hl
0699   0258 46          				ld			b,(hl)					; +5 y?
0700   0259 80          				add			a,b
0701   025A 77          				ld			(hl),a					; +5
0702   025B 78          				ld			a,b
0703   025C FE C0       				cp			$C0
0704   025E D2 06 03    				jp			nc,L0309				; Bigger
0705   0261             
0706   0261 FE 30       				cp			$30
0707   0263 D2 72 02    				jp			nc,L0275
0708   0266             
0709   0266 3A 24 20    				ld			a,($2024)				; Explosion timer?
0710   0269 A7          				and			a
0711   026A CA 72 02    				jp			z,L0275
0712   026D             
0713   026D 3C          				inc			a
0714   026E 3C          				inc			a
0715   026F 32 24 20    				ld			($2024),a				; Explosion timer?
0716   0272             
0717   0272             L0275:
0718   0272 7E          				ld			a,(hl)					; +5
0719   0273 23          				inc			hl
0720   0274 BE          				cp			(hl)						; +6
0721   0275 D2 99 02    				jp			nc,L029C
0722   0278             
0723   0278 3E C0       				ld			a,$C0
0724   027A 86          				add			a,(hl)					; +6
0725   027B 77          				ld			(hl),a					; +6
0726   027C 2B          				dec			hl
0727   027D 2B          				dec			hl
0728   027E 34          				inc			(hl)						; +4
0729   027F 34          				inc			(hl)						; +4
0730   0280 7E          				ld			a,(hl)					; +4
0731   0281 23          				inc			hl
0732   0282 23          				inc			hl
0733   0283 23          				inc			hl
0734   0284 CA 93 02    				jp			z,L0296					; +7
0735   0287             
0736   0287 36 5E       				ld			(hl),SHOT1&$ff	; Change missile to SHOT1
0737   0289 FE FC       				cp			$FC
0738   028B CA 99 02    				jp			z,L029C
0739   028E             
0740   028E 36 6E       				ld			(hl),SHOT2&$ff	; Change missile to SHOT2
0741   0290 C3 99 02    				jp			L029C
0742   0293             
0743   0293             L0296:
0744   0293 E3          				ex			(sp),hl
0745   0294 7E          				ld			a,(hl)					; Flags 
0746   0295 E6 BF       				and			$BF							; Clear bit 5 
0747   0297 77          				ld			(hl),a
0748   0298 E3          				ex			(sp),hl
0749   0299             
0750   0299             L029C:
0751   0299 11 30 20    				ld			de,$2030				; Sprite shift
0752   029C 1A          				ld			a,(de)
0753   029D A7          				and			a
0754   029E C2 06 03    				jp			nz,L0309				; Shifted
0755   02A1             
0756   02A1 3C          				inc			a
0757   02A2 12          				ld			(de),a					; Sprite shift
0758   02A3 78          				ld			a,b							; What is b?
0759   02A4 E6 10       				and			$10
0760   02A6 CA 06 03    				jp			z,L0309
0761   02A9             
0762   02A9 11 07 00    				ld			de,$0007				; ?? Increment
0763   02AC 19          				add			hl,de
0764   02AD 7E          				ld			a,(hl)
0765   02AE A7          				and			a
0766   02AF C2 C0 02    				jp			nz,L02C3
0767   02B2             
0768   02B2 19          				add			hl,de
0769   02B3 78          				ld			a,b
0770   02B4 83          				add			a,e
0771   02B5 47          				ld			b,a
0772   02B6 E6 10       				and			$10
0773   02B8 CA 06 03    				jp			z,L0309
0774   02BB             
0775   02BB 7E          				ld			a,(hl)
0776   02BC A7          				and			a
0777   02BD CA 06 03    				jp			z,L0309
0778   02C0             
0779   02C0             L02C3:
0780   02C0 E3          				ex			(sp),hl
0781   02C1 7E          				ld			a,(hl)					; Flags
0782   02C2 E6 BF       				and			$BF							; Clear bit 5
0783   02C4 77          				ld			(hl),a					; Flags
0784   02C5 E3          				ex			(sp),hl
0785   02C6 78          				ld			a,b
0786   02C7 D6 40       				sub			$40
0787   02C9 47          				ld			b,a
0788   02CA DA DD 02    				jp			c,L02E0
0789   02CD             
0790   02CD 21 A1 21    				ld			hl,$21A1				; ??
0791   02D0             L02D3:
0792   02D0 23          				inc			hl
0793   02D1 23          				inc			hl
0794   02D2 7E          				ld			a,(hl)
0795   02D3 A7          				and			a
0796   02D4 C2 D0 02    				jp			nz,L02D3
0797   02D7             
0798   02D7 70          				ld			(hl),b
0799   02D8 23          				inc			hl
0800   02D9 71          				ld			(hl),c
0801   02DA C3 06 03    				jp			L0309
0802   02DD             
0803   02DD             L02E0:
0804   02DD 21 BE 21    				ld			hl,$21BE				; ??
0805   02E0             L02E3:
0806   02E0 23          				inc			hl
0807   02E1 23          				inc			hl
0808   02E2 23          				inc			hl
0809   02E3 7E          				ld			a,(hl)
0810   02E4 A7          				and			a
0811   02E5 C2 E0 02    				jp			nz,L02E3
0812   02E8             
0813   02E8 78          				ld			a,b
0814   02E9 C6 20       				add			a,$20
0815   02EB 11 60 21    				ld			de,$2160
0816   02EE FA F4 02    				jp			m,L02F7
0817   02F1             
0818   02F1 11 82 21    				ld			de,$2182
0819   02F4             L02F7:
0820   02F4 79          				ld			a,c
0821   02F5 0F          				rrca
0822   02F6 0F          				rrca
0823   02F7 0F          				rrca
0824   02F8 E6 1F       				and			$1F
0825   02FA 83          				add			a,e
0826   02FB 5F          				ld			e,a
0827   02FC 1A          				ld			a,(de)
0828   02FD A7          				and			a
0829   02FE CA 06 03    				jp			z,L0309
0830   0301 77          				ld			(hl),a
0831   0302 23          				inc			hl
0832   0303 71          				ld			(hl),c
0833   0304 23          				inc			hl
0834   0305 70          				ld			(hl),b
0835   0306             L0309:
0836   0306 37          				scf
0837   0307 E1          				pop			hl
0838   0308 C9          				ret
0839   0309             
0840   0309             
0841   0309             				;; Erase ship from hl if sunk
0842   0309             L030C:
0843   0309 7E          				ld			a,(hl)					; Sprite flags
0844   030A A7          				and			a
0845   030B F0          				ret			p								; D7 clear = inactive
0846   030C             
0847   030C E6 20       				and			$20
0848   030E C8          				ret			z								; D5 clear = not sunk
0849   030F             
0850   030F CD 5A 03    				call		L035B						; Get de, bc from bytes 9-d
0851   0312 EB          				ex			de,hl						; hl = read de
0852   0313 41          				ld			b,c
0853   0314             
0854   0314             L0317:
0855   0314 AF          				xor			a
0856   0315 E5          				push		hl							; Store loc
0857   0316             
0858   0316             				;; Clear c bytes at hl
0859   0316             L0319:
0860   0316 77          				ld			(hl),a
0861   0317 23          				inc			hl
0862   0318 0D          				dec			c
0863   0319 C2 16 03    				jp			nz,L0319
0864   031C             
0865   031C 11 20 00    				ld			de,RINC					; Row increment
0866   031F E1          				pop			hl							; Get loc
0867   0320 19          				add			hl,de						; Next line
0868   0321 48          				ld			c,b
0869   0322 7D          				ld			a,l
0870   0323 E6 E0       				and			$E0
0871   0325 C2 14 03    				jp			nz,L0317				; Loop if not end of screen
0872   0328             
0873   0328 7C          				ld			a,h
0874   0329 1F          				rra
0875   032A DA 14 03    				jp			c,L0317					; Loop if not end of screen
0876   032D             
0877   032D C9          				ret
0878   032E             
0879   032E             				;; Update mines
0880   032E             L0331:
0881   032E 2A 14 20    				ld			hl,(HMINE)
0882   0331             ;				ld			b,$0A						; Loop counter = 10 mines
0883   0331 06 08       				ld			b,$08						; Loop counter =  8 mines
0884   0333 7D          				ld			a,l
0885   0334 B4          				or			h
0886   0335 C2 3B 03    				jp			nz,L033E
0887   0338             
0888   0338 21 72 20    				ld			hl,MINES-MINC		; If 0 reset to $2072
0889   033B             L033E:
0890   033B 11 0D 00    				ld			de,MINC					; Mine increment
0891   033E             L0341:
0892   033E 19          				add			hl,de						; $207F / $207C / $2099 / $20A6 / $20B3 / $20C0 / $20CD / $20DA
0893   033F 05          				dec			b
0894   0340 C8          				ret			z								; End of loop
0895   0341             
0896   0341 7D          				ld			a,l
0897   0342 FE E7       				cp			MINEX&$FFF			; hl == $20E7?
0898   0344 C2 4A 03    				jp			nz,L034D
0899   0347             
0900   0347 21 7F 20    				ld			hl,MINES				; Reset to $207F
0901   034A             L034D:
0902   034A             				;; Check logic here
0903   034A~            #IF 1-MINEFIX
0904   034A~            				ld			a,(hl)					; X flags
0905   034A~            				and			a
0906   034A~            				jp			p,L0341					; D7 clear = not active
0907   034A             #ENDIF
0908   034A             
0909   034A 22 14 20    				ld			(HMINE),hl
0910   034D 23          				inc			hl
0911   034E 7E          				ld			a,(hl)					; Delta X
0912   034F 23          				inc			hl
0913   0350 86          				add			a,(hl)					; Add to X
0914   0351 77          				ld			(hl),a					; Store X
0915   0352             
0916   0352             #IF MINEFIX
0917   0352 2B          				dec			hl
0918   0353 2B          				dec			hl
0919   0354 7E          				ld			a,(hl)
0920   0355 A7          				and			a
0921   0356 F2 3E 03    				jp			p,L0341					; Loop until we get an active mine
0922   0359             #ENDIF
0923   0359             
0924   0359 C9          				ret
0925   035A             
0926   035A             				;; Load de, bc from ship data
0927   035A             L035B:
0928   035A 11 09 00    				ld			de,$0009
0929   035D 19          				add			hl,de
0930   035E             
0931   035E~            #IF GETMAC
0932   035E~            				call		GETDE
0933   035E             #ELSE
0934   035E 5E          				ld			e,(hl)
0935   035F 23          				inc			hl
0936   0360 56          				ld			d,(hl)
0937   0361 23          				inc			hl
0938   0362             #ENDIF
0939   0362             
0940   0362             GETBC:
0941   0362 4E          				ld			c,(hl)
0942   0363 23          				inc			hl
0943   0364 46          				ld			b,(hl)
0944   0365 23          				inc			hl
0945   0366 C9          				ret
0946   0367             
0947   0367             				;; Called from ISR
0948   0367             L0368:
0949   0367 3A 20 20    				ld			a,($2020)				; ISR flags
0950   036A A7          				and			a
0951   036B C0          				ret			nz
0952   036C             
0953   036C 47          				ld			b,a							; No ret, so a=0, b=0
0954   036D 21 05 20    				ld			hl,TIMER				; Counter address
0955   0370 35          				dec			(hl)						; Decrement counter
0956   0371 C2 8E 03    				jp			nz,L038E
0957   0374             
0958   0374             				;; $2003 Counter zero
0959   0374 36 1E       				ld			(hl),$1E				; Reset counter
0960   0376             
0961   0376 21 04 20    				ld			hl,GTIME				; Game timer
0962   0379 7E          				ld			a,(hl)
0963   037A A7          				and			a
0964   037B CA 88 03    				jp			z,L0388					; Game over
0965   037E             
0966   037E C6 99       				add			a,$99						; BCD derement
0967   0380 27          				daa
0968   0381 77          				ld			(hl),a					; Store timer
0969   0382 A7          				and			a								; Z should be set by daa (!)
0970   0383 C2 88 03    				jp			nz,L0388
0971   0386             
0972   0386 06 01       				ld			b,$01						; set d7 (eventually) = Game over
0973   0388             L0388:
0974   0388 21 10 20    				ld			hl,TIMER1
0975   038B CD AE 03    				call		L03AE						; Handle $2010 timer d6
0976   038E             
0977   038E             				;; Counter non-zero
0978   038E             L038E:
0979   038E 21 11 20    				ld			hl,TIMER2
0980   0391 CD AE 03    				call		L03AE						; Handle $2011 timer d5
0981   0394 21 21 20    				ld			hl,$2021
0982   0397 CD AE 03    				call		L03AE						; Handle $2021 timer d4
0983   039A 23          				inc			hl
0984   039B CD AE 03    				call		L03AE						; Handle $2022 timer d3
0985   039E 23          				inc			hl
0986   039F CD AE 03    				call		L03AE						; Handle $2023 timer d2
0987   03A2 23          				inc			hl
0988   03A3 CD AE 03    				call		L03AE 					; Handle $2024 timer d1
0989   03A6 23          				inc			hl
0990   03A7 CD AE 03    				call		L03AE						; Handle $2025 timer d0
0991   03AA 32 20 20    				ld			($2020),a
0992   03AD C9          				ret
0993   03AE             
0994   03AE             				;; Decrement timer, set bit if 0
0995   03AE             L03AE:
0996   03AE 7E          				ld			a,(hl)
0997   03AF A7          				and			a
0998   03B0 CA B8 03    				jp			z,L03B8
0999   03B3             
1000   03B3 35          				dec			(hl)
1001   03B4 C2 B8 03    				jp			nz,L03B8				; Carry clear since (hl) != 0
1002   03B7             
1003   03B7 37          				scf											; Set carry
1004   03B8             L03B8:
1005   03B8 78          				ld			a,b
1006   03B9 17          				rla											; Shift 0 into b unless carry set above
1007   03BA 47          				ld			b,a
1008   03BB C9          				ret
1009   03BC             
1010   03BC             				;; Called from both interrupt routines
1011   03BC             				;; Updates and redraw "wave"
1012   03BC             L03BC:
1013   03BC 01 27 20    				ld			bc,$2027				; Wave state
1014   03BF 0A          				ld			a,(bc)
1015   03C0 C6 0A       				add			a,$0A						; $00 -> $0A -> $14 -> $1E = $00
1016   03C2 FE 1E       				cp			$1E
1017   03C4 C2 C8 03    				jp			nz,L03C8
1018   03C7             
1019   03C7 AF          				xor			a								; a=0
1020   03C8             L03C8:
1021   03C8 02          				ld			(bc),a					; Store state
1022   03C9 03          				inc			bc							; $2028
1023   03CA 5F          				ld			e,a
1024   03CB 16 00       				ld			d,$00
1025   03CD 21 C9 0B    				ld			hl,WATER0				; Start of waves
1026   03D0 19          				add			hl,de
1027   03D1 EB          				ex			de,hl						; de = wave table entry
1028   03D2 0A          				ld			a,(bc)					; Get state
1029   03D3 3C          				inc			a
1030   03D4 E6 1F       				and			$1F							; Loops $00 to $1F
1031   03D6 02          				ld			(bc),a					; Save state
1032   03D7             
1033   03D7             				;; Screen location
1034   03D7 21 E0 27    				ld			hl,WAVLOC
1035   03DA 85          				add			a,l
1036   03DB 6F          				ld			l,a
1037   03DC 01 20 00    				ld			bc,RINC					; Row increment
1038   03DF             L03DF:
1039   03DF 1A          				ld			a,(de)					; Get byte
1040   03E0 13          				inc			de
1041   03E1 77          				ld			(hl),a					; Write byte
1042   03E2 09          				add			hl,bc						; Next row
1043   03E3 7D          				ld			a,l
1044   03E4 E6 E0       				and			$E0
1045   03E6 FE 60       				cp			$60							; Only 4 rows used?
1046   03E8 C2 DF 03    				jp			nz,L03DF				; Loop
1047   03EB             
1048   03EB C9          				ret
1049   03EC             
1050   03EC             				;; Test mode
1051   03EC             L03EC:
1052   03EC             #IF DOCOPY
1053   03EC 21 BF 0F    				ld			hl,COPYRGHT
1054   03EF 11 08 34    				ld			de,COPYLOC
1055   03F2 3E 0C       				ld			a,$0C						; Length
1056   03F4 CD 06 0B    				call		L0B30						; Draw string
1057   03F7             #ENDIF
1058   03F7             
1059   03F7 21 00 00    				ld			hl,L0000				; Start address
1060   03FA 11 00 00    				ld			de,$0000				; Offset 0
1061   03FD~            #IF OLDTEST
1062   03FD~            				ld			c,$02						; 2 pages
1063   03FD             #ELSE
1064   03FD 0E 04       				ld			c,$04						; 4 pages
1065   03FF             #ENDIF
1066   03FF             
1067   03FF             L03F4:
1068   03FF AF          				xor			a								; Clear checksum
1069   0400             L03F5:
1070   0400 86          				add			a,(hl)
1071   0401 23          				inc			hl
1072   0402 47          				ld			b,a
1073   0403 79          				ld			a,c
1074   0404 BC          				cp			h
1075   0405 78          				ld			a,b
1076   0406 C2 00 04    				jp			nz,L03F5				; Loop
1077   0409             
1078   0409 E5          				push		hl							; Push address
1079   040A 21 F8 0F    				ld			hl,CHKS					; Checksum table
1080   040D 19          				add			hl,de
1081   040E BE          				cp			(hl)						; Compare checksum
1082   040F 3E 40       				ld			a,$40						; (Space)
1083   0411 CA 19 04    				jp			z,L040E					; Checksum good!
1084   0414             
1085   0414 21 FC 0F    				ld			hl,ERRS					; Bad checksum table
1086   0417 19          				add			hl,de
1087   0418 7E          				ld			a,(hl)
1088   0419             
1089   0419             L040E:
1090   0419 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1091   041C 19          				add			hl,de
1092   041D 77          				ld			(hl),a					; Store char
1093   041E             
1094   041E E1          				pop			hl							; Get address back
1095   041F 13          				inc			de							; Next rom
1096   0420 0C          				inc			c								; $02 more pages
1097   0421 0C          				inc			c
1098   0422~            #IF OLDTEST
1099   0422~            				ld			a,$12
1100   0422             #ELSE
1101   0422 0C          				inc			c								; $02 more pages
1102   0423 0C          				inc			c
1103   0424 3E 14       				ld			a,$14
1104   0426             #ENDIF
1105   0426 B9          				cp			c
1106   0427 C2 FF 03    				jp			nz,L03F4				; Loop if not done
1107   042A             
1108   042A 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1109   042D 11 08 30    				ld			de,ERRLOC				; Location
1110   0430~            #IF OLDTEST
1111   0430~            				ld			a,$08						; Length
1112   0430             #ELSE
1113   0430 3E 04       				ld			a,$04						; Length
1114   0432             #ENDIF
1115   0432 CD 06 0B    				call		L0B30						; Draw string hl @ de, length a
1116   0435 76          				halt										; Stop!
1117   0436             
1118   0436~            #IF OLDTEST
1119   0436~            				;; $200 block checksums
1120   0436~            L0429:
1121   0436~            CHKS:
1122   0436~            				.db			$8D, $79, $00, $1F, $58, $6D, $EA, $C5	; Checksums
1123   0436~            
1124   0436~            				.db			$2A							; Patch byte for $400 checksum
1125   0436~            
1126   0436~            				;; Error locations
1127   0436~            L0432:
1128   0436~            ERRS:
1129   0436~            				.db			$48, $48, $47, $47, $46, $46, $45, $45	; HHGGFFEE
1130   0436             #ENDIF
1131   0436             
1132   0436             				;; Initial jump
1133   0436             L043A:
1134   0436 CD 56 08    				call		L08A2						; (End of game routine)
1135   0439 DB 02       				in			a,($02)					; IN2
1136   043B             
1137   043B~            #IF OLDDIP
1138   043B~            				and			$E0							; Test mode bits
1139   043B~            				cp			$E0
1140   043B             #ELSE
1141   043B E6 08       				and			$08							; Dip 4 = Test
1142   043D FE 08       				cp			$08
1143   043F             #ENDIF
1144   043F             
1145   043F CC EC 03    				call		z,L03EC					; Go to test mode
1146   0442             
1147   0442             				;; Clear $2002-$200a
1148   0442             				;; Change this for HS Save?
1149   0442             
1150   0442             #IF SC3DIG
1151   0442~            #IF HSSAVE
1152   0442~            				ld			hl,GTIME				; $2004
1153   0442~            				ld			a,$07						; $2004-$200a
1154   0442             #ELSE
1155   0442 21 02 20    				ld			hl,HSCORE				; $2002
1156   0445 3E 09       				ld			a,$09						; $2002-$200a
1157   0447             #ENDIF
1158   0447~            #ELSE
1159   0447~            				ld			hl,GTIME				; $2002
1160   0447~            				ld			a,$09						; $2002-$200a
1161   0447             #ENDIF
1162   0447 06 00       				ld			b,$00
1163   0449             L044D:
1164   0449 70          				ld			(hl),b
1165   044A 23          				inc			hl
1166   044B 3D          				dec			a
1167   044C C2 49 04    				jp			nz,L044D
1168   044F             
1169   044F             #IF SC3DIG
1170   044F CD C1 08    				call		CHKFP
1171   0452             #ENDIF
1172   0452             
1173   0452 21 03 09    				ld			hl,L0929				; Attract mode loop
1174   0455 22 00 20    				ld			(PRGPTR),hl
1175   0458             
1176   0458             L0459:
1177   0458 FB          				ei											; Enable interrupts
1178   0459 21 58 04    				ld			hl,L0459				; Return address
1179   045C E5          				push		hl
1180   045D 2A 00 20    				ld			hl,(PRGPTR)
1181   0460 7E          				ld			a,(hl)					; Get command
1182   0461 A7          				and			a
1183   0462 C2 7C 04    				jp			nz,L047D				; Non-zero command
1184   0465             
1185   0465             				;; a=(($2000)) == 0
1186   0465             				;; Command 0
1187   0465 CD A6 06    				call		L06A4
1188   0468 CD BE 04    				call		L04CE
1189   046B CD AF 04    				call		L04BF						; Start game
1190   046E 3A 04 20    				ld			a,(GTIME)				; Game timer
1191   0471 A7          				and			a
1192   0472 C8          				ret			z								; Skip rest if game over
1193   0473             
1194   0473 CD 51 07    				call		L074C
1195   0476 CD B1 08    				call		L08B8
1196   0479 C3 8B 04    				jp			L048C
1197   047C             
1198   047C             
1199   047C             				;; Do command from jump table
1200   047C             				;; a=(($2000)) != 0
1201   047C             L047D:
1202   047C 23          				inc			hl
1203   047D EB          				ex			de,hl						; ($2000+1) --> de
1204   047E 21 BC 09    				ld			hl,TBLJMP-2			; Jump table
1205   0481 07          				rlca										; a = ($2000)<<1
1206   0482 4F          				ld			c,a							; c = ($2000)<<1
1207   0483 06 00       				ld			b,$00
1208   0485 09          				add			hl,bc						; hl = L09e8 + ($2000)<<1
1209   0486 7E          				ld			a,(hl)
1210   0487 23          				inc			hl
1211   0488 66          				ld			h,(hl)
1212   0489 6F          				ld			l,a
1213   048A E9          				jp			(hl)
1214   048B             
1215   048B             L048C:
1216   048B 3A 05 20    				ld			a,(TIMER)
1217   048E FE 1D       				cp			$1D
1218   0490 F8          				ret			m								; Only update once per loop
1219   0491             
1220   0491             				;; Update game time
1221   0491 01 04 20    				ld			bc,GTIME				; Game time
1222   0494 11 E8 21    				ld			de,TXTBUF				; Text buffer
1223   0497             
1224   0497             #IF SC3DIG
1225   0497 CD 66 0A    				call		BCD2_0					; BCD to buffer
1226   049A             
1227   049A 3E 2B       				ld			a,$2B						; Space
1228   049C 12          				ld			(de),a					; Store
1229   049D 13          				inc			de
1230   049E             
1231   049E 01 12 20    				ld			bc,PSCORE				; Player score
1232   04A1 CD 84 0A    				call		BCD300					; 3 nybble BCD+00 to string
1233   04A4~            #ELSE
1234   04A4~            				call		L0A82						; BCD to buffer
1235   04A4~            				ex			de,hl
1236   04A4~            				call		L0A7A
1237   04A4~            
1238   04A4~            				inc			hl
1239   04A4~            				ld			(hl),$2C				; Space
1240   04A4~            				inc			hl
1241   04A4~            				ex			de,hl
1242   04A4~            				ld			bc,PSCORE				; Player score
1243   04A4~            
1244   04A4~            				call		L0A82						; BCD to buffer
1245   04A4~            				ex			de,hl
1246   04A4~            				call		L0A7A
1247   04A4~            				inc			hl
1248   04A4~            				ld			(hl),$30				; Postpend zero
1249   04A4~            				inc			hl
1250   04A4~            				ld			(hl),$30				; Postpend zero
1251   04A4             #ENDIF
1252   04A4             
1253   04A4 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1254   04A7 11 2F 3E    				ld			de,$3E2F				; Screen location
1255   04AA             #IF SC3DIG
1256   04AA 3E 07       				ld			a,$07						; Length
1257   04AC~            #ELSE
1258   04AC~            				ld			a,$06						; Length
1259   04AC             #ENDIF
1260   04AC C3 06 0B    				jp			L0B30						; Draw string hl @ de, length a
1261   04AF             
1262   04AF             L04BF:
1263   04AF 21 2A 20    				ld			hl,$202A				; Duplicate game time
1264   04B2 7E          				ld			a,(hl)
1265   04B3 A7          				and			a
1266   04B4 C8          				ret			z								; Already zero
1267   04B5             
1268   04B5 36 00       				ld			(hl),$00				; Clear
1269   04B7 21 7A 09    				ld			hl,L09A6				; Game over mode
1270   04BA 22 00 20    				ld			(PRGPTR),hl			; Write mode
1271   04BD C9          				ret
1272   04BE             
1273   04BE             				;; Choose subroutine based on $2020 bits
1274   04BE             L04CE:
1275   04BE 21 20 20    				ld			hl,$2020
1276   04C1 7E          				ld			a,(hl)
1277   04C2 A7          				and			a
1278   04C3 C8          				ret			z								; Nothing to do
1279   04C4 36 00       				ld			(hl),$00				; Clear all bits
1280   04C6             
1281   04C6 1F          				rra
1282   04C7 DC 03 06    				call		c,L0601					; Bit 0 set = Clear explosion lights
1283   04CA             
1284   04CA 1F          				rra
1285   04CB DC 10 06    				call		c,L060E					; Bit 1 set = Clear explosion on screen
1286   04CE             
1287   04CE 1F          				rra
1288   04CF DC E7 04    				call		c,L04F7					; Bit 2 set = Trigger bit 2 sound
1289   04D2             
1290   04D2 1F          				rra
1291   04D3 DC 36 06    				call		c,L0634					; Bit 3 set = Launch new ship
1292   04D6             
1293   04D6 1F          				rra
1294   04D7 DC EB 05    				call		c,L05E9					; Bit 4 set = Reload torpedos
1295   04DA             
1296   04DA 1F          				rra
1297   04DB DC 75 05    				call		c,L0573					; Bit 5 set = Increment $2000 address
1298   04DE             
1299   04DE 1F          				rra
1300   04DF DC 6E 05    				call		c,L056C					; Bit 6 set = Initialize $2000 address
1301   04E2             
1302   04E2 1F          				rra
1303   04E3 DC 01 05    				call		c,L0511					; Bit 7 set = Game time over
1304   04E6 C9          				ret
1305   04E7             
1306   04E7             
1307   04E7             				;; Bit 2 set on $2020
1308   04E7             				;; Trigger bit 2 sound and set timers
1309   04E7             L04F7:
1310   04E7 F5          				push		af
1311   04E8 21 26 20    				ld			hl,$2026
1312   04EB 7E          				ld			a,(hl)
1313   04EC A7          				and			a
1314   04ED CA FF 04    				jp			z,L050F					; Do nothing
1315   04F0             
1316   04F0 35          				dec			(hl)
1317   04F1 3E 04       				ld			a,$04						; Sound bit 2
1318   04F3 D3 05       				out			($05),a					; Audio outputs
1319   04F5 3E 19       				ld			a,$19
1320   04F7 32 23 20    				ld			($2023),a				; Set timer
1321   04FA 3E 0F       				ld			a,$0F
1322   04FC 32 25 20    				ld			(ATIMER),a			; Set timer
1323   04FF             L050F:
1324   04FF F1          				pop  af
1325   0500 C9          				ret
1326   0501             
1327   0501             
1328   0501             				;; Bit 7 set on $2020
1329   0501             L0511:
1330   0501 21 2E 20    				ld			hl,$202E
1331   0504 7E          				ld			a,(hl)
1332   0505 A7          				and			a
1333   0506 C2 33 05    				jp			nz,NOEXT				; Jump if already extended time
1334   0509             
1335   0509 36 01       				ld			(hl),$01				; Only 1 extend
1336   050B 3A 07 20    				ld			a,(IN1)					; Last IN1
1337   050E 0F          				rrca
1338   050F E6 70       				and			$70							; Base score for extended time (00 = none)
1339   0511 CA 33 05    				jp			z,NOEXT					; Jump if no extended time
1340   0514             
1341   0514 C6 09       				add			a,$09						; $20 dip = $19(00) score
1342   0516 21 12 20    				ld			hl,PSCORE				; Player score
1343   0519 BE          				cp			(hl)
1344   051A             
1345   051A             #IF SC3DIG
1346   051A DA 23 05    				jp			c,DOEXT					; Jump if score higher than metric
1347   051D             
1348   051D             				;; Extended score if >10k
1349   051D 23          				inc			hl							; Player score hi
1350   051E 7E          				ld			a,(hl)
1351   051F A7          				and			a
1352   0520 CA 33 05    				jp			z,NOEXT
1353   0523~            #ELSE
1354   0523~            				jp			nc,NOEXT				; Jump if score lower than metric
1355   0523             #ENDIF
1356   0523             
1357   0523             DOEXT:
1358   0523 3E 20       				ld			a,$20						; 20 extra seconds
1359   0525 32 04 20    				ld			(GTIME),a				; Set game time
1360   0528 21 05 0F    				ld			hl,LTEXT				; EXTENDED_TIME
1361   052B 11 03 3C    				ld			de,$3C03				; Location
1362   052E 3E 0C       				ld			a,$0C						; Length
1363   0530 C3 06 0B    				jp			L0B30						; Draw string hl @ de, length a
1364   0533             
1365   0533             L053D:
1366   0533             NOEXT:
1367   0533 21 C9 20    				ld			hl,TORPS-TINC		; (Offset) Torp base
1368   0536 01 1E 00    				ld			bc,TINC					; Torp increment
1369   0539             L0543:
1370   0539 09          				add			hl,bc
1371   053A 7D          				ld			a,l
1372   053B FE 5F       				cp			$5F							; LSB past end of torps
1373   053D CA 52 05    				jp			z,L055C					; Done with torps
1374   0540             
1375   0540 7E          				ld			a,(hl)					; Load flags
1376   0541 A7          				and			a
1377   0542 F2 39 05    				jp			p,L0543					; Loop if not active
1378   0545             
1379   0545 AF          				xor			a
1380   0546 32 21 20    				ld			($2021),a
1381   0549 32 2D 20    				ld			($202D),a				; Torpedo status
1382   054C 3E 01       				ld			a,$01
1383   054E 32 04 20    				ld			(GTIME),a				; Let torps finish
1384   0551 C9          				ret
1385   0552             
1386   0552             				;; Check if new high score
1387   0552             L055C:
1388   0552 21 03 09    				ld			hl,L0929				; Attract mode
1389   0555 22 00 20    				ld			(PRGPTR),hl			; Next command
1390   0558             
1391   0558             #IF SC3DIG
1392   0558 3A 13 20    				ld			a,(PSCORE+1)		; Score hi byte
1393   055B 21 03 20    				ld			hl,HSCORE+1			; High  hi byte
1394   055E BE          				cp			(hl)
1395   055F D8          				ret			c								; Score lower
1396   0560             
1397   0560 77          				ld			(hl),a					; Write new hi byte
1398   0561             #ENDIF
1399   0561             
1400   0561 3A 12 20    				ld			a,(PSCORE)			; Player score
1401   0564 21 02 20    				ld			hl,HSCORE				; High score
1402   0567             
1403   0567             #IF SC3DIG
1404   0567 C2 6C 05    				jp			nz,HSDOLO				; Higher hi byte -> write low
1405   056A             #ENDIF
1406   056A BE          				cp			(hl)
1407   056B D8          				ret			c
1408   056C             
1409   056C             HSDOLO:
1410   056C 77          				ld			(hl),a					; Write new score
1411   056D C9          				ret
1412   056E             
1413   056E             
1414   056E             				;; Bit 6 set on $2020
1415   056E             				;; Initialize $2000 address
1416   056E             L056C:
1417   056E 21 39 09    				ld			hl,L0963				; Game over
1418   0571 22 00 20    				ld			(PRGPTR),hl
1419   0574 C9          				ret
1420   0575             
1421   0575             				;; Bit 5 set on $2020
1422   0575             				;; Increment $2000 address
1423   0575             L0573:
1424   0575 2A 00 20    				ld			hl,(PRGPTR)			; After 2011 timer?
1425   0578 23          				inc			hl
1426   0579 22 00 20    				ld			(PRGPTR),hl
1427   057C C9          				ret
1428   057D             
1429   057D             
1430   057D             				;; Handle change in fire button
1431   057D             HFIRE:
1432   057D C8          				ret			z								; Not pressed
1433   057E             
1434   057E 3A 04 20    				ld			a,(GTIME)				; Game timer
1435   0581 A7          				and			a
1436   0582 C8          				ret			z								; Not in game mode
1437   0583             
1438   0583 3A 21 20    				ld			a,($2021)				; Timer between torps
1439   0586 A7          				and			a
1440   0587 C0          				ret			nz							; Missile already active? 
1441   0588             
1442   0588 21 2D 20    				ld			hl,$202D				; Torpedo status
1443   058B 7E          				ld			a,(hl)
1444   058C E6 1F       				and			$1F
1445   058E C8          				ret			z								; Reloading...
1446   058F             
1447   058F 7E          				ld			a,(hl)					; Torpedo status
1448   0590 E6 0F       				and			$0F							; Mask torp bits
1449   0592 1F          				rra
1450   0593 06 20       				ld			b,$20						; Bit 5 = Reload
1451   0595 A7          				and			a
1452   0596 CA 9B 05    				jp			z,L0599
1453   0599             
1454   0599 06 10       				ld			b,$10						; Bit 4 = Ready
1455   059B             L0599:
1456   059B B0          				or			b
1457   059C 77          				ld			(hl),a
1458   059D D3 02       				out			($02),a					; Torpedo display
1459   059F 21 21 20    				ld			hl,$2021				; Timer between torps
1460   05A2 36 08       				ld			(hl),$08				; Short timer between shots
1461   05A4 E6 10       				and			$10
1462   05A6 C2 AB 05    				jp			nz,L05A9
1463   05A9             
1464   05A9 36 3C       				ld			(hl),$3C				; Long timer to reload
1465   05AB             L05A9:
1466   05AB 3E 02       				ld			a,$02						; Sound bit 1 
1467   05AD D3 05       				out			($05),a					; Audio outputs
1468   05AF 3E 0F       				ld			a,$0F
1469   05B1 32 25 20    				ld			(ATIMER),a			; Set timer
1470   05B4             
1471   05B4             				;; Find empty slot
1472   05B4 21 C9 20    				ld			hl,TORPS-TINC 	; (Offset) Torp base
1473   05B7 11 1E 00    				ld			de,TINC 				; Torpedo increment
1474   05BA             L05B8:
1475   05BA 19          				add			hl,de
1476   05BB 7E          				ld			a,(hl)
1477   05BC A7          				and			a
1478   05BD FA BA 05    				jp			m,L05B8					; D7 high = used, try again
1479   05C0             
1480   05C0             				;; New torpedo
1481   05C0 11 08 00    				ld			de,$0008
1482   05C3 19          				add			hl,de						; Move ahead in sprite table
1483   05C4 36 0E       				ld			(hl),SHOT0>>8		; SHOT0 MSB
1484   05C6 2B          				dec			 hl
1485   05C7 36 4B       				ld			(hl),SHOT0&$FF	; SHOT0 LSB
1486   05C9 2B          				dec			hl
1487   05CA 36 9C       				ld			(hl),$9C				; ??
1488   05CC 2B          				dec			hl
1489   05CD 36 E0       				ld			(hl),$E0				; Y pos
1490   05CF 2B          				dec			hl
1491   05D0 36 FA       				ld			(hl),$FA				; Delta y
1492   05D2 2B          				dec			hl
1493   05D3 2B          				dec			hl
1494   05D4             
1495   05D4             				;; Caculate shot X location
1496   05D4 11 38 0F    				ld			de,TGREY				; Grey code table?
1497   05D7 EB          				ex			de,hl
1498   05D8 3A 08 20    				ld			a,(IN0)					; Last IN0
1499   05DB E6 1F       				and			$1F							; Mask periscope bits
1500   05DD 4F          				ld			c,a
1501   05DE 06 00       				ld			b,$00
1502   05E0 09          				add			hl,bc
1503   05E1 7E          				ld			a,(hl)					; Location from grey code
1504   05E2 EB          				ex			de,hl
1505   05E3             
1506   05E3 77          				ld			(hl),a					; X Pos
1507   05E4 2B          				dec			hl
1508   05E5 36 00       				ld			(hl),$00				; Delta X
1509   05E7 2B          				dec			hl
1510   05E8 36 C0       				ld			(hl),$C0				; Set active
1511   05EA C9          				ret
1512   05EB             
1513   05EB             
1514   05EB             				;; Bit 4 set on $2020
1515   05EB             				;; Reset torpedo status after reload
1516   05EB             L05E9:
1517   05EB F5          				push		af
1518   05EC 21 2D 20    				ld			hl,$202D				; Torpedo status
1519   05EF 7E          				ld			a,(hl)
1520   05F0 E6 10       				and			$10							; Check ready
1521   05F2 C2 01 06    				jp			nz,L05FF
1522   05F5             
1523   05F5 3E 1F       				ld			a,$1F						; Reset torpedo status
1524   05F7 D3 02       				out			($02),a					; Torpedo lamps
1525   05F9 77          				ld			(hl),a
1526   05FA 3E 08       				ld			a,$08						; Sound bit 3
1527   05FC D3 05       				out			($05),a					; Audio outputs
1528   05FE CD EF 07    				call		L07EA						; Redraw mines
1529   0601             
1530   0601             L05FF:
1531   0601 F1          				pop			af
1532   0602 C9          				ret
1533   0603             
1534   0603             				;; Bit 0 set on $2020
1535   0603             				;; Clear explosions
1536   0603             L0601:
1537   0603 F5          				push		af
1538   0604 AF          				xor			a								; Clear sounds
1539   0605 D3 05       				out			($05),a					; Audio outputs
1540   0607 D3 01       				out			($01),a					; Explosion lamp
1541   0609 3A 2D 20    				ld			a,($202D)				; Torpedo status
1542   060C D3 02       				out			($02),a					; Periscope lamp
1543   060E F1          				pop			af
1544   060F C9          				ret
1545   0610             
1546   0610             
1547   0610             				;; Bit 1 set on $2020
1548   0610             				;; Clear sprites?
1549   0610             L060E:
1550   0610 F5          				push		af
1551   0611 21 F0 21    				ld			hl,HMISS
1552   0614             L0612:
1553   0614 7E          				ld			a,(hl)
1554   0615 A7          				and			a
1555   0616 CA 34 06    				jp			z,L0632					; Already cleared
1556   0619             
1557   0619             				;; (hl) -> de, clear (hl)
1558   0619 36 00       				ld			(hl),$00
1559   061B 23          				inc			hl
1560   061C 57          				ld			d,a
1561   061D 5E          				ld			e,(hl)
1562   061E 36 00       				ld			(hl),$00
1563   0620 23          				inc			hl
1564   0621             
1565   0621 FE 2C       				cp			$2C
1566   0623 01 03 0A    				ld			bc,$0A03				; 10 x 3 byte area  (after ship hit)
1567   0626 DA 2C 06    				jp			c,L062A
1568   0629             
1569   0629 01 05 20    				ld			bc,$2005				; 32 x 5 byte area  (after mine hit)
1570   062C             L062A:
1571   062C EB          				ex			de,hl
1572   062D CD 11 0A    				call		L0A3F						; Clear area at hl
1573   0630 EB          				ex			de,hl
1574   0631 C3 14 06    				jp			L0612						; Loop
1575   0634             L0632:
1576   0634 F1          				pop			af
1577   0635 C9          				ret
1578   0636             
1579   0636             				;; Bit 3 set on $2020
1580   0636             				;; Launch new ship
1581   0636             L0634:
1582   0636 F5          				push		af
1583   0637 3A 05 20    				ld			a,(TIMER)
1584   063A E6 0F       				and			$0F							; Mask low 4 bits
1585   063C F6 50       				or			$50							; Set bits 6,4
1586   063E 32 22 20    				ld			($2022),a				; Set counter
1587   0641             
1588   0641 01 29 20    				ld			bc,$2029				; Ship type loc
1589   0644 0A          				ld			a,(bc)					; Get ship index
1590   0645 3C          				inc			a								; Increment
1591   0646 FE 07       				cp			$07							; Max = 6
1592   0648 C2 4C 06    				jp			nz,L064A
1593   064B             
1594   064B AF          				xor			a								; Set to 0
1595   064C             L064A:
1596   064C 02          				ld			(bc),a					; Store ship index
1597   064D             
1598   064D 21 B8 0F    				ld			hl,L0FDE				; Ship type table
1599   0650 85          				add			a,l
1600   0651 6F          				ld			l,a
1601   0652 7E          				ld			a,(hl)					; Get ship type
1602   0653 47          				ld			b,a							; Stash in b
1603   0654 FE 06       				cp			$06							; Is small / fast?
1604   0656 C2 6D 06    				jp			nz,L066B				; No = jump
1605   0659             
1606   0659 3E 04       				ld			a,$04						; Sound bit 2
1607   065B D3 05       				out			($05),a					; Audio outputs
1608   065D 3E 19       				ld			a,$19
1609   065F 32 23 20    				ld			($2023),a				; Set timer
1610   0662 3E 02       				ld			a,$02
1611   0664 32 26 20    				ld			($2026),a				; Set timer
1612   0667 3E 0F       				ld			a,$0F
1613   0669 32 25 20    				ld			(ATIMER),a			; Set timer
1614   066C 78          				ld			a,b							; Ship type
1615   066D             
1616   066D             				;; hl = $2031 - $0d + $08 + $0d * a 
1617   066D             L066B:
1618   066D 21 2C 20    				ld			hl,SHIPA0-SINC+$08			; ROM loc in sprite table
1619   0670 11 0D 00    				ld			de,SINC					; Sprite increment
1620   0673             L0671:
1621   0673 19          				add			hl,de
1622   0674 3D          				dec			a
1623   0675 C2 73 06    				jp			nz,L0671
1624   0678             
1625   0678 78          				ld			a,b
1626   0679 EB          				ex			de,hl
1627   067A             
1628   067A 21 1E 20    				ld			hl,$201E				; Current ship move index
1629   067D 7E          				ld			a,(hl)					; Read ship move index
1630   067E 34          				inc			(hl)						; Increment ship move index
1631   067F 21 58 0F    				ld			hl,L0F7E				; Even ship move table?
1632   0682 1F          				rra
1633   0683 D2 8D 06    				jp			nc,L068B
1634   0686             
1635   0686 21 88 0F    				ld			hl,L0FAE				; Odd ship move table?
1636   0689 78          				ld			a,b
1637   068A F6 10       				or			$10							; Set direction bit
1638   068C 47          				ld			b,a
1639   068D             
1640   068D             L068B:
1641   068D 78          				ld			a,b
1642   068E             
1643   068E             				;; Index into ship type table
1644   068E 3D          				dec  a									; a = 0-5 / 10-15
1645   068F 07          				rlca
1646   0690 07          				rlca
1647   0691 07          				rlca
1648   0692 E6 38       				and			$38							; Clear low bits
1649   0694 85          				add			a,l
1650   0695 6F          				ld			l,a
1651   0696             
1652   0696             				;; Copy ship table data to sprite block
1653   0696 0E 08       				ld   c,$08
1654   0698             L0696:
1655   0698 7E          				ld			a,(hl)
1656   0699 23          				inc			hl
1657   069A 12          				ld			(de),a
1658   069B 1B          				dec			de
1659   069C 0D          				dec			c
1660   069D C2 98 06    				jp			nz,L0696
1661   06A0             
1662   06A0 78          				ld			a,b
1663   06A1 F6 C0       				or			$C0							; B7 = moving, B6 = don't clear, B5 = ??
1664   06A3 12          				ld			(de),a					; Store ship type?
1665   06A4 F1          				pop			af
1666   06A5 C9          				ret
1667   06A6             
1668   06A6             				;; Called when (($2000)) == 0
1669   06A6             L06A4:
1670   06A6 21 C1 21    				ld			hl,$21C1				; Start of sprite index list
1671   06A9             L06A7:
1672   06A9 7E          				ld			a,(hl)
1673   06AA A7          				and			a
1674   06AB C8          				ret			z								; Done if this sprite inactive
1675   06AC             
1676   06AC 36 00       				ld			(hl),$00				; Clear active flag
1677   06AE 23          				inc			hl
1678   06AF 56          				ld			d,(hl)					; Get index into sprite table
1679   06B0 E5          				push		hl
1680   06B1             
1681   06B1             				;; hl = $2024 + $d * a
1682   06B1 21 24 20    				ld			hl,SHIPA0-SINC	; No 0 element
1683   06B4 01 0D 00    				ld			bc,SINC					; Sprite entry length
1684   06B7             L06B5:
1685   06B7 09          				add			hl,bc
1686   06B8 3D          				dec			a
1687   06B9 C2 B7 06    				jp			nz,L06B5
1688   06BC             
1689   06BC 01 08 00    				ld			bc,$0008				; Middle of sprite table and work back
1690   06BF 09          				add			hl,bc
1691   06C0             
1692   06C0             				;; Change sprite to sinking ship
1693   06C0 36 0E       				ld			(hl),SINK>>8		; SINK MSB
1694   06C2 2B          				dec			hl
1695   06C3 36 2B       				ld			(hl),SINK&$FF		; SINK LSB
1696   06C5 2B          				dec			hl
1697   06C6 2B          				dec			hl							; hl = Y pos
1698   06C7 2B          				dec			hl
1699   06C8 36 01       				ld			(hl),$01				; Delta y (?)
1700   06CA 2B          				dec			hl							; hl = Y flags
1701   06CB 2B          				dec			hl
1702   06CC 72          				ld			(hl),d					; X position
1703   06CD 2B          				dec			hl
1704   06CE 36 00       				ld			(hl),$00				; Delta x (?)
1705   06D0 2B          				dec			hl
1706   06D1 46          				ld			b,(hl)					; Get flags + ship type
1707   06D2 36 E0       				ld			(hl),$E0				; Flags
1708   06D4             
1709   06D4 3A 04 20    				ld			a,(GTIME)				; Game time
1710   06D7 A7          				and			a
1711   06D8 C2 DD 06    				jp			nz,L06DB				; Add score if time is left
1712   06DB E1          				pop			hl
1713   06DC C9          				ret
1714   06DD             
1715   06DD             
1716   06DD             				;; Score sunk ship
1717   06DD             L06DB:
1718   06DD 78          				ld			a,b
1719   06DE             
1720   06DE             				;; Draw sunk ship score
1721   06DE 01 31 0F    				ld			bc,TSCORE-1			; Ship hit score table
1722   06E1 E6 07       				and			$07
1723   06E3 81          				add			a,c
1724   06E4 4F          				ld			c,a							; bc = index into table
1725   06E5             
1726   06E5 11 E8 21    				ld			de,TXTBUF				; Text buffer
1727   06E8             
1728   06E8             #IF SC3DIG
1729   06E8 CD 5D 0A    				call		BCD2__					; BCD to string
1730   06EB CD 87 0A    				call		ADD00						; Append 00
1731   06EE~            #ELSE
1732   06EE~            				call		L0A82						; BCD to buffer
1733   06EE~            				ld			a,$30
1734   06EE~            				ld			(de),a					; Append 0
1735   06EE~            				inc			de
1736   06EE~            				ld			(de),a					; Append 0
1737   06EE             #ENDIF
1738   06EE             
1739   06EE 0A          				ld			a,(bc)
1740   06EF 21 12 20    				ld			hl,PSCORE				; Player score
1741   06F2 86          				add			a,(hl)					; Add a
1742   06F3 27          				daa
1743   06F4 77          				ld			(hl),a					; Store
1744   06F5             
1745   06F5             #IF SC3DIG
1746   06F5 D2 FA 06    				jp			nc,NOCARRY
1747   06F8 23          				inc			hl							; Store MSB
1748   06F9 34          				inc			(hl)						; Increment
1749   06FA             
1750   06FA             NOCARRY:
1751   06FA             #ENDIF
1752   06FA E1          				pop			hl
1753   06FB             
1754   06FB~            #IF GETMAC
1755   06FB~            				call		GETBC
1756   06FB             #ELSE
1757   06FB 4E          				ld			c,(hl)					; Get bc from table
1758   06FC 23          				inc			hl
1759   06FD 46          				ld			b,(hl)
1760   06FE 23          				inc			hl
1761   06FF             #ENDIF
1762   06FF             
1763   06FF E5          				push		hl
1764   0700 78          				ld			a,b
1765   0701 C6 20       				add			a,$20
1766   0703 21 96 09    				ld			hl,L09C2				; Explosion lamp 0-7 table
1767   0706 DA 0C 07    				jp			c,L0707
1768   0709             
1769   0709 21 8E 09    				ld			hl,L09BA				; Explosion lamp 8-F table
1770   070C             L0707:
1771   070C             				;; Use 3 MSBs of c to index into table
1772   070C 79          				ld			a,c
1773   070D 07          				rlca
1774   070E 07          				rlca
1775   070F 07          				rlca
1776   0710 E6 07       				and			$07
1777   0712 85          				add			a,l
1778   0713 6F          				ld			l,a
1779   0714 7E          				ld			a,(hl)
1780   0715 D3 01       				out			($01),a					; Explosion lamp
1781   0717 3E 01       				ld			a,$01						; Sound bit 0
1782   0719 D3 05       				out			($05),a					; Audio write
1783   071B 3E 1E       				ld			a,$1E
1784   071D 32 25 20    				ld			(ATIMER),a			; Set audio timer
1785   0720             
1786   0720             				;; Calculate score draw location
1787   0720 78          				ld			a,b
1788   0721 16 24       				ld			d,$24
1789   0723 C6 20       				add			a,$20
1790   0725 FA 2A 07    				jp			m,L0725
1791   0728 16 28       				ld			d,$28
1792   072A             L0725:
1793   072A 79          				ld			a,c
1794   072B 0F          				rrca
1795   072C 0F          				rrca
1796   072D 0F          				rrca
1797   072E E6 1F       				and			$1F
1798   0730 CA 34 07    				jp			z,L072F
1799   0733 3D          				dec			a
1800   0734             L072F:
1801   0734 FE 1E       				cp			$1E
1802   0736 C2 3A 07    				jp			nz,L0735
1803   0739 3D          				dec			a
1804   073A             L0735:
1805   073A F6 A0       				or			$A0							; Set bits 7,5 
1806   073C 5F          				ld			e,a
1807   073D             
1808   073D CD E0 07    				call		L07DB						; de to first empty missle slot
1809   0740             
1810   0740 3E 2D       				ld			a,$2D
1811   0742 32 24 20    				ld			($2024),a				; Set timer (for showing score)
1812   0745 21 E9 21    				ld			hl,TXTBUF+1			; Buffer?
1813   0748 3E 03       				ld			a,$03						; Length
1814   074A CD 06 0B    				call		L0B30						; Draw string hl @ de, length a
1815   074D             
1816   074D E1          				pop			hl
1817   074E C3 A9 06    				jp			L06A7
1818   0751             
1819   0751             
1820   0751             				;; Mine collision detection?
1821   0751             L074C:
1822   0751 21 A3 21    				ld			hl,$21A3				; $44 long data block
1823   0754             L074F:
1824   0754 7E          				ld			a,(hl)
1825   0755 A7          				and			a
1826   0756 C8          				ret			z								; Skip if zero
1827   0757             
1828   0757 23          				inc			hl							; $21A4
1829   0758 C6 10       				add			a,$10
1830   075A 07          				rlca										; 65432107
1831   075B 07          				rlca										; 54321076
1832   075C 07          				rlca										; 43210765
1833   075D E6 07       				and			$07							; Mines to to 7
1834   075F             
1835   075F             				;; hl= X position of mine
1836   075F 11 67 20    				ld			de,MINES - (2*MINC) + $02	; ($2067 = XPOS)
1837   0762 01 0D 00    				ld			bc,MINC					; Mine increment
1838   0765 EB          				ex			de,hl
1839   0766             L0761:
1840   0766 09          				add			hl,bc
1841   0767 09          				add			hl,bc
1842   0768 3D          				dec			a
1843   0769 C2 66 07    				jp			nz,L0761
1844   076C             
1845   076C 1A          				ld			a,(de)					; $21A4
1846   076D D6 08       				sub			$08
1847   076F 96          				sub			(hl)
1848   0770 FE EC       				cp			$EC
1849   0772 D2 76 07    				jp			nc,L0771
1850   0775             
1851   0775 09          				add			hl,bc
1852   0776             L0771:
1853   0776 2B          				dec			hl
1854   0777 2B          				dec			hl
1855   0778             
1856   0778             #IF MINEFIX
1857   0778 7E          				ld			a,(hl)
1858   0779 E6 7F       				and			$7F							; Clear active bit
1859   077B 77          				ld			(hl),a
1860   077C~            #ELSE
1861   077C~            				ld			(hl),$00
1862   077C             #ENDIF
1863   077C             
1864   077C EB          				ex			de,hl
1865   077D 2B          				dec			hl
1866   077E 7E          				ld			a,(hl)
1867   077F C6 30       				add			a,$30
1868   0781 E6 F0       				and			$F0
1869   0783 57          				ld			d,a
1870   0784 36 00       				ld			(hl),$00
1871   0786 23          				inc			hl
1872   0787 5E          				ld			e,(hl)
1873   0788 23          				inc			hl
1874   0789 E5          				push		hl
1875   078A CD D2 09    				call		L0A00						; Get address for shifted data
1876   078D             
1877   078D             				;; Make sure explosion fits on screen
1878   078D             				;; 0-11   -> 0
1879   078D             				;; 1D-1F -> 1C
1880   078D 7B          				ld			a,e
1881   078E E6 1F       				and			$1F
1882   0790 CA 9D 07    				jp			z,L0796					; e=$00
1883   0793             
1884   0793 3D          				dec			a
1885   0794 CA 9D 07    				jp			z,L0796					; e=$01
1886   0797             
1887   0797             L0790:
1888   0797 3D          				dec			a
1889   0798 FE 1C       				cp			$1C
1890   079A F2 97 07    				jp			p,L0790					; Loop
1891   079D             
1892   079D             				;; Draw mine explosion
1893   079D             L0796:
1894   079D 5F          				ld			e,a
1895   079E CD E0 07    				call		L07DB						; de to first empty missile slot
1896   07A1             
1897   07A1 42          				ld			b,d
1898   07A2 04          				inc			b
1899   07A3 04          				inc			b
1900   07A4 4B          				ld			c,e
1901   07A5 0C          				inc			c
1902   07A6 C5          				push		bc
1903   07A7             
1904   07A7             				;; 3 rows up for middle char?
1905   07A7 7B          				ld			a,e
1906   07A8 C6 60       				add			a,$60
1907   07AA 5F          				ld			e,a
1908   07AB D5          				push		de
1909   07AC             
1910   07AC 42          				ld			b,d
1911   07AD 0C          				inc			c
1912   07AE C5          				push		bc
1913   07AF             
1914   07AF 3E 1E       				ld			a,$1E
1915   07B1 32 25 20    				ld			(ATIMER),a			; Set timer (audio)
1916   07B4 3E 0F       				ld			a,$0F
1917   07B6 32 24 20    				ld			($2024),a				; Set timer (show explosion)
1918   07B9 3E 10       				ld			a,$10						; Sound bit 4
1919   07BB D3 05       				out			($05),a					; Sound write
1920   07BD             
1921   07BD 7B          				ld			a,e							; No idea what e is here, but used as PRNG
1922   07BE             
1923   07BE~            #IF OLDINT
1924   07BE~            				and			$02							; Mask bit (a=0 or 2)
1925   07BE~            				ld			hl,TEMINE
1926   07BE~            				add			a,l
1927   07BE~            				ld			l,a							; hl = ZAP or WAM
1928   07BE~            
1929   07BE~            				;; Get address from table -> hl
1930   07BE~            				ld			e,(hl)
1931   07BE~            				inc			hl
1932   07BE~            				ld			d,(hl)
1933   07BE~            				ex			de,hl						; hl = Table entry
1934   07BE             #ELSE
1935   07BE             #IF MOREEXP
1936   07BE E6 18       				and			$18							; Mask bit (a=0/8/10/18)
1937   07C0~            #ELSE
1938   07C0~            				and			$08							; Mask bit (a=0/8)
1939   07C0             #ENDIF
1940   07C0 21 12 0F    				ld			hl,TZAP					; First mine explosion entry
1941   07C3 16 00       				ld			d,$00
1942   07C5 5F          				ld			e,a							; Use de in case we cross a page boundry
1943   07C6 19          				add			hl,de						; hl = Table entry
1944   07C7             #ENDIF
1945   07C7             
1946   07C7             				;; "Middle" letter or ZAP/WAM
1947   07C7 D1          				pop			de
1948   07C8 7E          				ld			a,(hl)
1949   07C9 23          				inc			hl
1950   07CA CD 06 0B    				call		L0B30						; Draw string hl @ de, length a
1951   07CD             
1952   07CD             				;; Rest of ZAP/WAM
1953   07CD D1          				pop			de
1954   07CE 7E          				ld			a,(hl)
1955   07CF 23          				inc			hl
1956   07D0 CD 06 0B    				call		L0B30						; Draw string hl @ de, length a
1957   07D3             
1958   07D3             				;; Bottom of mine explosion
1959   07D3 D1          				pop			de
1960   07D4 21 8B 0E    				ld			hl,MINEEXP
1961   07D7 3E 03       				ld			a,$03
1962   07D9 CD 06 0B    				call		L0B30						; Draw string hl @ de, length a
1963   07DC             
1964   07DC E1          				pop			hl
1965   07DD C3 54 07    				jp			L074F
1966   07E0             
1967   07E0             
1968   07E0             				;; Write de to first empty missile slot
1969   07E0             L07DB:
1970   07E0 21 F0 21    				ld			hl,HMISS				; Missile table
1971   07E3             L07DE:
1972   07E3 7E          				ld			a,(hl)
1973   07E4 23          				inc			hl
1974   07E5 B6          				or			(hl)
1975   07E6 23          				inc			hl
1976   07E7 C2 E3 07    				jp			nz,L07DE
1977   07EA             
1978   07EA 2B          				dec			hl
1979   07EB 73          				ld			(hl),e
1980   07EC 2B          				dec			hl
1981   07ED 72          				ld			(hl),d
1982   07EE C9          				ret
1983   07EF             
1984   07EF             				;; Draw mines after reload
1985   07EF             L07EA:
1986   07EF             #IF SC3DIG
1987   07EF 21 13 20    				ld			hl,PSCORE+1			; Score MSB
1988   07F2 7E          				ld			a,(hl)
1989   07F3 A7          				and			a
1990   07F4 C2 FE 07    				jp			nz,MAXMINE			; >10k points
1991   07F7             
1992   07F7 2B          				dec			hl							; Score LSB
1993   07F8 7E          				ld			a,(hl)
1994   07F9~            #ELSE
1995   07F9~            				ld			a,(PSCORE)			; Player score
1996   07F9             #ENDIF
1997   07F9             
1998   07F9 FE 40       				cp			$40
1999   07FB             
2000   07FB             #IF MINEFIX
2001   07FB DA 00 08    				jp			c,LT40
2002   07FE             
2003   07FE             MAXMINE:
2004   07FE 3E 30       				ld			a,$30						; Min of score or $30
2005   0800             LT40:
2006   0800 E6 30       				and			$30							; Clear LSBs
2007   0802 C6 10       				add			a,$10
2008   0804 21 7F 20    				ld			hl,MINES
2009   0807 01 0D 00    				ld			bc,MINC
2010   080A             
2011   080A             NEWMINE:
2012   080A 5F          				ld			e,a							; Stash a
2013   080B 7E          				ld			a,(hl)					; Mine status
2014   080C A7          				and			a
2015   080D FA 1B 08    				jp			m,NMEND					; Already active
2016   0810             
2017   0810 F6 80       				or			$80							; Activate mine
2018   0812 77          				ld			(hl),a					; Mine status
2019   0813 23          				inc			hl
2020   0814 23          				inc			hl
2021   0815 7E          				ld			a,(hl)					; Mine X pos
2022   0816 C6 80       				add			a,$80						; Reposition
2023   0818 77          				ld			(hl),a					; Mine X pos
2024   0819 2B          				dec			hl
2025   081A 2B          				dec			hl
2026   081B             
2027   081B             NMEND:
2028   081B 09          				add			hl,bc						; Next mine
2029   081C 7B          				ld			a,e							; Restore a
2030   081D D6 08       				sub			$08
2031   081F C2 0A 08    				jp			nz,NEWMINE			; Loop
2032   0822 C9          				ret
2033   0823             
2034   0823~            #ELSE
2035   0823~            				jp			c,L07F4					; <$40
2036   0823~            
2037   0823~            MAXMINE:
2038   0823~            				ld			a,$39						; Min of score or $39
2039   0823~            L07F4:
2040   0823~            				ld			($202C),a				; Mine counter
2041   0823~            
2042   0823~            				ld			hl,MINES				; 1st mine sprite
2043   0823~            				ld			de,$5050				; Initial Mine X,Y
2044   0823~            
2045   0823~            L07FD:
2046   0823~            				ld			a,(hl)
2047   0823~            				and			a
2048   0823~            				jp			m,L0835					; Mine needs to be erased
2049   0823~            
2050   0823~            				;; Launch mine
2051   0823~            NEWMINE:
2052   0823~            L0802:
2053   0823~            				ld			bc,$0008
2054   0823~            				add			hl,bc						; Advance in sprite entry
2055   0823~            				ld			(hl),MINE>>8		; Mine MSB (+8)
2056   0823~            				dec			hl
2057   0823~            				ld			(hl),MINE&$FF 	; Mine LSB (+7)
2058   0823~            				dec			hl
2059   0823~            				dec			hl
2060   0823~            				ld			(hl),e					; Y Pos (+5)
2061   0823~            				dec			hl
2062   0823~            				ld			(hl),b					; Delta Y (+4)
2063   0823~            				dec			hl
2064   0823~            				dec			hl
2065   0823~            				ld			(hl),d					; X Pos (+2)
2066   0823~            				dec			hl
2067   0823~            				ld			(hl),$01				; Delta X (+1)
2068   0823~            				dec			hl
2069   0823~            				ld			(hl),$80				; Flags
2070   0823~            
2071   0823~            NOMINE:
2072   0823~            				ld			a,d
2073   0823~            				add			a,$51
2074   0823~            				ld			d,a
2075   0823~            				rra
2076   0823~            				jp			c,L082E
2077   0823~            
2078   0823~            				ld			a,($202C)				; Mine counter
2079   0823~            				sub			$10
2080   0823~            				ret			m								; Don't add more mines
2081   0823~            
2082   0823~            				ld			($202C),a				; Store count
2083   0823~            				ld			a,e
2084   0823~            				add			a,$20
2085   0823~            				ld			e,a
2086   0823~            
2087   0823~            L082E:
2088   0823~            				ld			bc,SINC					; Sprite table increment
2089   0823~            				add			hl,bc						; Next mine
2090   0823~            				jp			L07FD						; More mines!
2091   0823~            
2092   0823~            				;; Erase mine area before launch
2093   0823~            L0835:
2094   0823~            				push		hl
2095   0823~            				push		de
2096   0823~            				inc			hl
2097   0823~            				inc			hl
2098   0823~            				ld			e,(hl)
2099   0823~            				inc			hl
2100   0823~            				inc			hl
2101   0823~            				inc			hl
2102   0823~            				ld			d,(hl)
2103   0823~            				call		L0A00						; Get address for shifted data
2104   0823~            				ex			de,hl
2105   0823~            				ld			bc,$1002				; 16 x 2 byte area
2106   0823~            				call		L0A3F						; Clear area at hl
2107   0823~            				pop			de
2108   0823~            				pop			hl
2109   0823~            				jp			L0802
2110   0823             #ENDIF
2111   0823             
2112   0823             				;; Handle high score erase
2113   0823             HERASE:
2114   0823 C8          				ret			z
2115   0824 AF          				xor			a								; a=0
2116   0825             
2117   0825             #IF SC3DIG
2118   0825 21 02 20    				ld			hl,HSCORE
2119   0828 77          				ld			(hl),a					; High score LSB
2120   0829 23          				inc			hl
2121   082A 77          				ld			(hl),a					; High score MSB
2122   082B~            #ELSE
2123   082B~            				ld			(HSCORE),a			; Clear high score
2124   082B             #ENDIF
2125   082B             
2126   082B 3A 10 20    				ld			a,(TIMER1)
2127   082E A7          				and			a
2128   082F C8          				ret			z
2129   0830             
2130   0830             #IF SC3DIG
2131   0830 01 02 20    				ld			bc,HSCORE
2132   0833 11 E8 21    				ld			de,TXTBUF
2133   0836 D5          				push		de
2134   0837 CD 84 0A    				call		BCD300
2135   083A~            #ELSE
2136   083A~            				ld			hl,TXTBUF				; Text buffer
2137   083A~            				push		hl
2138   083A~            
2139   083A~            				;; Write 4x '0' to buffer
2140   083A~            				ld			bc,$0430				; b=loop counter, c=data
2141   083A~            L085E:
2142   083A~            				ld			(hl),c
2143   083A~            				inc			hl
2144   083A~            				dec			b
2145   083A~            				jp			nz,L085E				; Loop
2146   083A             #ENDIF
2147   083A             
2148   083A E1          				pop			hl
2149   083B 11 25 3E    				ld			de,$3E25				; Screen location
2150   083E             
2151   083E             #IF SC3DIG
2152   083E 3E 05       				ld			a,$05						; Length = 5
2153   0840~            #ELSE
2154   0840~            				ld			a,$04						; Length = 4
2155   0840             #ENDIF
2156   0840             
2157   0840 C3 06 0B    				jp			L0B30						; Draw string hl @ de, length a
2158   0843             
2159   0843             				;; $09E8 Entry B = Write low 3 bits of $2003 to $2029?
2160   0843             JTBLB:													; $086D
2161   0843 EB          				ex			de,hl						; Sequence back to hl
2162   0844 22 00 20    				ld			(PRGPTR),hl			; Store
2163   0847             
2164   0847 3A 05 20    				ld			a,(TIMER)				; 
2165   084A E6 07       				and			$07							; Mask low 3 bits
2166   084C FE 07       				cp			$07							; == $07?
2167   084E C2 52 08    				jp			nz,L087C
2168   0851             
2169   0851 AF          				xor			a								; Clear
2170   0852             L087C:
2171   0852 32 29 20    				ld			($2029),a				; Write
2172   0855 C9          				ret
2173   0856             
2174   0856~            #IF OLDINT
2175   0856~            				;; End of game clears
2176   0856~            L0880:
2177   0856~            				di
2178   0856~            				ex			de,hl						; Stash hl in de
2179   0856~            				ld			(PRGPTR),hl
2180   0856~            				xor			a
2181   0856~            				out			($02),a					; Clear periscope lamp
2182   0856~            				out			($05),a					; Clear audio latches
2183   0856~            				out			($01),a					; Clear explosion lamp
2184   0856~            				pop			hl							; (Return address)
2185   0856~            				ld			bc,$0000
2186   0856~            				ld			de,$0000
2187   0856~            				ld			a,$10
2188   0856~            				ld			sp,$4010				; Clear $4010 down to $2011
2189   0856~            L0898:
2190   0856~            				push		bc
2191   0856~            				inc			de
2192   0856~            				cp			d
2193   0856~            				jp			nz,L0898									; Loop
2194   0856~            				ld			sp,$2400
2195   0856~            				jp			(hl)
2196   0856             #ENDIF
2197   0856             
2198   0856             				;; $09E8 Entry 3 (End game)
2199   0856             JTBL3:
2200   0856             L08A2:
2201   0856 E1          				pop			hl							; Return address (SP trashed)
2202   0857~            #IF OLDINT
2203   0857~            				ld			($2009),hl			; Stash in ($2009-200a)
2204   0857~            				call		L0880						; End of game clears
2205   0857~            				ld			hl,($2009)			; Get return address back
2206   0857             #ELSE
2207   0857             				;; Embedded end of game clears
2208   0857 F3          				di
2209   0858 EB          				ex			de,hl						; hl = program stack
2210   0859 22 00 20    				ld			(PRGPTR),hl			; Next command
2211   085C EB          				ex			de,hl						; hl = return address  REDO THIS
2212   085D AF          				xor			a
2213   085E D3 02       				out			($02),a					; Clear periscope lamp
2214   0860 D3 05       				out			($05),a					; Clear audio latches
2215   0862 D3 01       				out			($01),a					; Clear explosion lamp
2216   0864             
2217   0864             				;; Clear $400F down to $2010
2218   0864 01 00 00    				ld			bc,$0000
2219   0867 11 00 00    				ld			de,$0000
2220   086A 3E 10       				ld			a,$10
2221   086C 31 10 40    				ld			sp,$4010				; Push it real good
2222   086F             CLRLOOP:
2223   086F C5          				push		bc
2224   0870 13          				inc			de
2225   0871 BA          				cp			d
2226   0872 C2 6F 08    				jp			nz,CLRLOOP			; Loop
2227   0875             
2228   0875 31 00 24    				ld			sp,$2400				; Reset stack pointer
2229   0878             #ENDIF
2230   0878 E5          				push		hl							; Restore return address
2231   0879             
2232   0879             #IF MINEFIX
2233   0879             				;; Initial X,Y = d,e = $50,$50
2234   0879             				;; For Mine fix:
2235   0879             				;; $00, $20:		Y=$50, dX= 1, Flags=$00
2236   0879             				;; $40, $60:		Y=$70, dx= 1, Flags=$00
2237   0879             				;; $80, $A0:		Y=$90, dX= 1, Flags=$00
2238   0879             				;; $C0, $E0:		Y=$B0, dx= 1, Flags=$00
2239   0879             				
2240   0879             				;; For Seawolf '24:
2241   0879             				;; $00, $20:		Y=$50, dX= 1, Flags=$00
2242   0879             				;; $40, $60:		Y=$70, dx=-1, Flags=$40
2243   0879             				;; $80, $A0:		Y=$90, dX= 2, Flags=$00
2244   0879             				;; $C0, $E0:		Y=$B0, dx=-2, Flags=$40
2245   0879             
2246   0879             SETMINES:
2247   0879 3E 00       				ld			a,$00						; Loop counter
2248   087B 21 7F 20    				ld			hl,MINES				; First mine
2249   087E 16 50       				ld			d,$50						; Initial mine x
2250   0880             SMLOOP:
2251   0880 5F          				ld			e,a							; Stash counter
2252   0881 23          				inc			hl							; +1 = Delta X
2253   0882 34          				inc			(hl)						; +/-1
2254   0883 23          				inc			hl							; +2 = X Pos
2255   0884 72          				ld			(hl),d
2256   0885 23          				inc			hl							; +3 = Y flags
2257   0886 23          				inc			hl							; +4 = Delta Y
2258   0887 23          				inc			hl							; +5 = Y Pos
2259   0888 7B          				ld			a,e
2260   0889 E6 DF       				and			$DF							; $00/$00/$40/$40/$80/$80/$C0/$C0
2261   088B 1F          				rra											; $00/$00/$20/$20/$40/$40/$60/$60
2262   088C C6 50       				add			a,$50						; $50/$50/$70/$70/$90/$90/$B0/$B0
2263   088E 77          				ld			(hl),a
2264   088F 23          				inc			hl							; +6 = ???
2265   0890 23          				inc			hl							; +7 = ROM LSB
2266   0891 36 79       				ld			(hl),MINE&$FF
2267   0893 23          				inc			hl							; +8 = ROM MSB
2268   0894 36 0E       				ld			(hl),MINE>>8
2269   0896             
2270   0896 79          				ld			a,c							; Restore a
2271   0897 01 05 00    				ld			bc,MINC-$08			; At $08, advance to $0d
2272   089A 09          				add			hl,bc
2273   089B 4F          				ld			c,a							; Stash a
2274   089C             
2275   089C 7A          				ld			a,d							; X Pos
2276   089D C6 50       				add			a,$50						; +$50
2277   089F 57          				ld			d,a
2278   08A0             
2279   08A0 7B          				ld			a,e
2280   08A1 C6 20       				add			a,$20						; Next mine
2281   08A3 C2 80 08    				jp			nz,SMLOOP
2282   08A6             #ENDIF
2283   08A6             
2284   08A6             				;; Fresh water
2285   08A6 21 DB 0E    				ld			hl,L0F04				; Water
2286   08A9 11 E0 27    				ld			de,WAVLOC				; Screen location
2287   08AC 3E 20       				ld			a,$20						; Length
2288   08AE C3 06 0B    				jp			L0B30						; Draw string hl @ de, length a
2289   08B1             
2290   08B1             L08B8:
2291   08B1 DB 01       				in			a,($01)					; IN0
2292   08B3 47          				ld			b,a
2293   08B4 DB 01       				in			a,($01)					; IN0
2294   08B6 21 08 20    				ld			hl,IN0 					; Last IN0
2295   08B9 11 AE 09    				ld			de,TBLIN0				; Jump table for IN0
2296   08BC B8          				cp			b								; Inputs stable?
2297   08BD CC DB 0A    				call		z,L0B05					; Handle inputs
2298   08C0             
2299   08C0             				;; Jump table do nothing "routine"
2300   08C0             				;; (and end of this one)
2301   08C0             HRET:
2302   08C0 C9          				ret
2303   08C1             
2304   08C1             #IF SC3DIG
2305   08C1             				;; Check free play
2306   08C1             CHKFP:
2307   08C1 DB 02       				in			a,($02)					; IN1 (DIPs)
2308   08C3 E6 04       				and			$04
2309   08C5 C8          				ret			z
2310   08C6             
2311   08C6 32 06 20    				ld			(CREDIT),a			; 4 credits
2312   08C9 C9          				ret
2313   08CA             #ENDIF
2314   08CA             
2315   08CA             				;; Handle coin
2316   08CA             HCOIN:
2317   08CA C8          				ret			z								; No coin
2318   08CB 3E 20       				ld			a,$20						; Sound bit 5
2319   08CD D3 05       				out			($05),a					; Audio outputs
2320   08CF 3E 0F       				ld			a,$0F
2321   08D1 32 25 20    				ld			(ATIMER),a			; Set timer
2322   08D4             
2323   08D4             #IF SC3DIG
2324   08D4 21 06 20    				ld			hl,CREDIT				; Credits
2325   08D7 34          				inc			(hl)						; Add credit
2326   08D8             
2327   08D8 11 33 38    				ld			de,$3833				; Screen location
2328   08DB 21 C8 0E    				ld			hl,LTPUSH				; PRESS START
2329   08DE 3E 0B       				ld			a,$0B						; Length
2330   08E0 C3 06 0B    				jp			L0B30						; Draw string hl @ de, length a
2331   08E3 C9          				ret
2332   08E4~            #ELSE
2333   08E4~            				ld			a,(IN1)					; Last IN1
2334   08E4~            				ld			b,a
2335   08E4~            				ld			hl,HCREDIT			; Half credits
2336   08E4~            				inc			(hl)						; Increment
2337   08E4~            				and			$04							; DSW2 = coinage
2338   08E4~            				jp			z,L08E2
2339   08E4~            
2340   08E4~            				ld			a,(hl)
2341   08E4~            				rrca
2342   08E4~            				ret			c								; Only 1 half credit
2343   08E4~            
2344   08E4~            L08E2:
2345   08E4~            				ld			(hl),$00				; Clear half credit
2346   08E4~            				inc			hl
2347   08E4~            				inc			(hl)						; Add credit
2348   08E4~            
2349   08E4~            				ld			a,b							; Last IN1
2350   08E4~            				and			$08							; DSW3 = coinage
2351   08E4~            				jp			z,L08F4
2352   08E4~            
2353   08E4~            				inc			(hl)						; Add credit
2354   08E4~            				ld			a,b							; Last IN1
2355   08E4~            				and			$04							; DSW2 = coinage
2356   08E4~            				jp			z,L08F4
2357   08E4~            
2358   08E4~            				inc			(hl)						; Add credit (2C, 3C)
2359   08E4~            
2360   08E4~            L08F4:
2361   08E4~            				ld			a,(hl)					; Get credits
2362   08E4~            				and			$0F							; Useless
2363   08E4~            				ld			(hl),a					; Store credits
2364   08E4~            
2365   08E4~            				;; Falls through to start game when credits added
2366   08E4             #ENDIF
2367   08E4             
2368   08E4             
2369   08E4             HPUSH:
2370   08E4 C8          				ret			z
2371   08E5 3A 04 20    				ld			a,(GTIME)				; Game time
2372   08E8 A7          				and			a
2373   08E9 C0          				ret			nz							; Skip if game active
2374   08EA             
2375   08EA             #IF SC3DIG
2376   08EA CD C1 08    				call		CHKFP
2377   08ED             #ENDIF
2378   08ED 21 06 20    				ld			hl,CREDIT				; Credits?
2379   08F0 7E          				ld			a,(hl)
2380   08F1 A7          				and			a
2381   08F2             
2382   08F2             #IF SC3DIG
2383   08F2 C8          				ret			z
2384   08F3~            #ELSE
2385   08F3~            				jp			z,L091A					; No credits, ignore start
2386   08F3             #ENDIF
2387   08F3             
2388   08F3             L0906:
2389   08F3 35          				dec			(hl)
2390   08F4 DB 01       				in			a,($01)					; IN1
2391   08F6             
2392   08F6~            #IF OLDDIP
2393   08F6~            				rlca										; 65432107
2394   08F6~            				rlca										; 54321076
2395   08F6~            				and			$03							; Game time dips =
2396   08F6~            				ld			de,LDTIME				; $0F54 
2397   08F6~            				add			a,e							; Index into table
2398   08F6~            				ld			e,a
2399   08F6~            				ld			a,(de)
2400   08F6             #ELSE
2401   08F6 0F          				rrca										; 076543210
2402   08F7 0F          				rrca										; 107654321
2403   08F8 E6 30       				and			$30							; Game time DIPs
2404   08FA C6 61       				add			a,$61						; $61/$71/$81/$91
2405   08FC             #ENDIF
2406   08FC             
2407   08FC 32 04 20    				ld			(GTIME),a				; Store time
2408   08FF 32 2A 20    				ld			($202A),a				; Store time
2409   0902             
2410   0902 C9          				ret
2411   0903             
2412   0903~            #IF 1-SC3DIG
2413   0903~            				;; 	(original code, not used for 3 dig)?
2414   0903~            L091A:
2415   0903~            				ld			a,(IN1)					; Last IN1
2416   0903~            				and			$0C							; Mask coinage
2417   0903~            				cp			$0C							; 2C / 3Credit?
2418   0903~            				ret			nz
2419   0903~            
2420   0903~            				dec			hl
2421   0903~            				ld			a,(hl)					; Half credits
2422   0903~            				and			a
2423   0903~            				ret			z
2424   0903~            				jp			L0906
2425   0903             #ENDIF
2426   0903             
2427   0903             
2428   0903             				;; $2000 at reset
2429   0903             				;; Attract mode loop
2430   0903             
2431   0903             				;; Clear 1 char for unknown reason
2432   0903             L0929:
2433   0903 04          				.db			$04							; Command 4 = String
2434   0904 01          				.db			$01							; Length
2435   0905 8E 0E       				.dw			LTBLANK					; String src address
2436   0907 30 3E       				.dw			$3E30						; Screen dst address
2437   0909             
2438   0909             				;; INSERT COIN or PUSH BUTTOM
2439   0909 09          				.db			$09							; Commnad 9
2440   090A 06 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2441   090C 33 38       				.dw			$3833						; Location
2442   090E BD 0E       				.dw			LTCOIN					; "Insert Coin"
2443   0910 C8 0E       				.dw			LTPUSH					; "Push Button"
2444   0912             
2445   0912             				;; HIGH SCORE / YOUR SCORE
2446   0912 04          				.db			$04							; Command 4 = String
2447   0913             #IF SC3DIG
2448   0913 1B          				.db			$1B							; Length
2449   0914~            #ELSE
2450   0914~            				.db			$1A							; Length
2451   0914             #ENDIF
2452   0914 A2 0E       				.dw			LTHIGH					; String src address
2453   0916 02 3C       				.dw			$3C02						; Screen dst address
2454   0918             
2455   0918             				;; Draw high score
2456   0918 0A          				.db			$0A							; Command A = BCD @ loc
2457   0919 02 20       				.dw			HSCORE					; bc = 2006 = high score
2458   091B~            #IF OLDINT
2459   091B~            				.dw			TXTBUF					; Buffer loc
2460   091B             #ENDIF
2461   091B 25 3E       				.dw			$3E25						; Screen loc
2462   091D             
2463   091D             				;; Draw player score
2464   091D 0A          				.db			$0A							; Command A = BCD @ loc
2465   091E 12 20       				.dw			PSCORE					; bc = 202b = score
2466   0920~            #IF OLDINT
2467   0920~            				.dw			TXTBUF					; Buffer loc
2468   0920             #ENDIF
2469   0920             #IF SC3DIG
2470   0920 36 3E       				.dw			$3E36						; Screen loc
2471   0922~            #ELSE
2472   0922~            				.dw			$3E35						; Screen loc
2473   0922             #ENDIF
2474   0922             
2475   0922             				;; Delay
2476   0922 02          				.db			$02							; Command 2 = arg to 2010
2477   0923 0F          				.db			$0F							; arg
2478   0924             
2479   0924             				;; GAME OVER
2480   0924             L094E:
2481   0924 04          				.db			$04							; Command 4 = String
2482   0925 09          				.db			$09							; Length
2483   0926 99 0E       				.dw			LTOVER					; String src address
2484   0928 0B 2C       				.dw			$2C0B						; Screen dst address
2485   092A             
2486   092A             				;; Delay timer
2487   092A 01          				.db			$01							; Command 1 = arg to 2011
2488   092B 1E          				.db			$1E							; arg
2489   092C             
2490   092C 00          				.db			$00							; Command 0 = Wait for $2011 timer
2491   092D             
2492   092D             				;; Clear GAME OVER
2493   092D 04          				.db			$04							; Command 4 = String
2494   092E 09          				.db			$09							; Length
2495   092F 8E 0E       				.dw			LTBLANK					; String src address
2496   0931 0B 2C       				.dw			$2C0B						; Screen dst address
2497   0933             
2498   0933             				;; Delay timer
2499   0933 01          				.db			$01							; Command 1 = arg to 2011
2500   0934 1E          				.db			$1E							; arg
2501   0935             
2502   0935 00          				.db			$00							; Command 0 = Wait for $2011 timer
2503   0936             
2504   0936             				;; Loop
2505   0936 06          				.db			$06							; Command 6 = Set ($2000)
2506   0937 24 09       				.dw			L094E						; Next command address
2507   0939             
2508   0939             				;; End of game
2509   0939             L0963:
2510   0939 03          				.db			$03							; Do end of game sequence
2511   093A             
2512   093A             				;; SEA WOLF
2513   093A 04          				.db			$04							; Command 4 = String
2514   093B 08          				.db			$08							; Length
2515   093C D3 0E       				.dw			LTSEA						; String src address (SEA WOLF)
2516   093E 0C 2C       				.dw			$2C0C						; Screen dst address
2517   0940             
2518   0940             				;; HIGH SCORE / YOUR SCORE
2519   0940 04          				.db			$04							; Command 4 = String
2520   0941 0A          				.db			$0A							; Length
2521   0942 A2 0E       				.dw			LTHIGH					; String src address (HIGH SCORE)
2522   0944 02 3C       				.dw			$3C02						; Screen dst address
2523   0946             
2524   0946             				;; Draw high score
2525   0946 0A          				.db			$0A							; Command A = BCD @ loc
2526   0947 02 20       				.dw			HSCORE					; bc = 2006 = high score
2527   0949~            #IF OLDINT
2528   0949~            				.dw			TXTBUF					; Buffer loc
2529   0949             #ENDIF
2530   0949 25 3E       				.dw			$3E25						; Screen loc
2531   094B             
2532   094B             				;; INSERT COIN / PUSH BUTTOM
2533   094B 09          				.db			$09							; Commnad 9
2534   094C 06 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2535   094E 33 38       				.dw			$3833						; Location
2536   0950 BD 0E       				.dw			LTCOIN					; "Insert Coin"
2537   0952 C8 0E       				.dw			LTPUSH					; "Push Button"
2538   0954             
2539   0954             				;; Delay timer
2540   0954 01          				.db			$01							; Command 1 = arg to 2011
2541   0955 5A          				.db			$5A							; arg
2542   0956             
2543   0956 00          				.db			$00							; Command 0 = Wait for $2011 timer
2544   0957             
2545   0957             				;; Launch ship in attract
2546   0957 08          				.db			$08							; Command 8 (Data backwards to loc)
2547   0958 09          				.db			$09							; Count
2548   0959 60 20       				.dw			$2060						; de = $2060
2549   095B C1 0D       				.dw			SHIP3						; $0DBE = Ship address
2550   095D 20          				.db			$20							; $20 = ???
2551   095E 15          				.db			$15							; $15 = Y Pos
2552   095F 00          				.db			$00							; $00 = Delta y
2553   0960 E0          				.db			$E0							; $E0 = Y flags
2554   0961 00          				.db			$00							; $00 = X pos
2555   0962 01          				.db			$01							; $01 = Delta x
2556   0963 C4          				.db			$C4							; $C4 = Flags (Ship 4, active)
2557   0964             
2558   0964             				;; Delay
2559   0964 01          				.db			$01							; Command 1 = arg to 2011
2560   0965 5A          				.db			$5A							; arg
2561   0966             
2562   0966 00          				.db			$00							; Command 0 = Wait for $2011 timer
2563   0967             
2564   0967             				;; Launch missile in attract
2565   0967 08          				.db			$08							; Command 8 (Data backwards to loc)
2566   0968 09          				.db			$09							; Count
2567   0969 EF 20       				.dw			$20EF						; de = $20EF
2568   096B 4B 0E       				.dw			SHOT0						; $0E75 = Shot address
2569   096D 9C          				.db			$9C							; $9C = ???
2570   096E E0          				.db			$E0							; $E0 = Y Pos
2571   096F FA          				.db			$FA							; $FA = Delta y
2572   0970 00          				.db			$00							; $00 = Y flags
2573   0971 A8          				.db			$A8							; $A8 = X pos
2574   0972 00          				.db			$00							; $00 = Delta X
2575   0973 C0          				.db			$C0							; $C0 = Flags (Non-ship, active)
2576   0974             
2577   0974             				;; Delay
2578   0974 01          				.db			$01							; Command 1 = arg to 2011
2579   0975 B4          				.db			$B4							; arg
2580   0976             
2581   0976 00          				.db			$00							; Command 0 = Wait for $2011 timer
2582   0977             
2583   0977             				;; Loop
2584   0977 06          				.db			$06							; Command 6 = Set ($2000)
2585   0978 39 09       				.dw			L0963						; Next command address
2586   097A             
2587   097A             
2588   097A             				;; Game play control loop
2589   097A             L09A6:
2590   097A             				;; Delay timer
2591   097A 01          				.db			$01							; Command 1 = arg to 2011
2592   097B 0F          				.db			$0F							; arg
2593   097C             
2594   097C 00          				.db			$00							; Command 0 = Wait for $2011 timer
2595   097D             
2596   097D 03          				.db			$03							; Command 3 = End game
2597   097E             
2598   097E             				;; TIME / SCORE
2599   097E 04          				.db			$04							; Command 4 = String
2600   097F 09          				.db			$09							; Length
2601   0980 FB 0E       				.dw			LTTIME					; String src address (TIME/SCORE)
2602   0982 0E 3C       				.dw			$3C0E						; Screen dst address
2603   0984             
2604   0984 07          				.db			$07							; Command 7 = Store a to bc
2605   0985 28          				.db			$28							; a
2606   0986 22 20       				.dw			$2022						; bc
2607   0988             
2608   0988 07          				.db			$07							; Command 7 = Store a to bc
2609   0989 0A          				.db			$0A							; a
2610   098A 21 20       				.dw			$2021						; bc
2611   098C             
2612   098C~            #IF OLDINT
2613   098C~            				.db			$0B							; Command B = Write $2029
2614   098C             #ELSE
2615   098C 05          				.db			$05							; Command 5 = Write $2029
2616   098D             #ENDIF
2617   098D             
2618   098D 00          				.db			$00							; Command 0 = Wait for $2011 timer
2619   098E             
2620   098E             
2621   098E             				;; Explosion lamp tables!
2622   098E             L09BA:
2623   098E 48 44 42 41 				.db			$48, $44, $42, $41, $88, $84, $82, $81		; 
2623   0992 88 84 82 81 
2624   0996             L09C2:
2625   0996 18 14 12 11 				.db			$18, $14, $12, $11, $28, $24, $22, $21		; 
2625   099A 28 24 22 21 
2626   099E             
2627   099E             
2628   099E             				;; Jump table for IN1 changes (8 entries)
2629   099E             TBLIN1:
2630   099E CA 08       				.dw			HCOIN						; 0 = 08C8 = Coin
2631   09A0 E4 08       				.dw			HPUSH						; 1 = 08F8 = Start
2632   09A2 C0 08       				.dw			HRET						; 2 = 08C7 = (ret) Coinage
2633   09A4 C0 08       				.dw			HRET						; 3 = 08C7 = (ret) Coinage
2634   09A6 23 08       				.dw			HERASE					; 4 = 084D = Erase highs
2635   09A8 C0 08       				.dw			HRET						; 5 = 08C7 = (ret) Extended time
2636   09AA C0 08       				.dw			HRET						; 6 = 08C7 = (ret) Extended time
2637   09AC C0 08       				.dw			HRET						; 7 = 08C7 = (ret) Extended time
2638   09AE             
2639   09AE             				;; Jump table for IN0 changes (8 entries)
2640   09AE             TBLIN0:
2641   09AE C0 08       				.dw			HRET						; 0 = 08C7 = (ret) Turret
2642   09B0 C0 08       				.dw			HRET						; 1 = 08C7 = (ret) Turret
2643   09B2 C0 08       				.dw			HRET						; 2 = 08C7 = (ret) Turret
2644   09B4 C0 08       				.dw			HRET						; 3 = 08C7 = (ret) Turret
2645   09B6 C0 08       				.dw			HRET						; 4 = 08C7 = (ret) Turret
2646   09B8 7D 05       				.dw			HFIRE						; 5 = 057B = Fire button
2647   09BA C0 08       				.dw			HRET						; 6 = 08C7 = (ret) Time
2648   09BC C0 08       				.dw			HRET						; 7 = 08C7 = (ret) Time
2649   09BE             
2650   09BE             				;; Jump table for $047F (0 entry not used)
2651   09BE             				;; Used for attract mode sequence
2652   09BE             TBLJMP:
2653   09BE 52 0B       				.dw			JTBL1						; 1 = 0B7C = Arg to 2011
2654   09C0 48 0B       				.dw			JTBL2						; 2 = 0B72 = Arg to 2010
2655   09C2 56 08       				.dw			JTBL3						; 3 = 08A2 = End of game + reset
2656   09C4 F8 0A       				.dw			JTBL4						; 4 = 0B22 = String
2657   09C6~            #IF OLDINT
2658   09C6~            				.dw			JTBL5						; 5 = 0AED = (Not used)
2659   09C6             #ELSE
2660   09C6 43 08       				.dw			JTBLB						; 5 = 086D = LSBs of $2003 to $2029 (?)
2661   09C8             #ENDIF
2662   09C8 5C 0B       				.dw			JTBL6						; 6 = 0B86 = (de) -> $2000 
2663   09CA CF 0A       				.dw			JTBL7						; 7 = 0AE1 = val -> addr
2664   09CC 8D 0A       				.dw			JTBL8						; 8 = 0A9F = Arg to loc
2665   09CE AA 0A       				.dw			JTBL9						; 9 = 0ABC = Select String
2666   09D0 25 0A       				.dw			JTBLA						; A = 0A53 = BCD @ location
2667   09D2~            #IF OLDINT
2668   09D2~            				.dw			JTBLB						; B = 086D = LSBs of $2003 to $2029 (?)
2669   09D2             #ENDIF
2670   09D2             
2671   09D2             				;; e&$07 -> c,  de = de >> 3 + $2400,
2672   09D2             				;; Get address for shifted data
2673   09D2             L0A00:
2674   09D2 7B          				ld			a,e							; Mask e
2675   09D3 E6 07       				and			$07
2676   09D5 4F          				ld			c,a							; Stash in c
2677   09D6             
2678   09D6             				;; de>>3
2679   09D6 06 03       				ld			b,$03						; Loop counter
2680   09D8             L0A06:
2681   09D8 AF          				xor			a								; CLC
2682   09D9 7A          				ld			a,d							; LSB of d to carry
2683   09DA 1F          				rra
2684   09DB 57          				ld			d,a
2685   09DC 7B          				ld			a,e
2686   09DD 1F          				rra
2687   09DE 5F          				ld			e,a
2688   09DF 05          				dec			b
2689   09E0 C2 D8 09    				jp			nz,L0A06				; Loop
2690   09E3             
2691   09E3 7A          				ld			a,d
2692   09E4 C6 24       				add			a,$24
2693   09E6 57          				ld			d,a
2694   09E7 C9          				ret
2695   09E8             
2696   09E8             
2697   09E8             				;; a = loop counter
2698   09E8             				;; Copy a bytes from (hl) to (bc)
2699   09E8             				;; OR   a bytes from (hl) to 
2700   09E8             L0A16:
2701   09E8 F5          				push		af							; Store count
2702   09E9 7E          				ld			a,(hl)					; Get value
2703   09EA 02          				ld			(bc),a					; Store value
2704   09EB 03          				inc			bc
2705   09EC EB          				ex			de,hl
2706   09ED B6          				or			(hl)
2707   09EE 23          				inc			hl
2708   09EF 12          				ld			(de),a
2709   09F0 F1          				pop			af							; Restore count
2710   09F1 E5          				push		hl
2711   09F2 21 20 00    				ld			hl,RINC					; Row increment
2712   09F5 19          				add			hl,de						; hl = de+$0020
2713   09F6 D1          				pop			de							; de = old hl
2714   09F7 3D          				dec			a
2715   09F8 C2 E8 09    				jp			nz,L0A16				; loop
2716   09FB C9          				ret
2717   09FC             
2718   09FC             
2719   09FC             				;; Draw b x c block from de to screen at hl
2720   09FC             L0A2A:
2721   09FC C5          				push		bc
2722   09FD E5          				push		hl
2723   09FE             L0A2C:
2724   09FE 1A          				ld			a,(de)
2725   09FF 13          				inc			de
2726   0A00 77          				ld			(hl),a
2727   0A01 23          				inc			hl
2728   0A02 0D          				dec			c
2729   0A03 C2 FE 09    				jp			nz,L0A2C				; Loop for col
2730   0A06             
2731   0A06 E1          				pop			hl
2732   0A07 01 20 00    				ld			bc,RINC					; Row increment
2733   0A0A 09          				add			hl,bc
2734   0A0B C1          				pop			bc
2735   0A0C 05          				dec			b
2736   0A0D C2 FC 09    				jp			nz,L0A2A				; Loop for row
2737   0A10 C9          				ret
2738   0A11             
2739   0A11             
2740   0A11             				;; Clear (hl - hl+c-1)  b times with row offsets
2741   0A11             L0A3F:
2742   0A11 AF          				xor			a
2743   0A12             L0A40:
2744   0A12 C5          				push		bc
2745   0A13 E5          				push		hl
2746   0A14             L0A42:
2747   0A14 77          				ld			(hl),a
2748   0A15 23          				inc			hl
2749   0A16 0D          				dec			c
2750   0A17 C2 14 0A    				jp			nz,L0A42				; Loop for col
2751   0A1A             
2752   0A1A E1          				pop			hl
2753   0A1B 01 20 00    				ld			bc,RINC					; Row increment
2754   0A1E 09          				add			hl,bc
2755   0A1F C1          				pop			bc
2756   0A20 05          				dec			b
2757   0A21 C2 12 0A    				jp			nz,L0A40				; Loop for row
2758   0A24             
2759   0A24 C9          				ret
2760   0A25             
2761   0A25             
2762   0A25             				;; $09E8 Entry A
2763   0A25             				;; Print high score / player score
2764   0A25             JTBLA:													; $0A53
2765   0A25 EB          				ex			de,hl
2766   0A26             
2767   0A26~            #IF GETMAC
2768   0A26~            				call		GETBC
2769   0A26             #ELSE
2770   0A26 4E          				ld			c,(hl)					; Read bc (address of score)
2771   0A27 23          				inc			hl
2772   0A28 46          				ld			b,(hl)
2773   0A29 23          				inc			hl
2774   0A2A             #ENDIF
2775   0A2A             
2776   0A2A~            #IF OLDINT
2777   0A2A~            				ld			e,(hl)					; Read de
2778   0A2A~            				inc			hl
2779   0A2A~            				ld			d,(hl)
2780   0A2A~            				dec			hl							; Back up to use de again
2781   0A2A             #ELSE
2782   0A2A 11 E8 21    				ld			de,TXTBUF				; This was a constant
2783   0A2D D5          				push		de							; Store TXTBUF
2784   0A2E             #ENDIF
2785   0A2E             
2786   0A2E             #IF SC3DIG
2787   0A2E CD 84 0A    				call		BCD300					; 3 nybble BCD+00 to string
2788   0A31 CD CA 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2789   0A34~            #ELSE
2790   0A34~            				call		L0A82						; Draw BCD from bc at buffer at de
2791   0A34~            				ex			de,hl						; Last address now in hl
2792   0A34~            				call		L0A7A						; Replace space with zero
2793   0A34~            				inc			hl
2794   0A34~            				ex			de,hl						; Last address now in de
2795   0A34~            				ld			a,$30
2796   0A34~            				ld			(de),a					; Append zero
2797   0A34~            				inc			de
2798   0A34~            				ld			(de),a					; Append zero
2799   0A34~            
2800   0A34~            				;; #ENDIF
2801   0A34~            				;; #IF OLDINT*(1-SC3DIG)
2802   0A34~            #IF OLDINT
2803   0A34~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
2804   0A34~            				push		de
2805   0A34~            #ENDIF
2806   0A34~            
2807   0A34~            				;; #IF (1-SC3DIG)
2808   0A34~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
2809   0A34             #ENDIF
2810   0A34             
2811   0A34 22 00 20    				ld			(PRGPTR),hl			; Next command 
2812   0A37 E1          				pop			hl
2813   0A38             #IF SC3DIG
2814   0A38 3E 05       				ld			a,$05						; Length for 5 digit
2815   0A3A~            #ELSE
2816   0A3A~            				ld			a,$04						; Length
2817   0A3A             #ENDIF
2818   0A3A C3 06 0B    				jp			L0B30						; Draw string hl @ de, length a
2819   0A3D             
2820   0A3D             
2821   0A3D             #IF SC3DIG
2822   0A3D             				;; 3 digit BCD from bc to de
2823   0A3D             				;; #?? -> #00
2824   0A3D             				;; 0#? -> _#0
2825   0A3D             				;; 00# -> __#
2826   0A3D             				;; 000 -> ___
2827   0A3D             BCD3:
2828   0A3D 03          				inc			bc							; To high byte
2829   0A3E 0A          				ld			a,(bc)
2830   0A3F E6 0F       				and			$0F
2831   0A41 C2 52 0A    				jp			nz,BCD3NZ
2832   0A44             
2833   0A44 3E 40       				ld			a,$40						; Space
2834   0A46 12          				ld			(de),a					; Store
2835   0A47 13          				inc			de
2836   0A48 0B          				dec			bc							; To Low byte
2837   0A49             
2838   0A49 0A          				ld			a,(bc)
2839   0A4A E6 F0       				and			$F0
2840   0A4C C2 66 0A    				jp			nz,BCD2_0				; High byte non-zero
2841   0A4F C3 5D 0A    				jp			BCD2__					; High byte zero
2842   0A52             
2843   0A52             BCD3NZ:
2844   0A52 C6 30       				add			a,$30						; To ASCII
2845   0A54 12          				ld			(de),a					; Store digit
2846   0A55 13          				inc			de
2847   0A56 0B          				dec			bc							; To Low byte
2848   0A57             				;; Continue with 2 leading zeros
2849   0A57             
2850   0A57             				;; 2 digit BCD with 2 leading zeros
2851   0A57             BCD200:
2852   0A57 EB          				ex			de,hl
2853   0A58 36 30       				ld			(hl),$30				; 0
2854   0A5A C3 69 0A    				jp			BCD2_0X
2855   0A5D             
2856   0A5D             				;; 2 digit BCD with no leading zeros
2857   0A5D             BCD2__:
2858   0A5D EB          				ex			de,hl
2859   0A5E 36 40       				ld			(hl),$40				; Space
2860   0A60 23          				inc			hl
2861   0A61 36 40       				ld			(hl),$40				; Space
2862   0A63 C3 6F 0A    				jp			BCD2
2863   0A66             
2864   0A66             				;; 2 digit BCD with 1 leading zero
2865   0A66             BCD2_0:
2866   0A66 EB          				ex			de,hl
2867   0A67 36 40       				ld			(hl),$40				; Space
2868   0A69             BCD2_0X:
2869   0A69 23          				inc			hl
2870   0A6A 36 30       				ld			(hl),$30				; 0
2871   0A6C C3 6F 0A    				jp			BCD2
2872   0A6F             
2873   0A6F             				;; Common routine
2874   0A6F             BCD2:
2875   0A6F 2B          				dec			hl
2876   0A70 EB          				ex			de,hl						; Undo swap
2877   0A71             
2878   0A71             				;; Do MSB
2879   0A71 0A          				ld			a,(bc)					; Get BCD
2880   0A72 1F          				rra
2881   0A73 1F          				rra
2882   0A74 1F          				rra
2883   0A75 1F          				rra
2884   0A76 CD 7A 0A    				call		BCDDIG
2885   0A79             
2886   0A79             				;; Do LSB
2887   0A79 0A          				ld			a,(bc)					; Get BCD
2888   0A7A             BCDDIG:
2889   0A7A E6 0F       				and			$0F							; Mask high nybble
2890   0A7C CA 82 0A    				jp			z,BCDDONE
2891   0A7F             
2892   0A7F C6 30       				add			a,$30						; Decimal to ascii
2893   0A81 12          				ld			(de),a					; Store digit
2894   0A82             
2895   0A82             BCDDONE:
2896   0A82 13          				inc			de
2897   0A83 C9          				ret
2898   0A84             
2899   0A84             
2900   0A84             				;; 3 nybble BCD with trailing zeros
2901   0A84             BCD300:
2902   0A84 CD 3D 0A    				call		BCD3
2903   0A87             
2904   0A87             				;; Append zeros
2905   0A87             ADD00:
2906   0A87 3E 30       				ld			a,$30
2907   0A89 12          				ld			(de),a					; Append 0
2908   0A8A 13          				inc			de
2909   0A8B 12          				ld			(de),a					; Append 0
2910   0A8C C9          				ret
2911   0A8D             
2912   0A8D~            #ELSE
2913   0A8D~            				;; Replace space with a zero
2914   0A8D~            L0A7A:
2915   0A8D~            				dec			hl
2916   0A8D~            				ld			a,(hl)
2917   0A8D~            				and			$40
2918   0A8D~            				ret			z
2919   0A8D~            				ld			(hl),$30
2920   0A8D~            				ret
2921   0A8D~            
2922   0A8D~            				;; BCD at (bc) to string at (de)
2923   0A8D~            L0A82:
2924   0A8D~            				ld			a,(bc)
2925   0A8D~            				rra
2926   0A8D~            				rra
2927   0A8D~            				rra
2928   0A8D~            				rra
2929   0A8D~            				and			$0F							; Mask high nybble
2930   0A8D~            				jp			nz,L0A8E
2931   0A8D~            				ld			a,$10						; $40 -> blank
2932   0A8D~            L0A8E:
2933   0A8D~            				add			a,$30						; Decimal to ascii
2934   0A8D~            				ld			(de),a					; Store digit
2935   0A8D~            				inc			de							; Inc buffer pointer
2936   0A8D~            				ld			a,(bc)
2937   0A8D~            				and			$0F							; Mask low nybble
2938   0A8D~            				jp			nz,L0A9A
2939   0A8D~            				ld			a,$10						; $40 -> blank
2940   0A8D~            L0A9A:
2941   0A8D~            				add			a,$30						; Decimal to ascii
2942   0A8D~            				ld			(de),a					; Store digit
2943   0A8D~            				inc			de							; Inc buffer pointer
2944   0A8D~            				ret
2945   0A8D             #ENDIF
2946   0A8D             
2947   0A8D             
2948   0A8D             				;; $09E8 Entry 8 -- Copy data from sequence to address (backwards)
2949   0A8D             JTBL8:													; $0A9F
2950   0A8D EB          				ex			de,hl						; Sequence address back to hl
2951   0A8E 46          				ld			b,(hl)					; Get count
2952   0A8F 23          				inc			hl
2953   0A90 05          				dec			b
2954   0A91 05          				dec			b
2955   0A92 CD CA 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2  (address)
2956   0A95 4E          				ld			c,(hl)					; Read first byte
2957   0A96 23          				inc			hl
2958   0A97 7E          				ld			a,(hl)					; Read second byte
2959   0A98 23          				inc			hl
2960   0A99 12          				ld			(de),a					; Write first byte
2961   0A9A 1B          				dec			de
2962   0A9B 79          				ld			a,c
2963   0A9C 12          				ld			(de),a					; Write second byte
2964   0A9D 1B          				dec			de
2965   0A9E             
2966   0A9E             L0AB0:
2967   0A9E 7E          				ld			a,(hl)					; Loop for rest of count
2968   0A9F 23          				inc			hl
2969   0AA0 12          				ld			(de),a
2970   0AA1 1B          				dec			de
2971   0AA2 05          				dec			b
2972   0AA3 C2 9E 0A    				jp			nz,L0AB0
2973   0AA6 22 00 20    				ld			(PRGPTR),hl			; Next command
2974   0AA9 C9          				ret
2975   0AAA             
2976   0AAA             				;; $09E8 Entry 9 -- Draw INSERT COIN or PUSH BUTTON
2977   0AAA             JTBL9:													; $0ABC
2978   0AAA EB          				ex			de,hl
2979   0AAB CD CA 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2980   0AAE 1A          				ld			a,(de)
2981   0AAF CD CA 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2982   0AB2 D5          				push		de							; Screen loc to stack
2983   0AB3 CD CA 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2984   0AB6 D5          				push		de							; 1st string pointer to stack
2985   0AB7 CD CA 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2986   0ABA 22 00 20    				ld			(PRGPTR),hl			; Next command
2987   0ABD             
2988   0ABD EB          				ex			de,hl
2989   0ABE A7          				and			a
2990   0ABF CA C3 0A    				jp			z,L0AD5					; Draw first string?
2991   0AC2 E3          				ex			(sp),hl					; Swap 2nd pointer w/ 1st
2992   0AC3             
2993   0AC3             L0AD5:
2994   0AC3 E1          				pop			hl							; String pointer
2995   0AC4 D1          				pop			de							; Screen location
2996   0AC5 3E 0B       				ld			a,$0B						; Length
2997   0AC7 C3 06 0B    				jp			L0B30						; Draw string hl @ de, length a
2998   0ACA             
2999   0ACA             				;; (hl, hl+1) -> de, hl+=2
3000   0ACA             GETDE:
3001   0ACA             L0ADC:
3002   0ACA 5E          				ld			e,(hl)					; LSB from table
3003   0ACB 23          				inc			hl
3004   0ACC 56          				ld			d,(hl)					; MSB from table
3005   0ACD 23          				inc			hl
3006   0ACE C9          				ret
3007   0ACF             
3008   0ACF             				;; $9EA8 Entry 7 -- arg -> addr
3009   0ACF             JTBL7:													; $0AE1
3010   0ACF 1A          				ld			a,(de)					; Next entry
3011   0AD0 13          				inc			de
3012   0AD1 EB          				ex			de,hl
3013   0AD2             
3014   0AD2~            #IF GETMAC
3015   0AD2~            				call		GETBC
3016   0AD2             #ELSE
3017   0AD2 4E          				ld			c,(hl)					; Next entry
3018   0AD3 23          				inc			hl
3019   0AD4 46          				ld			b,(hl)					; Next entry
3020   0AD5 23          				inc			hl
3021   0AD6             #ENDIF
3022   0AD6             
3023   0AD6 22 00 20    				ld			(PRGPTR),hl			; Store command
3024   0AD9 02          				ld			(bc),a					; a -> (bc)
3025   0ADA C9          				ret
3026   0ADB             
3027   0ADB             
3028   0ADB~            #IF OLDINT
3029   0ADB~            				;; $09E8 Entry 5
3030   0ADB~            				;; This is apparently never called
3031   0ADB~            				;; Read from de table into b, c, a, e, d
3032   0ADB~            JTBL5:													; $0AED
3033   0ADB~            				ex			de,hl
3034   0ADB~            				ld			b,(hl)					; get b,c,a from (hl) [was (de)]
3035   0ADB~            				inc			hl
3036   0ADB~            				ld			c,(hl)
3037   0ADB~            				inc			hl
3038   0ADB~            				ld			a,(hl)
3039   0ADB~            				inc			hl
3040   0ADB~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
3041   0ADB~            				ld			(PRGPTR),hl			; Store command
3042   0ADB~            
3043   0ADB~            				ex			de,hl
3044   0ADB~            				ld			(hl),$DB				; ?? constant?
3045   0ADB~            				inc			hl
3046   0ADB~            				ld			(hl),c
3047   0ADB~            				inc			hl
3048   0ADB~            				ld			(hl),$C9				; ?? constant?
3049   0ADB~            				dec			hl
3050   0ADB~            				dec			hl
3051   0ADB~            				jp			(hl)						; Jump
3052   0ADB             #ENDIF
3053   0ADB             
3054   0ADB             				;; Deal with inputs (when stable)
3055   0ADB             L0B05:
3056   0ADB AE          				xor			(hl)						; XOR with stored value
3057   0ADC C8          				ret			z								; No changes
3058   0ADD             
3059   0ADD 4F          				ld			c,a							; Stash changed bits
3060   0ADE 06 01       				ld			b,$01						; Bit being checked
3061   0AE0             
3062   0AE0             L0B0A:
3063   0AE0 79          				ld			a,c							; Restore changed bits
3064   0AE1 0F          				rrca
3065   0AE2 DA EE 0A    				jp			c,L0B18					; Bit is high
3066   0AE5             
3067   0AE5 4F          				ld			c,a							; Stash changed bits
3068   0AE6 78          				ld			a,b							; Shift check bit
3069   0AE7 07          				rlca
3070   0AE8 47          				ld			b,a
3071   0AE9 13          				inc			de							; Advance jump table
3072   0AEA 13          				inc			de
3073   0AEB C3 E0 0A    				jp			L0B0A						; Loop
3074   0AEE             
3075   0AEE             L0B18:
3076   0AEE 78          				ld			a,b							; Bit found to a
3077   0AEF AE          				xor			(hl)						; Clear bit
3078   0AF0 77          				ld			(hl),a					; Store back
3079   0AF1 A0          				and			b								; Value of changed bit
3080   0AF2             
3081   0AF2             				;; Get jump address from table
3082   0AF2 EB          				ex			de,hl
3083   0AF3 4E          				ld			c,(hl)
3084   0AF4 23          				inc			hl
3085   0AF5 66          				ld			h,(hl)
3086   0AF6 69          				ld			l,c
3087   0AF7 E9          				jp			(hl)						; Jump to handler
3088   0AF8             
3089   0AF8             				;; $09E8 Entry 4 (Draw string)
3090   0AF8             JTBL4:													; $0E22
3091   0AF8 EB          				ex			de,hl						; 
3092   0AF9 7E          				ld			a,(hl)					; Length
3093   0AFA 23          				inc			hl
3094   0AFB CD CA 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
3095   0AFE D5          				push		de
3096   0AFF CD CA 0A    				call		GETDE						; (hl, hl,1) -> de, hl+=2
3097   0B02 22 00 20    				ld			(PRGPTR),hl			; Next command
3098   0B05 E1          				pop			hl							; String src address
3099   0B06             
3100   0B06             				;; Write string length a from hl to de
3101   0B06             L0B30:
3102   0B06 F5          				push		af
3103   0B07             L0B31:
3104   0B07 7E          				ld			a,(hl)					; Get byte
3105   0B08 23          				inc			hl
3106   0B09 D6 30       				sub			$30							; Ascii -> tbl
3107   0B0B F2 1F 0B    				jp			p,L0B49					; Jump if >=$30
3108   0B0E             
3109   0B0E             				;; Blank space = $30-a (?)
3110   0B0E 47          				ld			b,a
3111   0B0F             L0B39:
3112   0B0F 1C          				inc			e
3113   0B10 7B          				ld			a,e
3114   0B11 E6 1F       				and			$1F
3115   0B13 C2 18 0B    				jp			nz,L0B42				; No wrap
3116   0B16 14          				inc			d
3117   0B17 14          				inc			d
3118   0B18             L0B42:
3119   0B18 04          				inc			b
3120   0B19 C2 0F 0B    				jp			nz,L0B39				; Loop for space
3121   0B1C             
3122   0B1C C3 07 0B    				jp			L0B31						; Loop for chars
3123   0B1F             
3124   0B1F             				;; ASCII
3125   0B1F             L0B49:
3126   0B1F E5          				push		hl
3127   0B20 D5          				push		de
3128   0B21             				;; hl = CHARS + a * $0A
3129   0B21 21 65 0B    				ld			hl,CHARS				; Start of char table
3130   0B24 CA 2F 0B    				jp			z,L0B59					; (no need to add)
3131   0B27 01 0A 00    				ld			bc,$000A				; Add a*$0a
3132   0B2A             L0B54:
3133   0B2A 09          				add			hl,bc
3134   0B2B 3D          				dec			a
3135   0B2C C2 2A 0B    				jp			nz,L0B54
3136   0B2F             
3137   0B2F             L0B59:
3138   0B2F EB          				ex			de,hl
3139   0B30 01 20 00    				ld			bc,RINC					; Row increment
3140   0B33 3E 0A       				ld			a,$0A						; Loop $a times
3141   0B35             
3142   0B35             L0B5F:
3143   0B35 F5          				push		af
3144   0B36 1A          				ld			a,(de)					; Load byte
3145   0B37 13          				inc			de							; Inc index
3146   0B38 77          				ld			(hl),a					; Store to screen
3147   0B39 09          				add			hl,bc						; Next row
3148   0B3A F1          				pop			af
3149   0B3B 3D          				dec			a
3150   0B3C C2 35 0B    				jp			nz,L0B5F				; Loop for this char
3151   0B3F             
3152   0B3F D1          				pop			de
3153   0B40 E1          				pop			hl
3154   0B41 13          				inc			de							; Next screen loc
3155   0B42 F1          				pop			af
3156   0B43 3D          				dec			a
3157   0B44 C2 06 0B    				jp			nz,L0B30				; Next char
3158   0B47             
3159   0B47 C9          				ret
3160   0B48             
3161   0B48             				;; $09E8 Entry 2  (set TIMER1)
3162   0B48             JTBL2:													; $0B72
3163   0B48 EB          				ex			de,hl
3164   0B49 7E          				ld			a,(hl)					; Argument
3165   0B4A 23          				inc			hl
3166   0B4B 22 00 20    				ld			(PRGPTR),hl			; Next command
3167   0B4E 32 10 20    				ld			(TIMER1),a			; Store arg
3168   0B51 C9          				ret
3169   0B52             
3170   0B52             				;; $09E8 Entry 1 (set TIMER2)
3171   0B52             JTBL1:													; $0B7C
3172   0B52 EB          				ex			de,hl
3173   0B53 7E          				ld			a,(hl)					; Argument
3174   0B54 23          				inc			hl
3175   0B55 22 00 20    				ld			(PRGPTR),hl			; Next command
3176   0B58 32 11 20    				ld			(TIMER2),a			; Store arg
3177   0B5B C9          				ret
3178   0B5C             
3179   0B5C             				;; $09E8 Entry 6 (de) -> $2000
3180   0B5C             JTBL6:													; $0B86
3181   0B5C EB          				ex			de,hl
3182   0B5D 5E          				ld			e,(hl)
3183   0B5E 23          				inc			hl
3184   0B5F 56          				ld			d,(hl)
3185   0B60 EB          				ex			de,hl
3186   0B61 22 00 20    				ld			(PRGPTR),hl			; Store command
3187   0B64 C9          				ret
3188   0B65             
3189   0B65             				;; Character table
3190   0B65             CHARS:													; $0B8F
3191   0B65             #INCLUDE "swfont.asm"
0001+  0B65             	;;	.org	$0b8f 
0002+  0B65             
0003+  0B65             CHARTBL:
0004+  0B65 3C          	.db	$3c		; ....########.... $30
0005+  0B66 7E          	.db	$7e		; ..############.. 
0006+  0B67 66          	.db	$66		; ..####....####.. 
0007+  0B68 66          	.db	$66		; ..####....####.. 
0008+  0B69 66          	.db	$66		; ..####....####.. 
0009+  0B6A 66          	.db	$66		; ..####....####.. 
0010+  0B6B 66          	.db	$66		; ..####....####.. 
0011+  0B6C 66          	.db	$66		; ..####....####.. 
0012+  0B6D 7E          	.db	$7e		; ..############.. 
0013+  0B6E 3C          	.db	$3c		; ....########.... 
0014+  0B6F             
0015+  0B6F 18          	.db	$18		; ......####...... $31
0016+  0B70 1C          	.db	$1c		; ....######...... 
0017+  0B71 18          	.db	$18		; ......####...... 
0018+  0B72 18          	.db	$18		; ......####...... 
0019+  0B73 18          	.db	$18		; ......####...... 
0020+  0B74 18          	.db	$18		; ......####...... 
0021+  0B75 18          	.db	$18		; ......####...... 
0022+  0B76 18          	.db	$18		; ......####...... 
0023+  0B77 3C          	.db	$3c		; ....########.... 
0024+  0B78 3C          	.db	$3c		; ....########.... 
0025+  0B79             
0026+  0B79 3C          	.db	$3c		; ....########.... $32
0027+  0B7A 7E          	.db	$7e		; ..############.. 
0028+  0B7B 66          	.db	$66		; ..####....####.. 
0029+  0B7C 60          	.db	$60		; ..........####.. 
0030+  0B7D 7C          	.db	$7c		; ....##########.. 
0031+  0B7E 3E          	.db	$3e		; ..##########.... 
0032+  0B7F 06          	.db	$06		; ..####.......... 
0033+  0B80 06          	.db	$06		; ..####.......... 
0034+  0B81 7E          	.db	$7e		; ..############.. 
0035+  0B82 7E          	.db	$7e		; ..############.. 
0036+  0B83             
0037+  0B83 3C          	.db	$3c		; ....########.... $33
0038+  0B84 7E          	.db	$7e		; ..############.. 
0039+  0B85 66          	.db	$66		; ..####....####.. 
0040+  0B86 60          	.db	$60		; ..........####.. 
0041+  0B87 38          	.db	$38		; ......######.... 
0042+  0B88 78          	.db	$78		; ......########.. 
0043+  0B89 60          	.db	$60		; ..........####.. 
0044+  0B8A 66          	.db	$66		; ..####....####.. 
0045+  0B8B 7E          	.db	$7e		; ..############.. 
0046+  0B8C 3C          	.db	$3c		; ....########.... 
0047+  0B8D             
0048+  0B8D 66          	.db	$66		; ..####....####.. $34
0049+  0B8E 66          	.db	$66		; ..####....####.. 
0050+  0B8F 66          	.db	$66		; ..####....####.. 
0051+  0B90 66          	.db	$66		; ..####....####.. 
0052+  0B91 7E          	.db	$7e		; ..############.. 
0053+  0B92 7E          	.db	$7e		; ..############.. 
0054+  0B93 60          	.db	$60		; ..........####.. 
0055+  0B94 60          	.db	$60		; ..........####.. 
0056+  0B95 60          	.db	$60		; ..........####.. 
0057+  0B96 60          	.db	$60		; ..........####.. 
0058+  0B97             
0059+  0B97 3E          	.db	$3e		; ..##########.... $35
0060+  0B98 3E          	.db	$3e		; ..##########.... 
0061+  0B99 06          	.db	$06		; ..####.......... 
0062+  0B9A 06          	.db	$06		; ..####.......... 
0063+  0B9B 3E          	.db	$3e		; ..##########.... 
0064+  0B9C 7E          	.db	$7e		; ..############.. 
0065+  0B9D 60          	.db	$60		; ..........####.. 
0066+  0B9E 66          	.db	$66		; ..####....####.. 
0067+  0B9F 7E          	.db	$7e		; ..############.. 
0068+  0BA0 3C          	.db	$3c		; ....########.... 
0069+  0BA1             
0070+  0BA1 3C          	.db	$3c		; ....########.... $36
0071+  0BA2 3E          	.db	$3e		; ..##########.... 
0072+  0BA3 06          	.db	$06		; ..####.......... 
0073+  0BA4 06          	.db	$06		; ..####.......... 
0074+  0BA5 3E          	.db	$3e		; ..##########.... 
0075+  0BA6 7E          	.db	$7e		; ..############.. 
0076+  0BA7 66          	.db	$66		; ..####....####.. 
0077+  0BA8 66          	.db	$66		; ..####....####.. 
0078+  0BA9 7E          	.db	$7e		; ..############.. 
0079+  0BAA 3C          	.db	$3c		; ....########.... 
0080+  0BAB             
0081+  0BAB 7E          	.db	$7e		; ..############.. $37
0082+  0BAC 7E          	.db	$7e		; ..############.. 
0083+  0BAD 60          	.db	$60		; ..........####.. 
0084+  0BAE 70          	.db	$70		; ........######.. 
0085+  0BAF 30          	.db	$30		; ........####.... 
0086+  0BB0 38          	.db	$38		; ......######.... 
0087+  0BB1 18          	.db	$18		; ......####...... 
0088+  0BB2 1C          	.db	$1c		; ....######...... 
0089+  0BB3 0C          	.db	$0c		; ....####........ 
0090+  0BB4 0C          	.db	$0c		; ....####........ 
0091+  0BB5             
0092+  0BB5 3C          	.db	$3c		; ....########.... $38
0093+  0BB6 7E          	.db	$7e		; ..############.. 
0094+  0BB7 66          	.db	$66		; ..####....####.. 
0095+  0BB8 66          	.db	$66		; ..####....####.. 
0096+  0BB9 3C          	.db	$3c		; ....########.... 
0097+  0BBA 7E          	.db	$7e		; ..############.. 
0098+  0BBB 66          	.db	$66		; ..####....####.. 
0099+  0BBC 66          	.db	$66		; ..####....####.. 
0100+  0BBD 7E          	.db	$7e		; ..############.. 
0101+  0BBE 3C          	.db	$3c		; ....########.... 
0102+  0BBF             
0103+  0BBF 3C          	.db	$3c		; ....########.... $39
0104+  0BC0 7E          	.db	$7e		; ..############.. 
0105+  0BC1 66          	.db	$66		; ..####....####.. 
0106+  0BC2 66          	.db	$66		; ..####....####.. 
0107+  0BC3 7E          	.db	$7e		; ..############.. 
0108+  0BC4 7C          	.db	$7c		; ....##########.. 
0109+  0BC5 60          	.db	$60		; ..........####.. 
0110+  0BC6 60          	.db	$60		; ..........####.. 
0111+  0BC7 7C          	.db	$7c		; ....##########.. 
0112+  0BC8 3C          	.db	$3c		; ....########.... 
0113+  0BC9             
0114+  0BC9             WATER0: 
0115+  0BC9 0C          	.db	$0c		; ....####........ $3A
0116+  0BCA 93          	.db	$93		; ####....##....## 
0117+  0BCB 60          	.db	$60		; ..........####.. 
0118+  0BCC 00          	.db	$00		; ................ 
0119+  0BCD 00          	.db	$00		; ................ 
0120+  0BCE 00          	.db	$00		; ................ 
0121+  0BCF 00          	.db	$00		; ................ 
0122+  0BD0 00          	.db	$00		; ................ 
0123+  0BD1 00          	.db	$00		; ................ 
0124+  0BD2 00          	.db	$00		; ................ 
0125+  0BD3             
0126+  0BD3 60          	.db	$60		; ..........####.. $3B
0127+  0BD4 99          	.db	$99		; ##....####....## 
0128+  0BD5 06          	.db	$06		; ..####.......... 
0129+  0BD6 00          	.db	$00		; ................ 
0130+  0BD7 00          	.db	$00		; ................ 
0131+  0BD8 00          	.db	$00		; ................ 
0132+  0BD9 00          	.db	$00		; ................ 
0133+  0BDA 00          	.db	$00		; ................ 
0134+  0BDB 00          	.db	$00		; ................ 
0135+  0BDC 00          	.db	$00		; ................ 
0136+  0BDD             
0137+  0BDD 30          	.db	$30		; ........####.... $3C
0138+  0BDE CD          	.db	$cd		; ##..####....#### 
0139+  0BDF 02          	.db	$02		; ..##............ 
0140+  0BE0 00          	.db	$00		; ................ 
0141+  0BE1 00          	.db	$00		; ................ 
0142+  0BE2 00          	.db	$00		; ................ 
0143+  0BE3 00          	.db	$00		; ................ 
0144+  0BE4 00          	.db	$00		; ................ 
0145+  0BE5 00          	.db	$00		; ................ 
0146+  0BE6 00          	.db	$00		; ................ 
0147+  0BE7             
0148+  0BE7 02          	.db	$02		; ..##............ $3D
0149+  0BE8 C0          	.db	$c0		; ............#### 
0150+  0BE9 78          	.db	$78		; ......########.. 
0151+  0BEA E0          	.db	$e0		; ..........###### 
0152+  0BEB 80          	.db	$80		; ..............## 
0153+  0BEC F0          	.db	$f0		; ........######## 
0154+  0BED 01          	.db	$01		; ##.............. 
0155+  0BEE C0          	.db	$c0		; ............#### 
0156+  0BEF F0          	.db	$f0		; ........######## 
0157+  0BF0 7C          	.db	$7c		; ....##########.. 
0158+  0BF1             
0159+  0BF1 08          	.db	$08		; ......##........ $3E
0160+  0BF2 1C          	.db	$1c		; ....######...... 
0161+  0BF3 3E          	.db	$3e		; ..##########.... 
0162+  0BF4 7F          	.db	$7f		; ##############.. 
0163+  0BF5 FF          	.db	$ff		; ################ 
0164+  0BF6 FF          	.db	$ff		; ################ 
0165+  0BF7 BF          	.db	$bf		; ############..## 
0166+  0BF8 1F          	.db	$1f		; ##########...... 
0167+  0BF9 02          	.db	$02		; ..##............ 
0168+  0BFA 40          	.db	$40		; ............##.. 
0169+  0BFB             
0170+  0BFB 02          	.db	$02		; ..##............ $3F
0171+  0BFC 80          	.db	$80		; ..............## 
0172+  0BFD 78          	.db	$78		; ......########.. 
0173+  0BFE 1E          	.db	$1e		; ..########...... 
0174+  0BFF 07          	.db	$07		; ######.......... 
0175+  0C00 01          	.db	$01		; ##.............. 
0176+  0C01 7C          	.db	$7c		; ....##########.. 
0177+  0C02 F8          	.db	$f8		; ......########## 
0178+  0C03 0C          	.db	$0c		; ....####........ 
0179+  0C04 10          	.db	$10		; ........##...... 
0180+  0C05             
0181+  0C05 00          	.db	$00		; ................ $40
0182+  0C06 00          	.db	$00		; ..######..###### 
0183+  0C07 00          	.db	$00		; ....####..##..## 
0184+  0C08 00          	.db	$00		; ..##......##..## 
0185+  0C09 00          	.db	$00		; ..######..###### 
0186+  0C0A 00          	.db	$00		; ................ 
0187+  0C0B 00          	.db	$00		; ..######..##..## 
0188+  0C0C 00          	.db	$00		; ....####..###### 
0189+  0C0D 00          	.db	$00		; ..##..........## 
0190+  0C0E 00          	.db	$00		; ..######......## 
0191+  0C0F             
0192+  0C0F 18          	.db	$18		; ......####...... $41
0193+  0C10 3C          	.db	$3c		; ....########.... 
0194+  0C11 7E          	.db	$7e		; ..############.. 
0195+  0C12 66          	.db	$66		; ..####....####.. 
0196+  0C13 66          	.db	$66		; ..####....####.. 
0197+  0C14 66          	.db	$66		; ..####....####.. 
0198+  0C15 7E          	.db	$7e		; ..############.. 
0199+  0C16 7E          	.db	$7e		; ..############.. 
0200+  0C17 66          	.db	$66		; ..####....####.. 
0201+  0C18 66          	.db	$66		; ..####....####.. 
0202+  0C19             
0203+  0C19 3E          	.db	$3e		; ..##########.... $42
0204+  0C1A 7E          	.db	$7e		; ..############.. 
0205+  0C1B 66          	.db	$66		; ..####....####.. 
0206+  0C1C 66          	.db	$66		; ..####....####.. 
0207+  0C1D 3E          	.db	$3e		; ..##########.... 
0208+  0C1E 7E          	.db	$7e		; ..############.. 
0209+  0C1F 66          	.db	$66		; ..####....####.. 
0210+  0C20 66          	.db	$66		; ..####....####.. 
0211+  0C21 7E          	.db	$7e		; ..############.. 
0212+  0C22 3E          	.db	$3e		; ..##########.... 
0213+  0C23             
0214+  0C23 3C          	.db	$3c		; ....########.... $43
0215+  0C24 7E          	.db	$7e		; ..############.. 
0216+  0C25 66          	.db	$66		; ..####....####.. 
0217+  0C26 06          	.db	$06		; ..####.......... 
0218+  0C27 06          	.db	$06		; ..####.......... 
0219+  0C28 06          	.db	$06		; ..####.......... 
0220+  0C29 06          	.db	$06		; ..####.......... 
0221+  0C2A 66          	.db	$66		; ..####....####.. 
0222+  0C2B 7E          	.db	$7e		; ..############.. 
0223+  0C2C 3C          	.db	$3c		; ....########.... 
0224+  0C2D             
0225+  0C2D 3E          	.db	$3e		; ..##########.... $44
0226+  0C2E 7E          	.db	$7e		; ..############.. 
0227+  0C2F 66          	.db	$66		; ..####....####.. 
0228+  0C30 66          	.db	$66		; ..####....####.. 
0229+  0C31 66          	.db	$66		; ..####....####.. 
0230+  0C32 66          	.db	$66		; ..####....####.. 
0231+  0C33 66          	.db	$66		; ..####....####.. 
0232+  0C34 66          	.db	$66		; ..####....####.. 
0233+  0C35 7E          	.db	$7e		; ..############.. 
0234+  0C36 3E          	.db	$3e		; ..##########.... 
0235+  0C37             
0236+  0C37 7E          	.db	$7e		; ..############.. $45
0237+  0C38 7E          	.db	$7e		; ..############.. 
0238+  0C39 06          	.db	$06		; ..####.......... 
0239+  0C3A 06          	.db	$06		; ..####.......... 
0240+  0C3B 3E          	.db	$3e		; ..##########.... 
0241+  0C3C 3E          	.db	$3e		; ..##########.... 
0242+  0C3D 06          	.db	$06		; ..####.......... 
0243+  0C3E 06          	.db	$06		; ..####.......... 
0244+  0C3F 7E          	.db	$7e		; ..############.. 
0245+  0C40 7E          	.db	$7e		; ..############.. 
0246+  0C41             
0247+  0C41 7E          	.db	$7e		; ..############.. $46
0248+  0C42 7E          	.db	$7e		; ..############.. 
0249+  0C43 06          	.db	$06		; ..####.......... 
0250+  0C44 06          	.db	$06		; ..####.......... 
0251+  0C45 3E          	.db	$3e		; ..##########.... 
0252+  0C46 3E          	.db	$3e		; ..##########.... 
0253+  0C47 06          	.db	$06		; ..####.......... 
0254+  0C48 06          	.db	$06		; ..####.......... 
0255+  0C49 06          	.db	$06		; ..####.......... 
0256+  0C4A 06          	.db	$06		; ..####.......... 
0257+  0C4B             
0258+  0C4B 3C          	.db	$3c		; ....########.... $47
0259+  0C4C 7E          	.db	$7e		; ..############.. 
0260+  0C4D 66          	.db	$66		; ..####....####.. 
0261+  0C4E 06          	.db	$06		; ..####.......... 
0262+  0C4F 06          	.db	$06		; ..####.......... 
0263+  0C50 76          	.db	$76		; ..####..######.. 
0264+  0C51 76          	.db	$76		; ..####..######.. 
0265+  0C52 66          	.db	$66		; ..####....####.. 
0266+  0C53 7E          	.db	$7e		; ..############.. 
0267+  0C54 3C          	.db	$3c		; ....########.... 
0268+  0C55             
0269+  0C55 66          	.db	$66		; ..####....####.. $48
0270+  0C56 66          	.db	$66		; ..####....####.. 
0271+  0C57 66          	.db	$66		; ..####....####.. 
0272+  0C58 66          	.db	$66		; ..####....####.. 
0273+  0C59 7E          	.db	$7e		; ..############.. 
0274+  0C5A 7E          	.db	$7e		; ..############.. 
0275+  0C5B 66          	.db	$66		; ..####....####.. 
0276+  0C5C 66          	.db	$66		; ..####....####.. 
0277+  0C5D 66          	.db	$66		; ..####....####.. 
0278+  0C5E 66          	.db	$66		; ..####....####.. 
0279+  0C5F             
0280+  0C5F 3C          	.db	$3c		; ....########.... $49
0281+  0C60 3C          	.db	$3c		; ....########.... 
0282+  0C61 18          	.db	$18		; ......####...... 
0283+  0C62 18          	.db	$18		; ......####...... 
0284+  0C63 18          	.db	$18		; ......####...... 
0285+  0C64 18          	.db	$18		; ......####...... 
0286+  0C65 18          	.db	$18		; ......####...... 
0287+  0C66 18          	.db	$18		; ......####...... 
0288+  0C67 3C          	.db	$3c		; ....########.... 
0289+  0C68 3C          	.db	$3c		; ....########.... 
0290+  0C69             
0291+  0C69 60          	.db	$60		; ..........####.. $4A
0292+  0C6A 60          	.db	$60		; ..........####.. 
0293+  0C6B 60          	.db	$60		; ..........####.. 
0294+  0C6C 60          	.db	$60		; ..........####.. 
0295+  0C6D 60          	.db	$60		; ..........####.. 
0296+  0C6E 60          	.db	$60		; ..........####.. 
0297+  0C6F 60          	.db	$60		; ..........####.. 
0298+  0C70 66          	.db	$66		; ..####....####.. 
0299+  0C71 7E          	.db	$7e		; ..############.. 
0300+  0C72 3C          	.db	$3c		; ....########.... 
0301+  0C73             
0302+  0C73 66          	.db	$66		; ..####....####.. $4B
0303+  0C74 66          	.db	$66		; ..####....####.. 
0304+  0C75 76          	.db	$76		; ..####..######.. 
0305+  0C76 3E          	.db	$3e		; ..##########.... 
0306+  0C77 1E          	.db	$1e		; ..########...... 
0307+  0C78 1E          	.db	$1e		; ..########...... 
0308+  0C79 3E          	.db	$3e		; ..##########.... 
0309+  0C7A 76          	.db	$76		; ..####..######.. 
0310+  0C7B 66          	.db	$66		; ..####....####.. 
0311+  0C7C 66          	.db	$66		; ..####....####.. 
0312+  0C7D             
0313+  0C7D 06          	.db	$06		; ..####.......... $4C
0314+  0C7E 06          	.db	$06		; ..####.......... 
0315+  0C7F 06          	.db	$06		; ..####.......... 
0316+  0C80 06          	.db	$06		; ..####.......... 
0317+  0C81 06          	.db	$06		; ..####.......... 
0318+  0C82 06          	.db	$06		; ..####.......... 
0319+  0C83 06          	.db	$06		; ..####.......... 
0320+  0C84 06          	.db	$06		; ..####.......... 
0321+  0C85 7E          	.db	$7e		; ..############.. 
0322+  0C86 7E          	.db	$7e		; ..############.. 
0323+  0C87             
0324+  0C87 C3          	.db	$c3		; ####........#### $4D
0325+  0C88 C3          	.db	$c3		; ####........#### 
0326+  0C89 E7          	.db	$e7		; ######....###### 
0327+  0C8A E7          	.db	$e7		; ######....###### 
0328+  0C8B FF          	.db	$ff		; ################ 
0329+  0C8C FF          	.db	$ff		; ################ 
0330+  0C8D DB          	.db	$db		; ####..####..#### 
0331+  0C8E C3          	.db	$c3		; ####........#### 
0332+  0C8F C3          	.db	$c3		; ####........#### 
0333+  0C90 C3          	.db	$c3		; ####........#### 
0334+  0C91             
0335+  0C91 66          	.db	$66		; ..####....####.. $4E
0336+  0C92 66          	.db	$66		; ..####....####.. 
0337+  0C93 6E          	.db	$6e		; ..######..####.. 
0338+  0C94 6E          	.db	$6e		; ..######..####.. 
0339+  0C95 7E          	.db	$7e		; ..############.. 
0340+  0C96 7E          	.db	$7e		; ..############.. 
0341+  0C97 76          	.db	$76		; ..####..######.. 
0342+  0C98 76          	.db	$76		; ..####..######.. 
0343+  0C99 66          	.db	$66		; ..####....####.. 
0344+  0C9A 66          	.db	$66		; ..####....####.. 
0345+  0C9B             
0346+  0C9B 3C          	.db	$3c		; ....########.... $4F
0347+  0C9C 7E          	.db	$7e		; ..############.. 
0348+  0C9D 66          	.db	$66		; ..####....####.. 
0349+  0C9E 66          	.db	$66		; ..####....####.. 
0350+  0C9F 66          	.db	$66		; ..####....####.. 
0351+  0CA0 66          	.db	$66		; ..####....####.. 
0352+  0CA1 66          	.db	$66		; ..####....####.. 
0353+  0CA2 66          	.db	$66		; ..####....####.. 
0354+  0CA3 7E          	.db	$7e		; ..############.. 
0355+  0CA4 3C          	.db	$3c		; ....########.... 
0356+  0CA5             
0357+  0CA5 3E          	.db	$3e		; ..##########.... $50
0358+  0CA6 7E          	.db	$7e		; ..############.. 
0359+  0CA7 66          	.db	$66		; ..####....####.. 
0360+  0CA8 66          	.db	$66		; ..####....####.. 
0361+  0CA9 7E          	.db	$7e		; ..############.. 
0362+  0CAA 3E          	.db	$3e		; ..##########.... 
0363+  0CAB 06          	.db	$06		; ..####.......... 
0364+  0CAC 06          	.db	$06		; ..####.......... 
0365+  0CAD 06          	.db	$06		; ..####.......... 
0366+  0CAE 06          	.db	$06		; ..####.......... 
0367+  0CAF             
0368+  0CAF~            #IF SW2024
0369+  0CAF~            	.db	$00		; ................ $51
0370+  0CAF~            	.db	$00		; ................ 
0371+  0CAF~            	.db	$01		; ##.............. 
0372+  0CAF~            	.db	$01		; ##.............. 
0373+  0CAF~            	.db	$84		; ....##........## 
0374+  0CAF~            	.db	$ca		; ..##..##....#### 
0375+  0CAF~            	.db	$a8		; ......##..##..## 
0376+  0CAF~            	.db	$e4		; ....##....###### 
0377+  0CAF~            	.db	$82		; ..##..........## 
0378+  0CAF~            	.db	$8e		; ..######......##
0379+  0CAF             #ELSE
0380+  0CAF 3C          	.db	$3c		; ....########.... $51
0381+  0CB0 7E          	.db	$7e		; ..############.. 
0382+  0CB1 66          	.db	$66		; ..####....####.. 
0383+  0CB2 66          	.db	$66		; ..####....####.. 
0384+  0CB3 66          	.db	$66		; ..####....####.. 
0385+  0CB4 66          	.db	$66		; ..####....####.. 
0386+  0CB5 66          	.db	$66		; ..####....####.. 
0387+  0CB6 66          	.db	$66		; ..####....####.. 
0388+  0CB7 7E          	.db	$7e		; ..############.. 
0389+  0CB8 5C          	.db	$5c		; ....######..##.. 
0390+  0CB9             #ENDIF
0391+  0CB9             
0392+  0CB9 3E          	.db	$3e		; ..##########.... $52
0393+  0CBA 7E          	.db	$7e		; ..############.. 
0394+  0CBB 66          	.db	$66		; ..####....####.. 
0395+  0CBC 66          	.db	$66		; ..####....####.. 
0396+  0CBD 7E          	.db	$7e		; ..############.. 
0397+  0CBE 3E          	.db	$3e		; ..##########.... 
0398+  0CBF 76          	.db	$76		; ..####..######.. 
0399+  0CC0 66          	.db	$66		; ..####....####.. 
0400+  0CC1 66          	.db	$66		; ..####....####.. 
0401+  0CC2 66          	.db	$66		; ..####....####.. 
0402+  0CC3             
0403+  0CC3 3C          	.db	$3c		; ....########.... $53
0404+  0CC4 7E          	.db	$7e		; ..############.. 
0405+  0CC5 66          	.db	$66		; ..####....####.. 
0406+  0CC6 06          	.db	$06		; ..####.......... 
0407+  0CC7 3E          	.db	$3e		; ..##########.... 
0408+  0CC8 7C          	.db	$7c		; ....##########.. 
0409+  0CC9 60          	.db	$60		; ..........####.. 
0410+  0CCA 66          	.db	$66		; ..####....####.. 
0411+  0CCB 7E          	.db	$7e		; ..############.. 
0412+  0CCC 3C          	.db	$3c		; ....########.... 
0413+  0CCD             
0414+  0CCD 7E          	.db	$7e		; ..############.. $54
0415+  0CCE 7E          	.db	$7e		; ..############.. 
0416+  0CCF 18          	.db	$18		; ......####...... 
0417+  0CD0 18          	.db	$18		; ......####...... 
0418+  0CD1 18          	.db	$18		; ......####...... 
0419+  0CD2 18          	.db	$18		; ......####...... 
0420+  0CD3 18          	.db	$18		; ......####...... 
0421+  0CD4 18          	.db	$18		; ......####...... 
0422+  0CD5 18          	.db	$18		; ......####...... 
0423+  0CD6 18          	.db	$18		; ......####...... 
0424+  0CD7             
0425+  0CD7 66          	.db	$66		; ..####....####.. $55
0426+  0CD8 66          	.db	$66		; ..####....####.. 
0427+  0CD9 66          	.db	$66		; ..####....####.. 
0428+  0CDA 66          	.db	$66		; ..####....####.. 
0429+  0CDB 66          	.db	$66		; ..####....####.. 
0430+  0CDC 66          	.db	$66		; ..####....####.. 
0431+  0CDD 66          	.db	$66		; ..####....####.. 
0432+  0CDE 66          	.db	$66		; ..####....####.. 
0433+  0CDF 7E          	.db	$7e		; ..############.. 
0434+  0CE0 3C          	.db	$3c		; ....########.... 
0435+  0CE1             
0436+  0CE1 66          	.db	$66		; ..####....####.. $56
0437+  0CE2 66          	.db	$66		; ..####....####.. 
0438+  0CE3 66          	.db	$66		; ..####....####.. 
0439+  0CE4 66          	.db	$66		; ..####....####.. 
0440+  0CE5 66          	.db	$66		; ..####....####.. 
0441+  0CE6 7E          	.db	$7e		; ..############.. 
0442+  0CE7 3C          	.db	$3c		; ....########.... 
0443+  0CE8 3C          	.db	$3c		; ....########.... 
0444+  0CE9 18          	.db	$18		; ......####...... 
0445+  0CEA 18          	.db	$18		; ......####...... 
0446+  0CEB             
0447+  0CEB C3          	.db	$c3		; ####........#### $57
0448+  0CEC C3          	.db	$c3		; ####........#### 
0449+  0CED C3          	.db	$c3		; ####........#### 
0450+  0CEE DB          	.db	$db		; ####..####..#### 
0451+  0CEF FF          	.db	$ff		; ################ 
0452+  0CF0 FF          	.db	$ff		; ################ 
0453+  0CF1 E7          	.db	$e7		; ######....###### 
0454+  0CF2 E7          	.db	$e7		; ######....###### 
0455+  0CF3 C3          	.db	$c3		; ####........#### 
0456+  0CF4 C3          	.db	$c3		; ####........#### 
0457+  0CF5             
0458+  0CF5 66          	.db	$66		; ..####....####.. $58
0459+  0CF6 66          	.db	$66		; ..####....####.. 
0460+  0CF7 7E          	.db	$7e		; ..############.. 
0461+  0CF8 3C          	.db	$3c		; ....########.... 
0462+  0CF9 18          	.db	$18		; ......####...... 
0463+  0CFA 18          	.db	$18		; ......####...... 
0464+  0CFB 3C          	.db	$3c		; ....########.... 
0465+  0CFC 7E          	.db	$7e		; ..############.. 
0466+  0CFD 66          	.db	$66		; ..####....####.. 
0467+  0CFE 66          	.db	$66		; ..####....####.. 
0468+  0CFF             
0469+  0CFF 66          	.db	$66		; ..####....####.. $59
0470+  0D00 66          	.db	$66		; ..####....####.. 
0471+  0D01 7E          	.db	$7e		; ..############.. 
0472+  0D02 3C          	.db	$3c		; ....########.... 
0473+  0D03 18          	.db	$18		; ......####...... 
0474+  0D04 18          	.db	$18		; ......####...... 
0475+  0D05 18          	.db	$18		; ......####...... 
0476+  0D06 18          	.db	$18		; ......####...... 
0477+  0D07 18          	.db	$18		; ......####...... 
0478+  0D08 18          	.db	$18		; ......####...... 
0479+  0D09             
0480+  0D09 7E          	.db	$7e		; ..############.. $5A
0481+  0D0A 7E          	.db	$7e		; ..############.. 
0482+  0D0B 60          	.db	$60		; ..........####.. 
0483+  0D0C 70          	.db	$70		; ........######.. 
0484+  0D0D 38          	.db	$38		; ......######.... 
0485+  0D0E 1C          	.db	$1c		; ....######...... 
0486+  0D0F 0E          	.db	$0e		; ..######........ 
0487+  0D10 06          	.db	$06		; ..####.......... 
0488+  0D11 7E          	.db	$7e		; ..############.. 
0489+  0D12 7E          	.db	$7e		; ..############.. 
0490+  0D13             				
0491+  0D13             	.end
0492+  0D13             				3192   0D13             
3193   0D13             
3194   0D13             				;; Sprites
3195   0D13             GFX:														; $0D3D
3196   0D13             #INCLUDE "swgfx.asm"
0001+  0D13             				;; 	.org	$0d3d
0002+  0D13             SHIP0:	
0003+  0D13 05 0C       	.db	$05, $0c		; Size 5 x 12
0004+  0D15 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0004+  0D19 00 
0005+  0D1A 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0005+  0D1E 00 
0006+  0D1F 00 60 0E 00 	.db	$00, $60, $0e, $00, $00		; ................ ..........####.. ..######........ ................ ................ 
0006+  0D23 00 
0007+  0D24 00 E0 CE 3F 	.db	$00, $e0, $ce, $3f, $00		; ................ ..........###### ..######....#### ############.... ................ 
0007+  0D28 00 
0008+  0D29 00 E0 DE 03 	.db	$00, $e0, $de, $03, $00		; ................ ..........###### ..########..#### ####............ ................ 
0008+  0D2D 00 
0009+  0D2E F8 F7 DF F7 	.db	$f8, $f7, $df, $f7, $0f		; ......########## ######..######## ##########..#### ######..######## ########........ 
0009+  0D32 0F 
0010+  0D33 80 F7 DF F7 	.db	$80, $f7, $df, $f7, $00		; ..............## ######..######## ##########..#### ######..######## ................ 
0010+  0D37 00 
0011+  0D38 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0011+  0D3C FF 
0012+  0D3D FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $7f		; ################ ################ ################ ################ ##############.. 
0012+  0D41 7F 
0013+  0D42 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $3f		; ################ ################ ################ ################ ############.... 
0013+  0D46 3F 
0014+  0D47 FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $1f		; ..############## ################ ################ ################ ##########...... 
0014+  0D4B 1F 
0015+  0D4C FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $0f		; ..############## ################ ################ ################ ########........ 
0015+  0D50 0F 
0016+  0D51             
0017+  0D51             SHIP1:	
0018+  0D51 04 0C       	.db	$04, $0c		; Size 4 x 12
0019+  0D53 00 00 03 00 	.db	$00, $00, $03, $00		; ................ ................ ####............ ................ 
0020+  0D57 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0021+  0D5B 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0022+  0D5F 02 B6 03 00 	.db	$02, $b6, $03, $00		; ..##............ ..####..####..## ####............ ................ 
0023+  0D63 87 FF F3 07 	.db	$87, $ff, $f3, $07		; ######........## ################ ####....######## ######.......... 
0024+  0D67 E2 FF F7 00 	.db	$e2, $ff, $f7, $00		; ..##......###### ################ ######..######## ................ 
0025+  0D6B FF FF FF FF 	.db	$ff, $ff, $ff, $ff		; ################ ################ ################ ################ 
0026+  0D6F FF FF FF 7F 	.db	$ff, $ff, $ff, $7f		; ################ ################ ################ ##############.. 
0027+  0D73 FF FF FF 3F 	.db	$ff, $ff, $ff, $3f		; ################ ################ ################ ############.... 
0028+  0D77 FC FF FF 1F 	.db	$fc, $ff, $ff, $1f		; ....############ ################ ################ ##########...... 
0029+  0D7B FC FF FF 0F 	.db	$fc, $ff, $ff, $0f		; ....############ ################ ################ ########........ 
0030+  0D7F F8 FF FF 07 	.db	$f8, $ff, $ff, $07		; ......########## ################ ################ ######.......... 
0031+  0D83             
0032+  0D83             SHIP2:	
0033+  0D83 05 0C       	.db	$05, $0c		; Size 5 x 12
0034+  0D85 00 00 40 00 	.db	$00, $00, $40, $00, $00		; ................ ................ ............##.. ................ ................ 
0034+  0D89 00 
0035+  0D8A 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0035+  0D8E 00 
0036+  0D8F 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0036+  0D93 00 
0037+  0D94 00 80 F0 1E 	.db	$00, $80, $f0, $1e, $00		; ................ ..............## ........######## ..########...... ................ 
0037+  0D98 00 
0038+  0D99 00 00 FB 06 	.db	$00, $00, $fb, $06, $00		; ................ ................ ####..########## ..####.......... ................ 
0038+  0D9D 00 
0039+  0D9E FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0039+  0DA2 FF 
0040+  0DA3 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $3f		; ....############ ################ ################ ################ ############.... 
0040+  0DA7 3F 
0041+  0DA8 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $1f		; ....############ ################ ################ ################ ##########...... 
0041+  0DAC 1F 
0042+  0DAD FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $0f		; ....############ ################ ################ ################ ########........ 
0042+  0DB1 0F 
0043+  0DB2 F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $07		; ......########## ################ ################ ################ ######.......... 
0043+  0DB6 07 
0044+  0DB7 F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0044+  0DBB 03 
0045+  0DBC F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0045+  0DC0 03 
0046+  0DC1             
0047+  0DC1             SHIP3:	
0048+  0DC1 04 0B       	.db	$04, $0b		; Size 4 x 11
0049+  0DC3 40 00 00 02 	.db	$40, $00, $00, $02		; ............##.. ................ ................ ..##............ 
0050+  0DC7 40 80 00 02 	.db	$40, $80, $00, $02		; ............##.. ..............## ................ ..##............ 
0051+  0DCB 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0052+  0DCF 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0053+  0DD3 40 F0 07 02 	.db	$40, $f0, $07, $02		; ............##.. ........######## ######.......... ..##............ 
0054+  0DD7 FC F0 07 F8 	.db	$fc, $f0, $07, $f8		; ....############ ........######## ######.......... ......########## 
0055+  0DDB FC FF FF 7F 	.db	$fc, $ff, $ff, $7f		; ....############ ################ ################ ##############.. 
0056+  0DDF FC FF FF 3F 	.db	$fc, $ff, $ff, $3f		; ....############ ################ ################ ############.... 
0057+  0DE3 F8 FF FF 1F 	.db	$f8, $ff, $ff, $1f		; ......########## ################ ################ ##########...... 
0058+  0DE7 F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0059+  0DEB F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0060+  0DEF             
0061+  0DEF             SHIP4:	
0062+  0DEF 04 0B       	.db	$04, $0b		; Size 4 x 11
0063+  0DF1 80 00 00 00 	.db	$80, $00, $00, $00		; ..............## ................ ................ ................ 
0064+  0DF5 00 00 00 01 	.db	$00, $00, $00, $01		; ................ ................ ................ ##.............. 
0065+  0DF9 A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0066+  0DFD A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0067+  0E01 F0 01 00 01 	.db	$f0, $01, $00, $01		; ........######## ##.............. ................ ##.............. 
0068+  0E05 F8 01 00 F9 	.db	$f8, $01, $00, $f9		; ......########## ##.............. ................ ##....########## 
0069+  0E09 F8 FF FF 7F 	.db	$f8, $ff, $ff, $7f		; ......########## ################ ################ ##############.. 
0070+  0E0D F0 FF FF 3F 	.db	$f0, $ff, $ff, $3f		; ........######## ################ ################ ############.... 
0071+  0E11 F0 FF FF 1F 	.db	$f0, $ff, $ff, $1f		; ........######## ################ ################ ##########...... 
0072+  0E15 F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0073+  0E19 E0 FF FF 0F 	.db	$e0, $ff, $ff, $0f		; ..........###### ################ ################ ########........ 
0074+  0E1D             
0075+  0E1D             SHIP5:
0076+  0E1D 02 06       	.db	$02, $06		; Size 2 x 6
0077+  0E1F 00 03       	.db	$00, $03		; ................ ####............ 
0078+  0E21 10 07       	.db	$10, $07		; ........##...... ######.......... 
0079+  0E23 E0 FF       	.db	$e0, $ff		; ..........###### ################ 
0080+  0E25 FF 7F       	.db	$ff, $7f		; ################ ##############.. 
0081+  0E27 FF 3F       	.db	$ff, $3f		; ################ ############.... 
0082+  0E29 FF 1F       	.db	$ff, $1f		; ################ ##########...... 
0083+  0E2B             
0084+  0E2B             SINK:	
0085+  0E2B 02 0F       	.db	$02, $0f		; Size 2 x 15
0086+  0E2D 10 00       	.db	$10, $00		; ........##...... ................ 
0087+  0E2F 30 02       	.db	$30, $02		; ........####.... ..##............ 
0088+  0E31 70 01       	.db	$70, $01		; ........######.. ##.............. 
0089+  0E33 FC 00       	.db	$fc, $00		; ....############ ................ 
0090+  0E35 F8 11       	.db	$f8, $11		; ......########## ##......##...... 
0091+  0E37 F0 3B       	.db	$f0, $3b		; ........######## ####..######.... 
0092+  0E39 E0 7F       	.db	$e0, $7f		; ..........###### ##############.. 
0093+  0E3B C0 3F       	.db	$c0, $3f		; ............#### ############.... 
0094+  0E3D 80 1F       	.db	$80, $1f		; ..............## ##########...... 
0095+  0E3F 00 3F       	.db	$00, $3f		; ................ ############.... 
0096+  0E41 00 1E       	.db	$00, $1e		; ................ ..########...... 
0097+  0E43 00 04       	.db	$00, $04		; ................ ....##.......... 
0098+  0E45 00 48       	.db	$00, $48		; ................ ......##....##.. 
0099+  0E47 00 F8       	.db	$00, $f8		; ................ ......########## 
0100+  0E49 00 F8       	.db	$00, $f8		; ................ ......########## 
0101+  0E4B             
0102+  0E4B             SHOT0:	
0103+  0E4B 01 11       	.db	$01, $11		; Size 1 x 17
0104+  0E4D 10          	.db	$10		; ........##...... 
0105+  0E4E 38          	.db	$38		; ......######.... 
0106+  0E4F 38          	.db	$38		; ......######.... 
0107+  0E50 38          	.db	$38		; ......######.... 
0108+  0E51 38          	.db	$38		; ......######.... 
0109+  0E52 38          	.db	$38		; ......######.... 
0110+  0E53 38          	.db	$38		; ......######.... 
0111+  0E54 38          	.db	$38		; ......######.... 
0112+  0E55 38          	.db	$38		; ......######.... 
0113+  0E56 38          	.db	$38		; ......######.... 
0114+  0E57 38          	.db	$38		; ......######.... 
0115+  0E58 38          	.db	$38		; ......######.... 
0116+  0E59 38          	.db	$38		; ......######.... 
0117+  0E5A 10          	.db	$10		; ........##...... 
0118+  0E5B 10          	.db	$10		; ........##...... 
0119+  0E5C 10          	.db	$10		; ........##...... 
0120+  0E5D 38          	.db	$38		; ......######.... 
0121+  0E5E             
0122+  0E5E             SHOT1:	
0123+  0E5E 01 0E       	.db	$01, $0e		; Size 1 x 14
0124+  0E60 18          	.db	$18		; ......####...... 
0125+  0E61 18          	.db	$18		; ......####...... 
0126+  0E62 18          	.db	$18		; ......####...... 
0127+  0E63 18          	.db	$18		; ......####...... 
0128+  0E64 18          	.db	$18		; ......####...... 
0129+  0E65 18          	.db	$18		; ......####...... 
0130+  0E66 18          	.db	$18		; ......####...... 
0131+  0E67 18          	.db	$18		; ......####...... 
0132+  0E68 18          	.db	$18		; ......####...... 
0133+  0E69 18          	.db	$18		; ......####...... 
0134+  0E6A 18          	.db	$18		; ......####...... 
0135+  0E6B 18          	.db	$18		; ......####...... 
0136+  0E6C 00          	.db	$00		; ................ 
0137+  0E6D 18          	.db	$18		; ......####...... 
0138+  0E6E             
0139+  0E6E             SHOT2:	
0140+  0E6E 01 09       	.db	$01, $09		; Size 1 x 9
0141+  0E70 10          	.db	$10		; ........##...... 
0142+  0E71 10          	.db	$10		; ........##...... 
0143+  0E72 10          	.db	$10		; ........##...... 
0144+  0E73 10          	.db	$10		; ........##...... 
0145+  0E74 10          	.db	$10		; ........##...... 
0146+  0E75 10          	.db	$10		; ........##...... 
0147+  0E76 10          	.db	$10		; ........##...... 
0148+  0E77 10          	.db	$10		; ........##...... 
0149+  0E78 10          	.db	$10		; ........##...... 
0150+  0E79             
0151+  0E79             MINE:
0152+  0E79             #IF OLDMINE
0153+  0E79 01 10       	.db	$01, $10		; Size 1 x 16
0154+  0E7B 10          	.db	$10		; ........##...... 
0155+  0E7C BA          	.db	$ba		; ..##..######..## 
0156+  0E7D 7C          	.db	$7c		; ....##########.. 
0157+  0E7E FE          	.db	$fe		; ..############## 
0158+  0E7F 7C          	.db	$7c		; ....##########.. 
0159+  0E80 38          	.db	$38		; ......######.... 
0160+  0E81 54          	.db	$54		; ....##..##..##.. 
0161+  0E82 10          	.db	$10		; ........##...... 
0162+  0E83 00          	.db	$00		; ................ 
0163+  0E84 10          	.db	$10		; ........##...... 
0164+  0E85 00          	.db	$00		; ................ 
0165+  0E86 08          	.db	$08		; ......##........ 
0166+  0E87 00          	.db	$00		; ................ 
0167+  0E88 00          	.db	$00		; ................ 
0168+  0E89 04          	.db	$04		; ....##.......... 
0169+  0E8A 00          	.db	$00		; ................ 
0170+  0E8B~            #ELSE														; Cant use left 2 pixels, right pixels, or top line, else artifacts
0171+  0E8B~            	.db	$01, $10		; Size 1 x 16
0172+  0E8B~            	.db	$00		; ................ 
0173+  0E8B~            	.db	$54		; ....##..##..##.. 
0174+  0E8B~            	.db	$38		; ......######.... 
0175+  0E8B~            	.db	$7c		; ....##########.. 
0176+  0E8B~            	.db	$6c		; ....####..####.. 
0177+  0E8B~            	.db	$7c		; ....##########.. 
0178+  0E8B~            	.db	$38		; ......######.... 
0179+  0E8B~            	.db	$54		; ....##..##..##.. 
0180+  0E8B~            	.db	$10		; ........##...... 
0181+  0E8B~            	.db	$00		; ................ 
0182+  0E8B~            	.db	$10		; ........##...... 
0183+  0E8B~            	.db	$00		; ................ 
0184+  0E8B~            	.db	$08		; ......##........ 
0185+  0E8B~            	.db	$00		; ................ 
0186+  0E8B~            	.db	$04		; ....##.......... 
0187+  0E8B~            	.db	$00		; ................ 
0188+  0E8B             #ENDIF
0189+  0E8B             			
0190+  0E8B             	.end
0191+  0E8B             				3197   0E8B             
3198   0E8B             
3199   0E8B             				;; Table for $07CF
3200   0E8B             MINEEXP:																									; $0EB5
3201   0E8B 3D 3E 3F    				.db			$3D, $3E, $3F															; Mine explosion
3202   0E8E             
3203   0E8E             LTBLANK:																									; $0EB8
3204   0E8E 40 40 40 40 				.db			"@@@@@@@@@@@"															; ___________
3204   0E92 40 40 40 40 
3204   0E96 40 40 40 
3205   0E99             
3206   0E99             LTOVER:																										; $0EC3
3207   0E99 47 41 4D 45 				.db			"GAME@OVER"																; GAME_OVER
3207   0E9D 40 4F 56 45 
3207   0EA1 52 
3208   0EA2             
3209   0EA2             LTHIGH:																										; $0ECC 
3210   0EA2 48 49 47 48 				.db			"HIGH@SCORE"															; HIGH_SCORE
3210   0EA6 40 53 43 4F 
3210   0EAA 52 45 
3211   0EAC             #IF SC3DIG
3212   0EAC 40 40 40 40 				.db			"@@@@@@@"																	; _______
3212   0EB0 40 40 40 
3213   0EB3~            #ELSE
3214   0EB3~            				.db			"@@@@@@"																	; ______
3215   0EB3             #ENDIF
3216   0EB3 59 4F 55 52 				.db			"YOUR@SCORE"															; YOUR_SCORE
3216   0EB7 40 53 43 4F 
3216   0EBB 52 45 
3217   0EBD             
3218   0EBD             LTCOIN:																										; $0EE6
3219   0EBD 49 4E 53 45 				.db			"INSERT@COIN"															; INSERT_COIN
3219   0EC1 52 54 40 43 
3219   0EC5 4F 49 4E 
3220   0EC8             
3221   0EC8             LTPUSH:																										; $0EF1
3222   0EC8             #IF SC3DIG
3223   0EC8 50 52 45 53 				.db			"PRESS@START"															; PRESS_START
3223   0ECC 53 40 53 54 
3223   0ED0 41 52 54 
3224   0ED3~            #ELSE
3225   0ED3~            				.db			"PUSH@BUTTON"															; PUSH_BUTTON
3226   0ED3             #ENDIF
3227   0ED3             
3228   0ED3             LTSEA:																										; $0EFC
3229   0ED3~            #IF SW2024
3230   0ED3~            				.db			"SEAWOLFQ"																; SEAWOLF24
3231   0ED3             #ELSE
3232   0ED3 53 45 41 40 				.db			"SEA@WOLF"																; SEA_WOLF
3232   0ED7 57 4F 4C 46 
3233   0EDB             #ENDIF
3234   0EDB             
3235   0EDB             				;; Water
3236   0EDB             L0F04:
3237   0EDB 3A 3B 3C 3B 				.db			$3A, $3B, $3C, $3B, $3C, $3A, $3B, $3C		; All
3237   0EDF 3C 3A 3B 3C 
3238   0EE3 3A 3C 3B 3C 				.db			$3A, $3C, $3B, $3C, $3A, $3B, $3A, $3C		; Water
3238   0EE7 3A 3B 3A 3C 
3239   0EEB 3B 3A 3C 3A 				.db			$3B, $3A, $3C, $3A, $3B, $3C, $3A, $3C		; Codes
3239   0EEF 3B 3C 3A 3C 
3240   0EF3 3B 3C 3A 3B 				.db			$3B, $3C, $3A, $3B, $3C, $3A, $3B, $3C		; Here
3240   0EF7 3C 3A 3B 3C 
3241   0EFB             
3242   0EFB~            #IF OLDINT
3243   0EFB~            LTBONUS:																									; $0F24 
3244   0EFB~            				.db			"BONUS"																		; BONUS
3245   0EFB             #ENDIF
3246   0EFB             
3247   0EFB             LTTIME:																										; $0F29
3248   0EFB 54 49 4D 45 				.db			"TIME"																		; TIME
3249   0EFF             
3250   0EFF             #IF SC3DIG
3251   0EFF 2C          				.db			$2C																				; <space>
3252   0F00~            #ELSE
3253   0F00~            				.db			$2D																				; <space>
3254   0F00             #ENDIF
3255   0F00 53 43 4F 52 				.db			"SCORE"																		; SCORE
3255   0F04 45 
3256   0F05             
3257   0F05             LTEXT:																					; $0F33 
3258   0F05 45 58 54 45 				.db			"EXTENDED"																; EXTENDED
3258   0F09 4E 44 45 44 
3259   0F0D 16          				.db			$16																				; <space>
3260   0F0E             #IF SC3DIG
3261   0F0E 50 4C 41 59 				.db			"PLAY"																		; PLAY
3262   0F12~            #ELSE
3263   0F12~            				.db			"TIME"																		; TIME
3264   0F12             #ENDIF
3265   0F12             
3266   0F12~            #IF OLDINT
3267   0F12~            				;; Addresses of mine hit data
3268   0F12~            TEMINE:
3269   0F12~            				.dw			TZAP																			; ZAP
3270   0F12~            				.dw			TWAM																			; WAM
3271   0F12             #ENDIF
3272   0F12             
3273   0F12             TZAP:
3274   0F12 01 41 04 3D 				.db			$01, "A", $04, $3D, "Z", $2F, "P", $3F		; *ZAP*
3274   0F16 5A 2F 50 3F 
3275   0F1A             TWAM:
3276   0F1A 01 41 04 3D 				.db			$01, "A", $04, $3D, "W", $2F, "M", $3F		; *WAM*
3276   0F1E 57 2F 4D 3F 
3277   0F22             
3278   0F22             #IF MOREEXP
3279   0F22             TPOW:
3280   0F22 01 4F 04 3D 				.db			$01, "O", $04, $3D, "P", $2F, "W", $3F		; *POW*
3280   0F26 50 2F 57 3F 
3281   0F2A             TOOF:
3282   0F2A 01 4F 04 3D 				.db			$01, "O", $04, $3D, "O", $2F, "F", $3F		; *OOF*
3282   0F2E 4F 2F 46 3F 
3283   0F32             #ENDIF
3284   0F32             
3285   0F32~            #IF OLDDIP
3286   0F32~            				;; 4-byte table (time per credit)
3287   0F32~            LDTIME:																										; $0F54
3288   0F32~            				.db			$61, $71, $81, $91												; (Seconds)
3289   0F32             #ENDIF
3290   0F32             
3291   0F32             				;; $0F57 = 8-byte score table (0,7 not used)
3292   0F32             TSCORE:																										; $0F58
3293   0F32 03 03 03 01 				.db			$03, $03, $03, $01, $01, $07							; 
3293   0F36 01 07 
3294   0F38             
3295   0F38             				;; Table for $05D2 (0x20 long)
3296   0F38             				;; Periscope grey code decode
3297   0F38             TGREY:																										; $0F5E
3298   0F38 00 08 18 10 				.db			$00, $08, $18, $10, $38, $30, $20, $28		; 
3298   0F3C 38 30 20 28 
3299   0F40 78 70 60 68 				.db			$78, $70, $60, $68, $40, $48, $58, $50		; 
3299   0F44 40 48 58 50 
3300   0F48 F8 F0 E0 E8 				.db			$F8, $F0, $E0, $E8, $C0, $C8, $D8, $D0		; 
3300   0F4C C0 C8 D8 D0 
3301   0F50 80 88 98 90 				.db			$80, $88, $98, $90, $B8, $B0, $A0, $A8		; 
3301   0F54 B8 B0 A0 A8 
3302   0F58             
3303   0F58             
3304   0F58             				;; Ship tables
3305   0F58             				;; 00-01	= Sprite address
3306   0F58             				;; 02			= $20 = Right to Left, $40 = Left to Right
3307   0F58             				;; 03 		= Initial Y
3308   0F58             				;; 04 		= Delta Y (Always 0 for ships)
3309   0F58             				;; 05			= Final X
3310   0F58             				;; 06			= Initial X
3311   0F58             				;; 07			= Delta X
3312   0F58             
3313   0F58             				;; Even ship table
3314   0F58             L0F7E:
3315   0F58 0D 13       				.db			(SHIP0>>8), SHIP0&$ff
3316   0F5A 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 0
3316   0F5E 00 02 
3317   0F60 0D 51       				.db			(SHIP1>>8), SHIP1&$ff
3318   0F62 20 14 00 E0 				.db			$20, $14, $00, $E0, $00, $02		; Ship 1
3318   0F66 00 02 
3319   0F68 0D 83       				.db			(SHIP2>>8), SHIP2&$ff
3320   0F6A 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 2
3320   0F6E 00 02 
3321   0F70 0D C1       				.db			(SHIP3>>8), SHIP3&$ff
3322   0F72 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 3
3322   0F76 00 01 
3323   0F78 0D EF       				.db			(SHIP4>>8), SHIP4&$ff
3324   0F7A 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 4
3324   0F7E 00 01 
3325   0F80 0E 1D       				.db			(SHIP5>>8), SHIP5&$ff
3326   0F82 20 1A 00 F0 				.db			$20, $1A, $00, $F0, $00, $03		; Ship 5
3326   0F86 00 03 
3327   0F88             
3328   0F88             				;; Odd ship table
3329   0F88             L0FAE:
3330   0F88 0D 13       				.db			(SHIP0>>8), SHIP0&$ff
3331   0F8A 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 0
3331   0F8E D8 FE 
3332   0F90 0D 51       				.db			(SHIP1>>8), SHIP1&$ff
3333   0F92 40 34 00 E0 				.db			$40, $34, $00, $E0, $E0, $FE		; Ship 1
3333   0F96 E0 FE 
3334   0F98 0D 83       				.db			(SHIP2>>8), SHIP2&$ff
3335   0F9A 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 2
3335   0F9E D8 FE 
3336   0FA0 0D C1       				.db			(SHIP3>>8), SHIP3&$ff
3337   0FA2 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 3
3337   0FA6 E0 FF 
3338   0FA8 0D EF       				.db			(SHIP4>>8), SHIP4&$ff
3339   0FAA 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 4
3339   0FAE E0 FF 
3340   0FB0 0E 1D       				.db			(SHIP5>>8), SHIP5&$ff
3341   0FB2 40 3A 00 F0 				.db			$40, $3A, $00, $F0, $F0, $FD		; Ship 5
3341   0FB6 F0 FD 
3342   0FB8             
3343   0FB8             				;; Ship type table
3344   0FB8             L0FDE:
3345   0FB8 06          				.db			$06															; Small, fast
3346   0FB9 04          				.db			$04															; Mid, 2 towers
3347   0FBA 02          				.db			$02															; Cross in back
3348   0FBB 06          				.db			$06															; Small, fast
3349   0FBC 03          				.db			$03															; Big, flat top
3350   0FBD 05          				.db			$05															; Tower in back
3351   0FBE 01          				.db			$01															; Battleship
3352   0FBF             
3353   0FBF             #IF DOCOPY
3354   0FBF             COPYRGHT:
3355   0FBF 4D 53 50 41 				.db			"MSPAETH@2024"
3355   0FC3 45 54 48 40 
3355   0FC7 32 30 32 34 
3356   0FCB             #ENDIF
3357   0FCB             
3358   0FCB~            #IF OLDTEST
3359   0FCB~            				.org		$0fff
3360   0FCB~            				.db			$ff
3361   0FCB             #ELSE
3362   0FF7             				.org		$0ff7
3363   0FF7             
3364   0FF7             				;; $400 block checksums
3365   0FF7             				;; Recalculate these with 'swaddchk'
3366   0FF7 9A          				.db			$9A											; Patch byte for $c00 checksum
3367   0FF8             CHKS:
3368   0FF8 EC 3C 10 00 				.db			$EC, $3C, $10, $00			; Checksums
3369   0FFC             
3370   0FFC             				;; Error locations
3371   0FFC             ERRS:
3372   0FFC 48 47 46 45 				.db			$48, $47, $46, $45			; HGFE
3373   1000             #ENDIF
3374   1000             
3375   1000             .end
tasm: Number of errors = 0

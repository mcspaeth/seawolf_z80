0001   0000             				;; @2024 Mark Spaeth -- mspaeth@gmail.com
0002   0000             				;; Whitespace for emacs asm mode w/ tab width 2
0003   0000             
0004   0000             				;; Programmed for tasm z80 mode using only 8080 instructions
0005   0000             
0006   0000             				;; Config variables
0007   0000             OLDMINE	= 1
0008   0000             SW2024	= 0
0009   0000             
0010   0000             				;; Generic variables
0011   0000             SINC		= $000D									; Ship entry length
0012   0000             MINC		= $000D									; Mine entry length
0013   0000             RINC		= $0020									; Row increment
0014   0000             TINC		= $001E									; Torpedo entry length
0015   0000             
0016   0000             				;; Memory locations
0017   0000             PRGPTR	= $2000									; $2000-2001
0018   0000             GTIME		= $2002
0019   0000             CREDIT	= $2005									; Was $2005, half credit not used
0020   0000             HSCORE	= $2006									; Was $2006
0021   0000             HSCOREH	= HSCORE+1
0022   0000             IN1			= $2007
0023   0000             IN0			= $2008
0024   0000             TIMER1	= $2010
0025   0000             TIMER2	= $2011
0026   0000             HMINE		= $2014									; Next mine to update
0027   0000             HTORP		= $2016									; Next torp to update
0028   0000             HSHIPA	= $2018									; SHIPA handle
0029   0000             HSHIPB	= $201A									; SHIPB handle
0030   0000             HSUNK		= $201C									; SUNK handle (?)
0031   0000             PSCORE	= $202B									; Was $202B
0032   0000             
0033   0000             SHIPA0	= $2031									; Base address of ship A
0034   0000             SHIPA1	= SHIPA0+SINC						; $203E ($0d block)
0035   0000             SHIPA2	= SHIPA1+SINC						; $204B ($0d block)
0036   0000             SHIPAX	= SHIPA2+SINC						; $2058 ($0d block)
0037   0000             
0038   0000             SHIPB0	= $2058									; Base address of ship B
0039   0000             SHIPB1	= SHIPB0+SINC						; $2065 ($0d block)
0040   0000             SHIPB2	= SHIPB1+SINC						; $2072 ($0d block)
0041   0000             SHIPBX	= SHIPB2+SINC						; $207F ($0d block)
0042   0000             
0043   0000             MINES		= $207F									; Base address of mines
0044   0000             MINEX		= MINES+(8*MINC)				; $20E7 (8x $0d blocks)
0045   0000             
0046   0000             TORPS		= $20E7									; Base address of torpedos
0047   0000             TORPX		= TORPS+(4*TINC)				; $215F (4x $1e blocks)
0048   0000             
0049   0000             TXTBUF	= $21E9
0050   0000             TXTBUF1	= TXTBUF+1
0051   0000             
0052   0000             				;; out 01    = Explosion matrix
0053   0000             				;; out 02    = Torpedo display
0054   0000             				;; out 03    = Shifter data
0055   0000             				;; out 04    = Shifter count
0056   0000             				;; out 05    = Sound triggers
0057   0000             				;; out 06    = watchdog (add this)
0058   0000             
0059   0000             
0060   0000             				;; Original memory addresses (modded for this)
0061   0000             				;; 2000-2001 = Pointer address for main game/attract loop
0062   0000             				;; 2002      = Game time?
0063   0000             				;; 2003      = Down counter ($1E to $00)
0064   0000             				;; 2004      = Partial credits
0065   0000             				;; 2005      = Credits
0066   0000             				;; 2006      = High score byte
0067   0000             				;; 2007      = Last IN1
0068   0000             				;; 2008	     = Last IN0
0069   0000             				;; 200e-200f = Unused?
0070   0000             				;; 2010      = Down counter (when $2003 == 0)
0071   0000             				;; 2011      = Down counter
0072   0000             				;; 2012-2013 = (Not used?)
0073   0000             				;; 2014-2015 = Sprite draw handle
0074   0000             				;; 2016-2017 = Ship 0  handle
0075   0000             				;; 2018-2019 = Ship 1  handke
0076   0000             				;; 201a-201b = Torpedo handle 
0077   0000             				;; 201c      = Next sprite?
0078   0000             				;; 201e      = ??
0079   0000             				;; 201f      = Draw / not draw for flashing?
0080   0000             
0081   0000             				;; 2020 = Mask for subs to call at 04ce (when [[$2000]] == 00)
0082   0000             				;;             D7 = $2002, D6 = $2010, D5 = $2011, D4 = $2021
0083   0000             				;;             D3 = $2022, D2 = $2023, D1 = $2024, D0 = $2025
0084   0000             				;; 2021      = Down counter (non-zero inhibits fire)
0085   0000             				;; 2022      = Down counter
0086   0000             				;; 2023      = Down counter ($19 for small ship)
0087   0000             				;; 2024      = Timer (to show score / explosion)
0088   0000             				;; 2025      = Timer (audio)
0089   0000             				;; 2026      = Down counter ($0f for small ship)
0090   0000             				;; 2027-2028 = Wave state
0091   0000             				;; 2029      = Next ship type
0092   0000             				;; 202A      = Duplicate game time
0093   0000             				;; 202b      = Player score
0094   0000             				;; 202c      = ?? 
0095   0000             				;; 202d      = Torpedo status
0096   0000             				;; 202e      = 1 if extended time passed
0097   0000             				;; 202f      = Ship Launch direction?
0098   0000             				;; 2030      = Current sprite shift
0099   0000             				;; 2031-203D = Sprite ($0d block)
0100   0000             				;;		Byte 0   = X flags?
0101   0000             				;;		Byte 1   = Delta X
0102   0000             				;;		Byte 2   = X Pos  ((loc-$2400) & $1f)<<3 | (shift & $07)
0103   0000             				;;		Byte 3   = Y flags
0104   0000             				;;		Byte 4   = Delta Y
0105   0000             				;;		Byte 5   = Y Pos  loc-$2400)>>5
0106   0000             				;;		Byte 6   = ??
0107   0000             				;;		Byte 7-8 = Sprite tbl LSB,MSB
0108   0000             				;;		Byte 9-A = (address -> de -> hl)
0109   0000             				;;		Byte C-D = (read into bc)
0110   0000             				;; 203E-204A = Sprite ($0d block)
0111   0000             				;; 204B-2057 = Sprite ($0d block)
0112   0000             				;; 2058-2064 = Ship data 0 (Attract?)
0113   0000             				;; 2065-2071 = Ship data 1
0114   0000             				;; 2072-207e = Ship data 2
0115   0000             				
0116   0000             				;; 207f-208b = Mine data 0
0117   0000             				;; 208c-2098 = Mine data 1
0118   0000             				;; 2099-20a5 = Mine data 2
0119   0000             				;; 20a6-20b2 = Mine data 3
0120   0000             				;; 20b3-20bf = Mine data 4
0121   0000             				;; 20c0-20cc = Mine data 5
0122   0000             				;; 20cd-20d9 = Mine data 6
0123   0000             				;; 20da-20e6 = Mine data 7
0124   0000             
0125   0000             				;; 20c9-20e6
0126   0000             				
0127   0000             				;; Torpedo control?
0128   0000             				;; 20e7-2104 = $1e data block
0129   0000             				;; 2105-2122 = $1e data block
0130   0000             				;; 2123-2140 = $1e data block
0131   0000             				;; 2140-21r3 = $1e data block
0132   0000             				
0133   0000             				;; 215f-21a3 = $44 data block, cleared at $0088
0134   0000             				
0135   0000             				;; 21e9-21ef = 7 character buffer for time+score
0136   0000             				;; 21f0-21f1 = Address for $0A3F clear if non-zero
0137   0000             				;; 21f2-21f3 = Address for $0A3F clear if non-zero
0138   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0139   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0140   0000             
0141   0000             				;; RST $00 ($C7)
0142   0000             				.org		$0000
0143   0000             L0000:
0144   0000 00          				nop
0145   0001 00          				nop
0146   0002 31 00 24    				ld			sp,$2400				; Stack pointer
0147   0005 C3 3A 04    				jp			L043A						; Startup jump
0148   0008             
0149   0008             				;; rst $08 ($cf interrupt vector)
0150   0008             RST08:
0151   0008 E5          				push		hl
0152   0009 D5          				push		de
0153   000A C5          				push		bc
0154   000B F5          				push		af
0155   000C C3 7E 00    				jp			L007E
0156   000F 00          				nop
0157   0010             
0158   0010             				;; rst $10 ($d7 interrupt vector)
0159   0010             RST10:
0160   0010 E5          				push		hl
0161   0011 D5          				push		de
0162   0012 C5          				push		bc
0163   0013 F5          				push		af
0164   0014 3A 1F 20    				ld			a,($201F)				; ??
0165   0017 A7          				and			a
0166   0018 C2 3E 00    				jp			nz,L003E
0167   001B             
0168   001B CD BC 03    				call		L03BC						; Update wave
0169   001E CD 2E 01    				call		L012E						; Update a sprite
0170   0021             
0171   0021 2A 16 20    				ld			hl,($2016)			; Sprite pointer
0172   0024 7E          				ld			a,(hl)
0173   0025 A7          				and			a
0174   0026 F2 36 00    				jp			p,L0036					; D7=0 = inactive
0175   0029 E6 20       				and			$20
0176   002B CA 36 00    				jp			z,L0036					; D5=0 = don't draw
0177   002E             	
0178   002E CD 5B 03    				call		L035B						; Load de, bc from ship data
0179   0031 0D          				dec			c
0180   0032 EB          				ex			de,hl
0181   0033 CD 2A 0A    				call		L0A2A						; Draw b x c block from de at hl
0182   0036             				
0183   0036             L0036:
0184   0036 3E FF       				ld			a,$FF
0185   0038 32 1F 20    				ld			($201F),a	
0186   003B C3 69 00    				jp			L0069						; End of interrupt routine
0187   003E             	
0188   003E             L003E:
0189   003E 2A 16 20    				ld			hl,($2016)			; Sprite pointer
0190   0041 7E          				ld			a,(hl)
0191   0042 A7          				and			a
0192   0043 F2 62 00    				jp			p,L0062					; D7=0 = inactive
0193   0046             	
0194   0046 E6 40       				and			$40
0195   0048 C2 50 00    				jp			nz,L0050				; Jump if not set to clear
0196   004B 36 00       				ld			(hl),$00				; Clear sprite
0197   004D C3 62 00    				jp			L0062
0198   0050             	
0199   0050             L0050:
0200   0050 7E          				ld			a,(hl)					; Set flags bit 5
0201   0051 F6 20       				or			$20
0202   0053 77          				ld			(hl),a
0203   0054 CD 65 01    				call		L0165						; Update sprite
0204   0057 78          				ld			a,b
0205   0058 E5          				push		hl							
0206   0059 2A 1C 20    				ld			hl,($201C)			; ($201C) to bc
0207   005C 44          				ld			b,h
0208   005D 4D          				ld			c,l
0209   005E E1          				pop			hl
0210   005F CD 16 0A    				call		L0A16
0211   0062             	
0212   0062             L0062:
0213   0062 CD 68 03    				call		L0368
0214   0065 AF          				xor			a
0215   0066 32 1F 20    				ld			($201F),a
0216   0069             
0217   0069             				;; End of interrupt routine
0218   0069             L0069:
0219   0069 DB 02       				in			a,($02)					; IN1
0220   006B 47          				ld			b,a
0221   006C DB 02       				in			a,($02)					; IN1
0222   006E 21 07 20    				ld			hl,IN1					; Last IN1
0223   0071 11 CA 09    				ld			de,TBLIN1				; IN1 handler table
0224   0074 B8          				cp			b								; Poor man's debounce
0225   0075 CC 05 0B    				call		z,L0B05					; Call if stable
0226   0078             				
0227   0078 F1          				pop			af
0228   0079 C1          				pop			bc
0229   007A D1          				pop			de
0230   007B E1          				pop			hl
0231   007C FB          				ei
0232   007D C9          				ret
0233   007E             				
0234   007E             
0235   007E             				;; Interrupt $08 vector continues...
0236   007E             L007E:
0237   007E 3A 1F 20    				ld			a,($201F)
0238   0081 A7          				and			a
0239   0082 C2 19 01    				jp			nz,L0119
0240   0085 CD BC 03    				call		L03BC						; Update wave
0241   0088             	
0242   0088             				;; Clear $215f-$21a3
0243   0088 21 5F 21    				ld			hl,$215F
0244   008B 06 44       				ld			b,$44
0245   008D AF          				xor			a
0246   008E             L008E:
0247   008E 77          				ld			(hl),a
0248   008F 23          				inc			hl
0249   0090 05          				dec			b
0250   0091 C2 8E 00    				jp			nz,L008E
0251   0094             	
0252   0094 2A 18 20    				ld			hl,($2018)			; Sprite pointer 0
0253   0097 3E 03       				ld			a,$03						; Loop counter 
0254   0099             L0099:
0255   0099 F5          				push		af
0256   009A 7D          				ld			a,l
0257   009B FE 58       				cp			$58							; Cycles $2031 / $203E / $204B
0258   009D C2 A3 00    				jp			nz,L00A3
0259   00A0             				
0260   00A0             L00A0:
0261   00A0 21 31 20    				ld			hl,$2031				; Resets to $2031
0262   00A3             L00A3:
0263   00A3 B4          				or			h
0264   00A4 CA A0 00    				jp			z,L00A0					; If was $0000, init as $2013
0265   00A7             	
0266   00A7 E5          				push		hl
0267   00A8 CD DE 01    				call		L01DE						; Handle sprite
0268   00AB E1          				pop			hl
0269   00AC D2 B2 00    				jp			nc,L00B2
0270   00AF             	
0271   00AF 22 18 20    				ld			($2018),hl			; Store sprite pointer 0
0272   00B2             L00B2:
0273   00B2 11 0D 00    				ld			de,$000D				; Sprite increment
0274   00B5 19          				add			hl,de
0275   00B6 F1          				pop			af
0276   00B7 3D          				dec			a
0277   00B8 C2 99 00    				jp			nz,L0099				; Loop back
0278   00BB             	
0279   00BB 2A 18 20    				ld			hl,($2018)			; Sprite pointer 0
0280   00BE CD 0C 03    				call		L030C
0281   00C1             	
0282   00C1 2A 1A 20    				ld			hl,($201A)			; Sprite pointer 1
0283   00C4             				
0284   00C4 3E 03       				ld			a,$03						; Loop counter
0285   00C6             L00C6:
0286   00C6 F5          				push		af
0287   00C7 7D          				ld			a,l
0288   00C8 FE 7F       				cp			$7F							; Cycloes $2058 / $2065 / $2072
0289   00CA C2 D0 00    				jp			nz,L00D0
0290   00CD             L00CD:
0291   00CD 21 58 20    				ld			hl,$2058				; Reset to $2058
0292   00D0             L00D0:
0293   00D0 B4          				or			h
0294   00D1 CA CD 00    				jp			z,L00CD					; If was $0000, init as $2058
0295   00D4             	
0296   00D4 E5          				push		hl
0297   00D5 CD DE 01    				call		L01DE						; Handle sprite
0298   00D8 E1          				pop			hl
0299   00D9 D2 DF 00    				jp			nc,L00DF
0300   00DC             	
0301   00DC 22 1A 20    				ld			($201A),hl			; Store sprite pointer 1
0302   00DF             L00DF:
0303   00DF 11 0D 00    				ld			de,$000D				; Sprite increment
0304   00E2 19          				add			hl,de
0305   00E3 F1          				pop			af
0306   00E4 3D          				dec			a
0307   00E5 C2 C6 00    				jp			nz,L00C6				; Loop back
0308   00E8             	
0309   00E8 AF          				xor			a
0310   00E9 32 30 20    				ld			($2030),a				; Clear sprite shift
0311   00EC             	
0312   00EC 2A 16 20    				ld			hl,($2016)			; Pointer?
0313   00EF 3E 04       				ld			a,$04						; Loop counter
0314   00F1             L00F1:
0315   00F1 F5          				push		af
0316   00F2 7D          				ld			a,l
0317   00F3 FE 5F       				cp			$5F							; Cycles $20E7 / $2105 / $2123 / $2140
0318   00F5 C2 FB 00    				jp			nz,L00FB
0319   00F8             	
0320   00F8             L00F8:
0321   00F8 21 E7 20    				ld			hl,$20E7				; Reset to $20E7
0322   00FB             L00FB:
0323   00FB B4          				or			h
0324   00FC CA F8 00    				jp			z,L00F8					; If was $0000, init to $20E7
0325   00FF             
0326   00FF E5          				push		hl
0327   0100 CD 50 02    				call		L0250						; Handle torpedo
0328   0103 E1          				pop			hl
0329   0104 D2 0A 01    				jp			nc,L010A
0330   0107             
0331   0107 22 16 20    				ld			($2016),hl			; Update pointer
0332   010A             L010A:
0333   010A 11 1E 00    				ld			de,$001E				; Torp increment
0334   010D 19          				add			hl,de
0335   010E F1          				pop			af
0336   010F 3D          				dec			a
0337   0110 C2 F1 00    				jp			nz,L00F1				; Loop back
0338   0113             
0339   0113 CD 31 03    				call		L0331						; Update sprites
0340   0116 C3 69 00    				jp			L0069						; End of interrupt routine
0341   0119             
0342   0119             
0343   0119             L0119:
0344   0119 2A 1A 20    				ld			hl,($201A)			; Ship 1 pointer
0345   011C CD 0C 03    				call		L030C
0346   011F             
0347   011F 2A 1A 20    				ld			hl,($201A)			; Ship 1 pointer
0348   0122 CD 3A 01    				call		L013A
0349   0125             
0350   0125 2A 18 20    				ld			hl,($2018)			; Ship 0 pointer
0351   0128 CD 3A 01    				call		L013A
0352   012B             				
0353   012B C3 69 00    				jp			L0069						; End of interrupt routine
0354   012E             				
0355   012E             
0356   012E             				;; Called from rst $10
0357   012E             				;; Handle $2014 handle
0358   012E             L012E:
0359   012E 2A 14 20    				ld			hl,($2014)
0360   0131 7E          				ld			a,(hl)
0361   0132 A7          				and			a
0362   0133 F0          				ret			p								; D7 clear = inactive
0363   0134             
0364   0134 CD 65 01    				call		L0165						; Update sprite
0365   0137 C3 92 01    				jp			L0192						; Draw sprite
0366   013A             
0367   013A             
0368   013A             				;; Handle $2018 / $201a entries
0369   013A             L013A:
0370   013A 7E          				ld			a,(hl)
0371   013B A7          				and			a
0372   013C F0          				ret			p								; D7 clear = inactive
0373   013D             
0374   013D E6 40       				and			$40							; Check bit 6
0375   013F C2 45 01    				jp			nz,L0145				; D6 set = clear
0376   0142 36 00       				ld			(hl),$00				; Clear entry
0377   0144 C9          				ret
0378   0145             
0379   0145             L0145:
0380   0145 7E          				ld			a,(hl)
0381   0146 F6 20       				or			$20							; Set bit 5 
0382   0148 77          				ld			(hl),a
0383   0149 F5          				push		af
0384   014A CD 65 01    				call		L0165						; Update sprite
0385   014D             				;; hl = screen loc, c=shift on return
0386   014D             
0387   014D F1          				pop			af
0388   014E E6 10       				and			$10							; Check bit 4
0389   0150 CA 92 01    				jp			z,L0192					; Draw sprite
0390   0153             
0391   0153 79          				ld			a,c
0392   0154 85          				add			a,l
0393   0155 6F          				ld			l,a
0394   0156 E5          				push		hl
0395   0157 21 30 20    				ld			hl,$2030
0396   015A 7E          				ld			a,(hl)
0397   015B 2F          				cpl
0398   015C E6 07       				and			$07
0399   015E 77          				ld			(hl),a
0400   015F E1          				pop			hl
0401   0160 D3 04       				out			($04),a					; Update shift count
0402   0162 C3 B8 01    				jp			L01B8
0403   0165             
0404   0165             				;; Update/redraw sprite
0405   0165             L0165:
0406   0165 23          				inc			hl
0407   0166 23          				inc			hl
0408   0167 5E          				ld			e,(hl)					; LSB of loc + shift
0409   0168 23          				inc			hl
0410   0169 23          				inc			hl
0411   016A 23          				inc			hl
0412   016B 56          				ld			d,(hl)					; MSB of loc
0413   016C 23          				inc			hl
0414   016D 23          				inc			hl
0415   016E CD 00 0A    				call		L0A00						; de >> 3, e&3 -> c
0416   0171             				
0417   0171 79          				ld			a,c							; (shift)
0418   0172 32 30 20    				ld			($2030),a
0419   0175 D3 04       				out			($04),a					; Shifter count
0420   0177 D5          				push		de							; Push screen loc
0421   0178 5E          				ld			e,(hl)					; Get spite data loc
0422   0179 23          				inc			hl
0423   017A 56          				ld			d,(hl)
0424   017B 23          				inc			hl
0425   017C EB          				ex			de,hl						; rom loc -> hl
0426   017D 4E          				ld			c,(hl)					; Read sprite size
0427   017E 23          				inc			hl
0428   017F 46          				ld			b,(hl)
0429   0180 23          				inc			hl
0430   0181 E3          				ex			(sp),hl					; hl = screen loc
0431   0182 EB          				ex			de,hl						; hl Back to ram table
0432   0183 73          				ld			(hl),e
0433   0184 23          				inc			hl
0434   0185 72          				ld			(hl),d
0435   0186 23          				inc			hl
0436   0187 71          				ld			(hl),c					; Width
0437   0188 34          				inc			(hl)						; +1 wide for shifting?
0438   0189 23          				inc			hl							
0439   018A 70          				ld			(hl),b					; Height
0440   018B 23          				inc			hl
0441   018C 22 1C 20    				ld			($201C),hl			; Store next
0442   018F             				
0443   018F EB          				ex			de,hl						; hl = screen loc
0444   0190 D1          				pop			de							; de = sprite data in ROM
0445   0191 C9          				ret
0446   0192             
0447   0192             				
0448   0192             				;; Sprite draw, normal
0449   0192             L0192:
0450   0192 C5          				push		bc							; bc = bytes wide, pix high
0451   0193 E5          				push		hl							; hl = screen loc
0452   0194             L0194:
0453   0194 1A          				ld			a,(de)					; Sprite byte
0454   0195 13          				inc			de
0455   0196 D3 03       				out			($03),a					; MB12421 data write
0456   0198 DB 03       				in			a,($03)					; MB12421 data read
0457   019A 77          				ld			(hl),a					; Write to RAM
0458   019B 23          				inc			hl
0459   019C 0D          				dec			c
0460   019D C2 94 01    				jp			nz,L0194				; Loop for width
0461   01A0             				
0462   01A0 AF          				xor			a
0463   01A1 D3 03       				out			($03),a					; MB12421 data write
0464   01A3 DB 03       				in			a,($03)					; MB12421 data read
0465   01A5 77          				ld			(hl),a					; Final write
0466   01A6 01 20 00    				ld			bc,$0020				; Row increment
0467   01A9 E1          				pop			hl
0468   01AA 09          				add			hl,bc						; Next row
0469   01AB C1          				pop			bc
0470   01AC 7D          				ld			a,l
0471   01AD E6 E0       				and			$E0
0472   01AF C2 92 01    				jp			nz,L0192				; Not end of screen
0473   01B2 7C          				ld			a,h
0474   01B3 1F          				rra
0475   01B4 DA 92 01    				jp			c,L0192					; Not end of screen
0476   01B7 C9          				ret
0477   01B8             
0478   01B8             				;; Sprite draw, flipped
0479   01B8             L01B8:
0480   01B8 C5          				push		bc
0481   01B9 E5          				push		hl
0482   01BA             L01BA:
0483   01BA 1A          				ld			a,(de)
0484   01BB 13          				inc			de
0485   01BC D3 03       				out			($03),a					; Shifter input
0486   01BE DB 00       				in			a,($00)					; Shifter output
0487   01C0 77          				ld			(hl),a					; Write to screen
0488   01C1 2B          				dec			hl
0489   01C2 0D          				dec			c
0490   01C3 C2 BA 01    				jp			nz,L01BA				; Loop for row
0491   01C6             	
0492   01C6 AF          				xor			a
0493   01C7 D3 03       				out			($03),a					; Shifter input 
0494   01C9 DB 00       				in			a,($00)					; Shifter output
0495   01CB 77          				ld			(hl),a					; Write to screen
0496   01CC 01 20 00    				ld			bc,$0020				; Next line
0497   01CF E1          				pop			hl
0498   01D0 09          				add			hl,bc
0499   01D1 C1          				pop			bc
0500   01D2 7D          				ld			a,l
0501   01D3 E6 E0       				and			$E0
0502   01D5 C2 B8 01    				jp			nz,L01B8				; Not end of screen
0503   01D8             	
0504   01D8 7C          				ld			a,h
0505   01D9 1F          				rra
0506   01DA DA B8 01    				jp			c,L01B8					; Not end of screen
0507   01DD C9          				ret
0508   01DE             
0509   01DE             			
0510   01DE             				;; 
0511   01DE             L01DE:
0512   01DE 7E          				ld			a,(hl)
0513   01DF A7          				and			a
0514   01E0 F0          				ret			p								; High bit clear = inactive
0515   01E1             	
0516   01E1 E5          				push		hl
0517   01E2 23          				inc			hl							; hl now delta X
0518   01E3 E6 07       				and			$07							; Mask low 3 bits 
0519   01E5 C2 ED 01    				jp			nz,L01ED				; (is a ship)
0520   01E8             
0521   01E8             				;; This is a missle?
0522   01E8 23          				inc			hl
0523   01E9 23          				inc			hl
0524   01EA C3 37 02    				jp			L0237
0525   01ED             	
0526   01ED             L01ED:
0527   01ED 7E          				ld			a,(hl)					; Delta X
0528   01EE 11 5F 21    				ld			de,$215F				; Table for +
0529   01F1 A7          				and			a
0530   01F2 F2 F8 01    				jp			p,L01F8
0531   01F5             	
0532   01F5 11 81 21    				ld			de,$2181				; Table for -
0533   01F8             L01F8:
0534   01F8 47          				ld			b,a							; b = delta x
0535   01F9 23          				inc			hl							; (hl) = X
0536   01FA 86          				add			a,(hl)					; a = x + dx
0537   01FB 77          				ld			(hl),a					; store x
0538   01FC 78          				ld			a,b							; a = delta X
0539   01FD A7          				and			a
0540   01FE 7E          				ld			a,(hl)					; a = X
0541   01FF F2 10 02    				jp			p,L0210					; (left to right)
0542   0202             	
0543   0202 FE 01       				cp			$01
0544   0204 D2 16 02    				jp			nc,L0216
0545   0207             	
0546   0207             L0207:
0547   0207 E3          				ex			(sp),hl
0548   0208 7E          				ld			a,(hl)
0549   0209 E6 BF       				and			$BF							; Clear bit 5 (Ship done?)
0550   020B 77          				ld			(hl),a
0551   020C E3          				ex			(sp),hl
0552   020D C3 16 02    				jp			L0216
0553   0210             	
0554   0210             L0210:
0555   0210 23          				inc			hl
0556   0211 BE          				cp			(hl)						; End X
0557   0212 2B          				dec			hl
0558   0213 D2 07 02    				jp			nc,L0207
0559   0216             				
0560   0216             L0216:
0561   0216 7E          				ld			a,(hl)
0562   0217 0F          				rrca
0563   0218 0F          				rrca
0564   0219 0F          				rrca
0565   021A E6 1F       				and			$1F							; High 5 bits of (hL)
0566   021C 83          				add			a,e
0567   021D 5F          				ld			e,a
0568   021E E3          				ex			(sp),hl
0569   021F 7E          				ld			a,(hl)
0570   0220 E3          				ex			(sp),hl
0571   0221 E6 07       				and			$07
0572   0223 47          				ld			b,a
0573   0224 23          				inc			hl
0574   0225 7E          				ld			a,(hl)
0575   0226 2F          				cpl
0576   0227 3C          				inc			a
0577   0228 0F          				rrca
0578   0229 0F          				rrca
0579   022A 0F          				rrca
0580   022B E6 07       				and			$07
0581   022D C6 03       				add			a,$03
0582   022F EB          				ex			de,hl
0583   0230             				
0584   0230             L0230:
0585   0230 70          				ld			(hl),b
0586   0231 23          				inc			hl
0587   0232 3D          				dec			a
0588   0233 C2 30 02    				jp			nz,L0230
0589   0236             				
0590   0236 EB          				ex			de,hl
0591   0237             
0592   0237             				;; Handle missiles?
0593   0237             L0237:
0594   0237 11 2F 20    				ld			de,$202F				; Ship launch dir?
0595   023A 1A          				ld			a,(de)
0596   023B 2F          				cpl											; Invert it
0597   023C 12          				ld			(de),a
0598   023D C2 47 02    				jp			nz,L0247
0599   0240             				
0600   0240 23          				inc			hl
0601   0241 7E          				ld			a,(hl)					; Delta X
0602   0242 23          				inc			hl
0603   0243 86          				add			a,(hl)					; X Pos
0604   0244 77          				ld			(hl),a					; X Pos
0605   0245 23          				inc			hl
0606   0246 BE          				cp			(hl)						; End X?
0607   0247             L0247:
0608   0247 E1          				pop  hl
0609   0248 37          				scf
0610   0249 C0          				ret  nz
0611   024A             				
0612   024A 7E          				ld			a,(hl)					; Flags
0613   024B E6 BF       				and			$BF							; Clear bit 5
0614   024D 77          				ld			(hl),a					; Flags
0615   024E 37          				scf
0616   024F C9          				ret
0617   0250             
0618   0250             				
0619   0250             				;; Handle torpedo
0620   0250             L0250:
0621   0250 7E          				ld			a,(hl)
0622   0251 A7          				and			a
0623   0252 F0          				ret			p								; D7 clear = inactive
0624   0253             				
0625   0253 E5          				push		hl
0626   0254 23          				inc			hl
0627   0255 23          				inc			hl
0628   0256 4E          				ld			c,(hl)					; +2
0629   0257 23          				inc			hl
0630   0258 23          				inc			hl
0631   0259 7E          				ld			a,(hl)					; +4 dx?
0632   025A 23          				inc			hl
0633   025B 46          				ld			b,(hl)					; +5 y?
0634   025C 80          				add			a,b
0635   025D 77          				ld			(hl),a					; +5
0636   025E 78          				ld			a,b
0637   025F FE C0       				cp			$C0
0638   0261 D2 09 03    				jp			nc,L0309				; Bigger
0639   0264             				
0640   0264 FE 30       				cp			$30
0641   0266 D2 75 02    				jp			nc,L0275
0642   0269             				
0643   0269 3A 24 20    				ld			a,($2024)				; Explosion timer?
0644   026C A7          				and			a
0645   026D CA 75 02    				jp			z,L0275
0646   0270             				
0647   0270 3C          				inc			a
0648   0271 3C          				inc			a
0649   0272 32 24 20    				ld			($2024),a				; Explosion timer?
0650   0275             				
0651   0275             L0275:
0652   0275 7E          				ld			a,(hl)					; +5
0653   0276 23          				inc			hl
0654   0277 BE          				cp			(hl)						; +6
0655   0278 D2 9C 02    				jp			nc,L029C
0656   027B             				
0657   027B 3E C0       				ld			a,$C0
0658   027D 86          				add			a,(hl)					; +6
0659   027E 77          				ld			(hl),a					; +6
0660   027F 2B          				dec			hl
0661   0280 2B          				dec			hl
0662   0281 34          				inc			(hl)						; +4
0663   0282 34          				inc			(hl)						; +4
0664   0283 7E          				ld			a,(hl)					; +4
0665   0284 23          				inc			hl
0666   0285 23          				inc			hl
0667   0286 23          				inc			hl
0668   0287 CA 96 02    				jp			z,L0296					; +7
0669   028A             				
0670   028A 36 88       				ld			(hl),SHOT1&$ff	; Change missile to SHOT1
0671   028C FE FC       				cp			$FC
0672   028E CA 9C 02    				jp			z,L029C
0673   0291             				
0674   0291 36 98       				ld			(hl),SHOT2&$ff	; Change missile to SHOT2
0675   0293 C3 9C 02    				jp			L029C
0676   0296             				
0677   0296             L0296:
0678   0296 E3          				ex			(sp),hl
0679   0297 7E          				ld			a,(hl)					; Flags 
0680   0298 E6 BF       				and			$BF							; Clear bit 5 
0681   029A 77          				ld			(hl),a
0682   029B E3          				ex			(sp),hl
0683   029C             				
0684   029C             L029C:
0685   029C 11 30 20    				ld			de,$2030				; Sprite shift
0686   029F 1A          				ld			a,(de)
0687   02A0 A7          				and			a
0688   02A1 C2 09 03    				jp			nz,L0309				; Shifted
0689   02A4             				
0690   02A4 3C          				inc			a
0691   02A5 12          				ld			(de),a					; Sprite shift
0692   02A6 78          				ld			a,b							; What is b?
0693   02A7 E6 10       				and			$10
0694   02A9 CA 09 03    				jp			z,L0309
0695   02AC             				
0696   02AC 11 07 00    				ld			de,$0007				; ?? Increment
0697   02AF 19          				add			hl,de
0698   02B0 7E          				ld			a,(hl)
0699   02B1 A7          				and			a
0700   02B2 C2 C3 02    				jp			nz,L02C3
0701   02B5             				
0702   02B5 19          				add			hl,de
0703   02B6 78          				ld			a,b
0704   02B7 83          				add			a,e
0705   02B8 47          				ld			b,a
0706   02B9 E6 10       				and			$10
0707   02BB CA 09 03    				jp			z,L0309
0708   02BE             				
0709   02BE 7E          				ld			a,(hl)
0710   02BF A7          				and			a
0711   02C0 CA 09 03    				jp			z,L0309
0712   02C3             				
0713   02C3             L02C3:
0714   02C3 E3          				ex			(sp),hl
0715   02C4 7E          				ld			a,(hl)					; Flags
0716   02C5 E6 BF       				and			$BF							; Clear bit 5
0717   02C7 77          				ld			(hl),a					; Flags
0718   02C8 E3          				ex			(sp),hl
0719   02C9 78          				ld			a,b
0720   02CA D6 40       				sub			$40
0721   02CC 47          				ld			b,a
0722   02CD DA E0 02    				jp			c,L02E0
0723   02D0             				
0724   02D0 21 A1 21    				ld			hl,$21A1				; ??
0725   02D3             L02D3:
0726   02D3 23          				inc			hl
0727   02D4 23          				inc			hl
0728   02D5 7E          				ld			a,(hl)
0729   02D6 A7          				and			a
0730   02D7 C2 D3 02    				jp			nz,L02D3
0731   02DA             				
0732   02DA 70          				ld			(hl),b
0733   02DB 23          				inc			hl
0734   02DC 71          				ld			(hl),c
0735   02DD C3 09 03    				jp			L0309
0736   02E0             				
0737   02E0             L02E0:
0738   02E0 21 BE 21    				ld			hl,$21BE				; ??
0739   02E3             L02E3:
0740   02E3 23          				inc			hl
0741   02E4 23          				inc			hl
0742   02E5 23          				inc			hl
0743   02E6 7E          				ld			a,(hl)
0744   02E7 A7          				and			a
0745   02E8 C2 E3 02    				jp			nz,L02E3
0746   02EB             				
0747   02EB 78          				ld			a,b
0748   02EC C6 20       				add			a,$20
0749   02EE 11 60 21    				ld			de,$2160
0750   02F1 FA F7 02    				jp			m,L02F7
0751   02F4             				
0752   02F4 11 82 21    				ld			de,$2182
0753   02F7             L02F7:
0754   02F7 79          				ld			a,c
0755   02F8 0F          				rrca
0756   02F9 0F          				rrca
0757   02FA 0F          				rrca
0758   02FB E6 1F       				and			$1F
0759   02FD 83          				add			a,e
0760   02FE 5F          				ld			e,a
0761   02FF 1A          				ld			a,(de)
0762   0300 A7          				and			a
0763   0301 CA 09 03    				jp			z,L0309
0764   0304 77          				ld			(hl),a
0765   0305 23          				inc			hl
0766   0306 71          				ld			(hl),c
0767   0307 23          				inc			hl
0768   0308 70          				ld			(hl),b
0769   0309             L0309:
0770   0309 37          				scf
0771   030A E1          				pop			hl
0772   030B C9          				ret
0773   030C             
0774   030C             				
0775   030C             				;; Erase ship from hl
0776   030C             L030C:
0777   030C 7E          				ld			a,(hl)					; Sprite flags
0778   030D A7          				and			a
0779   030E F0          				ret			p								; D7 clear = inactive
0780   030F             	
0781   030F E6 20       				and			$20
0782   0311 C8          				ret			z								; D5 clear = not sunk
0783   0312             	
0784   0312 CD 5B 03    				call		L035B						; Get de, bc from bytes 9-d
0785   0315             	
0786   0315 EB          				ex			de,hl						; hl = read de
0787   0316 41          				ld			b,c
0788   0317             				
0789   0317             L0317:
0790   0317 AF          				xor			a
0791   0318 E5          				push		hl							; Store loc
0792   0319             
0793   0319             				
0794   0319             				;; Clear c bytes at hl
0795   0319             L0319:
0796   0319 77          				ld			(hl),a
0797   031A 23          				inc			hl
0798   031B 0D          				dec			c
0799   031C C2 19 03    				jp			nz,L0319
0800   031F             	
0801   031F 11 20 00    				ld			de,$0020				; Line increment
0802   0322 E1          				pop			hl							; Get loc
0803   0323 19          				add			hl,de						; Next line
0804   0324 48          				ld			c,b
0805   0325 7D          				ld			a,l
0806   0326 E6 E0       				and			$E0
0807   0328 C2 17 03    				jp			nz,L0317				; Loop if not end of screen
0808   032B             				
0809   032B 7C          				ld			a,h
0810   032C 1F          				rra
0811   032D DA 17 03    				jp			c,L0317					; Loop if not end of screen
0812   0330             				
0813   0330 C9          				ret
0814   0331             
0815   0331             				
0816   0331             				;; Update sprites
0817   0331             L0331:
0818   0331 2A 14 20    				ld			hl,($2014)
0819   0334 06 0A       				ld			b,$0A						; Loop counter = 10 sprites
0820   0336 7D          				ld			a,l
0821   0337 B4          				or			h
0822   0338 C2 3E 03    				jp			nz,L033E
0823   033B             				
0824   033B 21 72 20    				ld			hl,$2072				; If 0 reset to $2072
0825   033E             L033E:
0826   033E 11 0D 00    				ld			de,$000D				; Sprite increment
0827   0341             L0341:
0828   0341 19          				add			hl,de
0829   0342 05          				dec			b
0830   0343 C8          				ret			z								; End of loop
0831   0344             	
0832   0344 7D          				ld			a,l
0833   0345 FE E7       				cp			$E7							; hl == $20E7?
0834   0347 C2 4D 03    				jp			nz,L034D
0835   034A             	
0836   034A 21 7F 20    				ld			hl,$207F				; Reset to $207F
0837   034D             L034D:
0838   034D 7E          				ld			a,(hl)					; X flags
0839   034E A7          				and			a
0840   034F F2 41 03    				jp			p,L0341					; D7 clear = not active
0841   0352             	
0842   0352 22 14 20    				ld			($2014),hl
0843   0355 23          				inc			hl
0844   0356 7E          				ld			a,(hl)					; Delta X
0845   0357 23          				inc			hl
0846   0358 86          				add			a,(hl)					; Add to X
0847   0359 77          				ld			(hl),a					; Store X
0848   035A C9          				ret
0849   035B             
0850   035B             				
0851   035B             				;; Load de, bc from ship data
0852   035B             L035B:
0853   035B 11 09 00    				ld			de,$0009
0854   035E 19          				add			hl,de
0855   035F 5E          				ld			e,(hl)
0856   0360 23          				inc			hl
0857   0361 56          				ld			d,(hl)
0858   0362 23          				inc			hl
0859   0363 4E          				ld			c,(hl)
0860   0364 23          				inc			hl
0861   0365 46          				ld			b,(hl)
0862   0366 23          				inc			hl
0863   0367 C9          				ret
0864   0368             
0865   0368             				
0866   0368             				;; Called from ISR
0867   0368             L0368:
0868   0368 3A 20 20    				ld			a,($2020)
0869   036B A7          				and			a
0870   036C C0          				ret			nz
0871   036D             				
0872   036D 47          				ld			b,a							; No ret, so a=0, b=0
0873   036E 21 03 20    				ld			hl,$2003				; Counter address
0874   0371 35          				dec			(hl)						; Decrement counter
0875   0372 C2 8E 03    				jp			nz,L038E
0876   0375             
0877   0375             				;; $2003 Counter zero
0878   0375 36 1E       				ld			(hl),$1E				; Reset counter
0879   0377 21 02 20    				ld			hl,GTIME				; Game timer
0880   037A 7E          				ld			a,(hl)				
0881   037B A7          				and			a
0882   037C CA 88 03    				jp			z,L0388					; Game over
0883   037F             			
0884   037F C6 99       				add			a,$99
0885   0381 27          				daa
0886   0382 77          				ld			(hl),a					; Decrement game timer
0887   0383 C2 88 03    				jp			nz,L0388
0888   0386             				
0889   0386 06 01       				ld			b,$01						; set d7 (eventually) = Game over
0890   0388             L0388:
0891   0388 21 10 20    				ld			hl,$2010
0892   038B CD AE 03    				call		L03AE						; Handle $2010 timer d6
0893   038E             
0894   038E             				;; Counter non-zero
0895   038E             L038E:
0896   038E 21 11 20    				ld			hl,$2011 			
0897   0391 CD AE 03    				call		L03AE						; Handle $2011 timer d5
0898   0394 21 21 20    				ld			hl,$2021
0899   0397 CD AE 03    				call		L03AE						; Handle $2021 timer d4
0900   039A 23          				inc			hl
0901   039B CD AE 03    				call		L03AE						; Handle $2022 timer d3
0902   039E 23          				inc			hl
0903   039F CD AE 03    				call		L03AE						; Handle $2023 timer d2
0904   03A2 23          				inc			hl
0905   03A3 CD AE 03    				call		L03AE 					; Handle $2024 timer d1
0906   03A6 23          				inc			hl
0907   03A7 CD AE 03    				call		L03AE						; Handle $2025 timer d0
0908   03AA 32 20 20    				ld			($2020),a
0909   03AD C9          				ret
0910   03AE             
0911   03AE             				
0912   03AE             				;; Decrement timer, set bit if 0
0913   03AE             L03AE:
0914   03AE 7E          				ld			a,(hl)
0915   03AF A7          				and			a
0916   03B0 CA B8 03    				jp			z,L03B8
0917   03B3             				
0918   03B3 35          				dec			(hl)
0919   03B4 C2 B8 03    				jp			nz,L03B8				; Carry clear since (hl) != 0
0920   03B7             				
0921   03B7 37          				scf											; Set carry
0922   03B8             L03B8:
0923   03B8 78          				ld			a,b			
0924   03B9 17          				rla											; Shift 0 into b unless carry set above
0925   03BA 47          				ld			b,a
0926   03BB C9          				ret
0927   03BC             
0928   03BC             				
0929   03BC             				;; Called from both interrupt routines
0930   03BC             				;; Updates and redraw "wave"
0931   03BC             L03BC:
0932   03BC 01 27 20    				ld			bc,$2027				; Wave state
0933   03BF 0A          				ld			a,(bc)
0934   03C0 C6 0A       				add			a,$0A						; $00 -> $0A -> $14 -> $1E = $00
0935   03C2 FE 1E       				cp			$1E
0936   03C4 C2 C8 03    				jp			nz,L03C8
0937   03C7             				
0938   03C7 AF          				xor			a								; A=0
0939   03C8             L03C8:
0940   03C8 02          				ld			(bc),a					; Store state
0941   03C9 03          				inc			bc							; $2028
0942   03CA 5F          				ld			e,a
0943   03CB 16 00       				ld			d,$00
0944   03CD 21 F3 0B    				ld			hl,WATER0				; Start of waves
0945   03D0 19          				add			hl,de
0946   03D1 EB          				ex			de,hl						; de = wave table entry
0947   03D2             				
0948   03D2 0A          				ld			a,(bc)					; Get state
0949   03D3 3C          				inc			a
0950   03D4 E6 1F       				and			$1F							; Loops $00 to $1F
0951   03D6 02          				ld			(bc),a					; Save state
0952   03D7             
0953   03D7             				;; Screen location
0954   03D7 21 E0 27    				ld			hl,$27E0
0955   03DA 85          				add			a,l
0956   03DB 6F          				ld			l,a
0957   03DC 01 20 00    				ld			bc,$0020				; Row increment
0958   03DF             L03DF:
0959   03DF 1A          				ld			a,(de)					; Get byte
0960   03E0 13          				inc			de
0961   03E1 77          				ld			(hl),a					; Write byte
0962   03E2 09          				add			hl,bc						; Next row
0963   03E3 7D          				ld			a,l
0964   03E4 E6 E0       				and			$E0
0965   03E6 FE 60       				cp			$60							; Only 4 rows used?
0966   03E8 C2 DF 03    				jp			nz,L03DF				; Loop
0967   03EB             				
0968   03EB C9          				ret
0969   03EC             
0970   03EC             				;; Test mode
0971   03EC             L03EC:
0972   03EC 21 00 00    				ld			hl,L0000				; Start address
0973   03EF 11 00 00    				ld			de,$0000				; Offset 0
0974   03F2 0E 02       				ld			c,$02						; Until $0200
0975   03F4             L03F4:
0976   03F4 AF          				xor  a									; Clear checksum
0977   03F5             L03F5:
0978   03F5 86          				add			a,(hl)
0979   03F6 23          				inc			hl
0980   03F7 47          				ld			b,a
0981   03F8 79          				ld			a,c
0982   03F9 BC          				cp			h
0983   03FA 78          				ld			a,b
0984   03FB C2 F5 03    				jp			nz,L03F5				; Loop
0985   03FE             	
0986   03FE E5          				push		hl							; Push address
0987   03FF 21 29 04    				ld			hl,L0429				; Checksum table
0988   0402 19          				add			hl,de
0989   0403 BE          				cp			(hl)						; Compare checksum
0990   0404 3E 40       				ld			a,$40						; (Space)
0991   0406 CA 0E 04    				jp			z,L040E					; Checksum good!
0992   0409             				
0993   0409 21 32 04    				ld			hl,L0432				; Bad checksum table
0994   040C 19          				add			hl,de
0995   040D 7E          				ld			a,(hl)
0996   040E             				
0997   040E             L040E:
0998   040E 21 E9 21    				ld			hl,TXTBUF				; Text buffer
0999   0411 19          				add			hl,de
1000   0412 77          				ld			(hl),a					; Store char
1001   0413             	
1002   0413 E1          				pop			hl							; Get address back
1003   0414 13          				inc			de							; Next rom
1004   0415 0C          				inc			c								; $2 more pages
1005   0416 0C          				inc			c
1006   0417 3E 12       				ld			a,$12
1007   0419 B9          				cp			c
1008   041A C2 F4 03    				jp			nz,L03F4				; Loop if not done
1009   041D             	
1010   041D 21 E9 21    				ld			hl,TXTBUF				; Text buffer
1011   0420 11 08 30    				ld			de,$3008				; Location
1012   0423 3E 08       				ld			a,$08						; Length
1013   0425 CD 30 0B    				call		L0B30						; Draw string hl @ de, length a
1014   0428 76          				halt										; Stop!
1015   0429             				
1016   0429             
1017   0429             				;; $200 block checksums
1018   0429             L0429:
1019   0429 8D 79 00 1F 				.db			$8D, $79, $00, $1F, $58, $6D, $EA, $C5	; Checksums
1019   042D 58 6D EA C5 
1020   0431             	
1021   0431 2A          				.db			$2A							; Patch byte for $400 checksum
1022   0432             
1023   0432             				;; Error locations
1024   0432             L0432:
1025   0432 48 48 47 47 				.db			$48, $48, $47, $47, $46, $46, $45, $45	; HHGGFFEE
1025   0436 46 46 45 45 
1026   043A             
1027   043A             				;; Initial jump
1028   043A             L043A:
1029   043A CD A2 08    				call		 L08A2					; (End of game routine)
1030   043D DB 02       				in			a,($02)					; IN2
1031   043F E6 E0       				and			$E0							; Test mode bits
1032   0441 FE E0       				cp			$E0
1033   0443 CC EC 03    				call		z,L03EC					; Go to test mode
1034   0446             
1035   0446             				;; Clear $2002-$200a
1036   0446 21 02 20    				ld			hl,GTIME
1037   0449 3E 09       				ld			a,$09
1038   044B 06 00       				ld			b,$00
1039   044D             L044D:
1040   044D 70          				ld			(hl),b
1041   044E 23          				inc			hl
1042   044F 3D          				dec			a
1043   0450 C2 4D 04    				jp			nz,L044D
1044   0453             	
1045   0453 21 29 09    				ld			hl,L0929				; Attract mode loop
1046   0456 22 00 20    				ld			($2000),hl
1047   0459             				
1048   0459             L0459:
1049   0459 FB          				ei											; Enable interrupts
1050   045A 21 59 04    				ld			hl,L0459				; Return address
1051   045D E5          				push		hl
1052   045E 2A 00 20    				ld			hl,($2000)
1053   0461 7E          				ld			a,(hl)					; Get command
1054   0462 A7          				and			a
1055   0463 C2 7D 04    				jp			nz,L047D				; Non-zero command
1056   0466             
1057   0466             				;; a=(($2000)) == 0
1058   0466             				;; Command 0
1059   0466 CD A4 06    				call		L06A4
1060   0469 CD CE 04    				call		L04CE
1061   046C CD BF 04    				call		L04BF
1062   046F 3A 02 20    				ld			a,(GTIME)				; Game timer
1063   0472 A7          				and			a
1064   0473 C8          				ret			z								; Skip rest if game over
1065   0474             	
1066   0474 CD 4C 07    				call		L074C
1067   0477 CD B8 08    				call		L08B8
1068   047A C3 8C 04    				jp			L048C
1069   047D             
1070   047D             				
1071   047D             				;; Do command from jump table
1072   047D             				;; a=(($2000)) != 0
1073   047D             L047D:
1074   047D 23          				inc			hl
1075   047E EB          				ex			de,hl						; ($2000+1) --> de
1076   047F 21 E8 09    				ld			hl,TBLJMP-2			; Jump table
1077   0482 07          				rlca										; a = ($2000)<<1
1078   0483 4F          				ld			c,a							; c = ($2000)<<1
1079   0484 06 00       				ld			b,$00
1080   0486 09          				add			hl,bc						; hl = L09e8 + ($2000)<<1
1081   0487 7E          				ld			a,(hl)
1082   0488 23          				inc			hl
1083   0489 66          				ld			h,(hl)
1084   048A 6F          				ld			l,a
1085   048B E9          				jp			(hl)
1086   048C             				
1087   048C             	
1088   048C             L048C:
1089   048C 3A 03 20    				ld			a,($2003)
1090   048F FE 1D       				cp			$1D
1091   0491 F8          				ret			m								; Only update once per loop
1092   0492             				
1093   0492 01 02 20    				ld			bc,GTIME				; Game time
1094   0495 11 E9 21    				ld			de,TXTBUF				; Text buffer
1095   0498 CD 82 0A    				call		L0A82						; BCD to buffer
1096   049B EB          				ex			 de,hl
1097   049C CD 7A 0A    				call		L0A7A
1098   049F             				
1099   049F 23          				inc			hl
1100   04A0 36 2C       				ld			(hl),$2C				; Space
1101   04A2 23          				inc			hl
1102   04A3 EB          				ex			de,hl
1103   04A4 01 2B 20    				ld			bc,PSCORE				; Player score
1104   04A7             				
1105   04A7 CD 82 0A    				call		L0A82						; BCD to buffer
1106   04AA EB          				ex			de,hl
1107   04AB CD 7A 0A    				call		L0A7A
1108   04AE 23          				inc			hl
1109   04AF 36 30       				ld			(hl),$30				; Postpend zero
1110   04B1 23          				inc			hl
1111   04B2 36 30       				ld			(hl),$30				; Postpend zero
1112   04B4             				
1113   04B4 21 E9 21    				ld			hl,TXTBUF				; Text buffer
1114   04B7 11 2F 3E    				ld			de,$3E2F				; Screen location
1115   04BA 3E 06       				ld			a,$06						; Length
1116   04BC C3 30 0B    				jp			L0B30						; Draw string hl @ de, length a
1117   04BF             
1118   04BF             								
1119   04BF             L04BF:
1120   04BF 21 2A 20    				ld			hl,$202A				; Duplicate game time
1121   04C2 7E          				ld			a,(hl)
1122   04C3 A7          				and			a
1123   04C4 C8          				ret			z								; Already zero
1124   04C5             				
1125   04C5 36 00       				ld			(hl),$00				; Clear
1126   04C7 21 A6 09    				ld			hl,L09A6				; Game over mode
1127   04CA 22 00 20    				ld			($2000),hl			; Write mode
1128   04CD C9          				ret
1129   04CE             
1130   04CE             				;; Choose subroutine based on $2020 bits
1131   04CE             L04CE:
1132   04CE 21 20 20    				ld			hl,$2020
1133   04D1 7E          				ld			a,(hl)
1134   04D2 A7          				and			a
1135   04D3 C8          				ret			z								; Nothing to do
1136   04D4 36 00       				ld			(hl),$00				; Clear all bits
1137   04D6             				
1138   04D6 1F          				rra
1139   04D7 DC 01 06    				call		c,L0601					; Bit 0 set = Clear explosion lights
1140   04DA             				
1141   04DA 1F          				rra
1142   04DB DC 0E 06    				call		c,L060E					; Bit 1 set = Clear explosion on screen
1143   04DE             				
1144   04DE 1F          				rra
1145   04DF DC F7 04    				call		c,L04F7					; Bit 2 set = Trigger bit 2 sound
1146   04E2             				
1147   04E2 1F          				rra
1148   04E3 DC 34 06    				call		c,L0634					; Bit 3 set = Launch new ship
1149   04E6             				
1150   04E6 1F          				rra
1151   04E7 DC E9 05    				call		c,L05E9					; Bit 4 set = Reload torpedos
1152   04EA             				
1153   04EA 1F          				rra
1154   04EB DC 73 05    				call		c,L0573					; Bit 5 set = Increment $2000 address
1155   04EE             				
1156   04EE 1F          				rra
1157   04EF DC 6C 05    				call		c,L056C					; Bit 6 set = Initialize $2000 address
1158   04F2             				
1159   04F2 1F          				rra
1160   04F3 DC 11 05    				call		c,L0511					; Bit 7 set = Game time over
1161   04F6 C9          				ret
1162   04F7             
1163   04F7             				
1164   04F7             				;; Bit 2 set on $2020
1165   04F7             				;; Trigger bit 2 sound and set timers
1166   04F7             L04F7:
1167   04F7 F5          				push		af
1168   04F8 21 26 20    				ld			hl,$2026
1169   04FB 7E          				ld			a,(hl)
1170   04FC A7          				and			a
1171   04FD CA 0F 05    				jp			z,L050F					; Do nothing
1172   0500             	
1173   0500 35          				dec			(hl)
1174   0501 3E 04       				ld			a,$04						; Sound bit 2
1175   0503 D3 05       				out			($05),a					; Audio outputs
1176   0505 3E 19       				ld			a,$19
1177   0507 32 23 20    				ld			($2023),a				; Set timer
1178   050A 3E 0F       				ld			a,$0F
1179   050C 32 25 20    				ld			($2025),a				; Set timer
1180   050F             L050F:
1181   050F F1          				pop  af
1182   0510 C9          				ret
1183   0511             
1184   0511             				
1185   0511             				;; Bit 7 set on $2020
1186   0511             L0511:
1187   0511 21 2E 20    				ld			hl,$202E
1188   0514 7E          				ld			a,(hl)
1189   0515 A7          				and			a
1190   0516 C2 3D 05    				jp			nz,L053D				; Jump if already extended time
1191   0519             	
1192   0519 36 01       				ld			(hl),$01				; Only 1 extend
1193   051B 3A 07 20    				ld			a,(IN1)					; Last IN1
1194   051E 0F          				rrca
1195   051F E6 70       				and			$70							; Base score for extended time (00 = none)
1196   0521 CA 3D 05    				jp			z,L053D					; Jump if no extended time
1197   0524             	
1198   0524 C6 09       				add			a,$09						; $20 dip = $19(00) score
1199   0526 21 2B 20    				ld			hl,PSCORE				; Player score
1200   0529 BE          				cp			(hl)
1201   052A D2 3D 05    				jp			nc,L053D				; Jump if score lower than metric
1202   052D             	
1203   052D 3E 20       				ld			a,$20						; 20 extra seconds
1204   052F 32 02 20    				ld			(GTIME),a				; Set game time
1205   0532 21 33 0F    				ld			hl,LTEXT				; EXTENDED_TIME
1206   0535 11 03 3C    				ld			de,$3C03				; Location
1207   0538 3E 0C       				ld			a,$0C						; Length
1208   053A C3 30 0B    				jp			L0B30						; Draw string hl @ de, length a
1209   053D             	
1210   053D             L053D:
1211   053D 21 C9 20    				ld			hl,TORPS-TINC		; (Offset) Torp base
1212   0540 01 1E 00    				ld			bc,TINC					; Torp increment
1213   0543             L0543:
1214   0543 09          				add			hl,bc
1215   0544 7D          				ld			a,l
1216   0545 FE 5F       				cp			$5F							; LSB past end of torps
1217   0547 CA 5C 05    				jp			z,L055C					; Done with torps
1218   054A             	
1219   054A 7E          				ld			a,(hl)					; Load flags
1220   054B A7          				and			a
1221   054C F2 43 05    				jp			p,L0543					; Loop if not active
1222   054F             	
1223   054F AF          				xor			a
1224   0550 32 21 20    				ld			($2021),a
1225   0553 32 2D 20    				ld			($202D),a				; Torpedo status
1226   0556 3E 01       				ld			a,$01
1227   0558 32 02 20    				ld			(GTIME),a				; Why are we adding a second?
1228   055B C9          				ret
1229   055C             
1230   055C             				;; Check if new high score
1231   055C             L055C:
1232   055C 21 29 09    				ld			hl,L0929
1233   055F 22 00 20    				ld			($2000),hl			; Next command
1234   0562 3A 2B 20    				ld			a,(PSCORE)			; Player score
1235   0565 21 06 20    				ld			hl,HSCORE				; High score
1236   0568 BE          				cp			(hl)
1237   0569 D8          				ret			c
1238   056A 77          				ld			(hl),a					; Write new score
1239   056B C9          				ret
1240   056C             
1241   056C             				
1242   056C             				;; Bit 6 set on $2020
1243   056C             				;; Initialize $2000 address
1244   056C             L056C:
1245   056C 21 63 09    				ld			hl,L0963				; End of game
1246   056F 22 00 20    				ld			($2000),hl
1247   0572 C9          				ret
1248   0573             
1249   0573             				
1250   0573             				;; Bit 5 set on $2020
1251   0573             				;; Increment $2000 address
1252   0573             L0573:
1253   0573 2A 00 20    				ld			hl,($2000)			; After 2011 timer?
1254   0576 23          				inc			hl
1255   0577 22 00 20    				ld			($2000),hl
1256   057A C9          				ret
1257   057B             
1258   057B             				
1259   057B             				;; Handle change in fire button
1260   057B             HFIRE:
1261   057B C8          				ret			z								; Not pressed
1262   057C             				
1263   057C 3A 02 20    				ld			a,(GTIME)				; Game timer
1264   057F A7          				and			a	
1265   0580 C8          				ret			z								; Not in game mode
1266   0581             	
1267   0581 3A 21 20    				ld			a,($2021)				; Timer between torps
1268   0584 A7          				and			a
1269   0585 C0          				ret			nz							; Missile already active? 
1270   0586             	
1271   0586 21 2D 20    				ld			hl,$202D				; Torpedo status
1272   0589 7E          				ld			a,(hl)
1273   058A E6 1F       				and			$1F
1274   058C C8          				ret			z								; Reloading...
1275   058D             	
1276   058D 7E          				ld			a,(hl)					; Torpedo status
1277   058E E6 0F       				and			$0F							; Mask torp bits
1278   0590 1F          				rra
1279   0591 06 20       				ld			b,$20						; Bit 5 = Reload
1280   0593 A7          				and			a
1281   0594 CA 99 05    				jp			z,L0599
1282   0597             	
1283   0597 06 10       				ld			b,$10						; Bit 4 = Ready
1284   0599             L0599:
1285   0599 B0          				or			b
1286   059A 77          				ld			(hl),a
1287   059B D3 02       				out			($02),a					; Torpedo display
1288   059D 21 21 20    				ld			hl,$2021				; Timer between torps
1289   05A0 36 08       				ld			(hl),$08				; Short timer between shots
1290   05A2 E6 10       				and			$10
1291   05A4 C2 A9 05    				jp			nz,L05A9	
1292   05A7             	
1293   05A7 36 3C       				ld			(hl),$3C				; Long timer to reload
1294   05A9             L05A9:
1295   05A9 3E 02       				ld			a,$02						; Sound bit 1 
1296   05AB D3 05       				out			($05),a					; Audio outputs
1297   05AD 3E 0F       				ld			a,$0F
1298   05AF 32 25 20    				ld			($2025),a				; Set timer
1299   05B2             
1300   05B2             				;; Find empty slot
1301   05B2 21 C9 20    				ld			hl,TORPS-TINC 	; (Offset) Torp base
1302   05B5 11 1E 00    				ld			de,TINC 				; Torpedo increment
1303   05B8             L05B8:
1304   05B8 19          				add			hl,de
1305   05B9 7E          				ld			a,(hl)
1306   05BA A7          				and			a
1307   05BB FA B8 05    				jp			m,L05B8					; D7 high = used, try again
1308   05BE             
1309   05BE             				;; New torpedo
1310   05BE 11 08 00    				ld			de,$0008
1311   05C1 19          				add			hl,de						; Move ahead in sprite table
1312   05C2 36 0E       				ld			(hl),SHOT0>>8		; SHOT0 MSB
1313   05C4 2B          				dec			 hl
1314   05C5 36 75       				ld			(hl),SHOT0&$FF	; SHOT0 LSB
1315   05C7 2B          				dec			hl
1316   05C8 36 9C       				ld			(hl),$9C				; ??
1317   05CA 2B          				dec			hl
1318   05CB 36 E0       				ld			(hl),$E0				; Y pos
1319   05CD 2B          				dec			hl
1320   05CE 36 FA       				ld			(hl),$FA				; Delta y
1321   05D0 2B          				dec			hl
1322   05D1 2B          				dec			hl
1323   05D2             
1324   05D2             				;; Caculate shot X location
1325   05D2 11 5E 0F    				ld			de,TGREY				; Grey code table?
1326   05D5 EB          				ex			de,hl
1327   05D6 3A 08 20    				ld			a,(IN0)					; Last IN0
1328   05D9 E6 1F       				and			$1F							; Mask periscope bits
1329   05DB 4F          				ld			c,a
1330   05DC 06 00       				ld			b,$00
1331   05DE 09          				add			hl,bc
1332   05DF 7E          				ld			a,(hl)					; Location from grey code
1333   05E0 EB          				ex			de,hl
1334   05E1             				
1335   05E1 77          				ld			(hl),a					; X Pos
1336   05E2 2B          				dec			hl
1337   05E3 36 00       				ld			(hl),$00				; Delta X
1338   05E5 2B          				dec			hl
1339   05E6 36 C0       				ld			(hl),$C0				; Set active
1340   05E8 C9          				ret
1341   05E9             
1342   05E9             				
1343   05E9             				;; Bit 4 set on $2020
1344   05E9             				;; Reset torpedo status after reload
1345   05E9             L05E9:
1346   05E9 F5          				push		af
1347   05EA 21 2D 20    				ld			hl,$202D				; Torpedo status
1348   05ED 7E          				ld			a,(hl)
1349   05EE E6 10       				and			$10							; Check ready
1350   05F0 C2 FF 05    				jp			nz,L05FF
1351   05F3             	
1352   05F3 3E 1F       				ld			a,$1F						; Reset torpedo status
1353   05F5 D3 02       				out			($02),a					; Torpedo lamps
1354   05F7 77          				ld			(hl),a
1355   05F8 3E 08       				ld			a,$08						; Sound bit 3
1356   05FA D3 05       				out			($05),a					; Audio outputs
1357   05FC CD EA 07    				call		L07EA						; Redraw mines
1358   05FF             				
1359   05FF             L05FF:
1360   05FF F1          				pop			af
1361   0600 C9          				ret
1362   0601             
1363   0601             				;; Bit 0 set on $2020
1364   0601             				;; Clear explosions
1365   0601             L0601:
1366   0601 F5          				push		af
1367   0602 AF          				xor			a								; Clear sounds
1368   0603 D3 05       				out			($05),a					; Audio outputs
1369   0605 D3 01       				out			($01),a					; Explosion lamp
1370   0607 3A 2D 20    				ld			a,($202D)				; Torpedo status
1371   060A D3 02       				out			($02),a					; Periscope lamp
1372   060C F1          				pop  af
1373   060D C9          				ret
1374   060E             
1375   060E             				
1376   060E             				;; Bit 1 set on $2020
1377   060E             				;; Clear sprites?
1378   060E             L060E:
1379   060E F5          				push		af
1380   060F 21 F0 21    				ld			hl,$21F0
1381   0612             L0612:
1382   0612 7E          				ld			a,(hl)
1383   0613 A7          				and			a
1384   0614 CA 32 06    				jp			z,L0632					; Already cleared
1385   0617             
1386   0617             				;; (hl) -> de, clear (hl)
1387   0617 36 00       				ld			(hl),$00
1388   0619 23          				inc			hl
1389   061A 57          				ld			d,a
1390   061B 5E          				ld			e,(hl)
1391   061C 36 00       				ld			(hl),$00
1392   061E 23          				inc			hl
1393   061F             				
1394   061F FE 2C       				cp			$2C
1395   0621 01 03 0A    				ld			bc,$0A03				; 10 x 3 byte area  (after ship hit)
1396   0624 DA 2A 06    				jp			c,L062A
1397   0627             				
1398   0627 01 05 20    				ld			bc,$2005				; 32 x 5 byte area  (after mine hit)
1399   062A             L062A:
1400   062A EB          				ex			de,hl
1401   062B CD 3F 0A    				call		L0A3F						; Clear area at hl
1402   062E EB          				ex			de,hl
1403   062F C3 12 06    				jp			L0612						; Loop
1404   0632             L0632:
1405   0632 F1          				pop			af
1406   0633 C9          				ret
1407   0634             
1408   0634             				;; Bit 3 set on $2020
1409   0634             				;; Launch new ship
1410   0634             L0634:
1411   0634 F5          				push		af
1412   0635 3A 03 20    				ld			a,($2003)
1413   0638 E6 0F       				and			$0F							; Mask low 4 bits
1414   063A F6 50       				or			$50							; Set bits 6,4
1415   063C 32 22 20    				ld			($2022),a				; Set counter
1416   063F             	
1417   063F 01 29 20    				ld			bc,$2029				; Ship type loc
1418   0642 0A          				ld			a,(bc)					; Get ship index
1419   0643 3C          				inc			a								; Increment
1420   0644 FE 07       				cp			$07							; Max = 6
1421   0646 C2 4A 06    				jp			nz,L064A
1422   0649             				
1423   0649 AF          				xor			a								; Set to 0
1424   064A             L064A:
1425   064A 02          				ld			(bc),a					; Store ship index
1426   064B             	
1427   064B 21 DE 0F    				ld			hl,L0FDE				; Ship type table
1428   064E 85          				add			a,l
1429   064F 6F          				ld			l,a
1430   0650 7E          				ld			a,(hl)					; Get ship type
1431   0651 47          				ld			b,a							; Stash in b
1432   0652 FE 06       				cp			$06							; Is small / fast?
1433   0654 C2 6B 06    				jp			nz,L066B				; No = jump
1434   0657             	
1435   0657 3E 04       				ld			a,$04						; Sound bit 2
1436   0659 D3 05       				out			($05),a					; Audio outputs
1437   065B 3E 19       				ld			a,$19
1438   065D 32 23 20    				ld			($2023),a				; Set timer
1439   0660 3E 02       				ld			a,$02
1440   0662 32 26 20    				ld			($2026),a				; Set timer
1441   0665 3E 0F       				ld			a,$0F
1442   0667 32 25 20    				ld			($2025),a				; Set timer
1443   066A 78          				ld			a,b							; Ship type
1444   066B             	
1445   066B             				;; hl = $202c + $0d * a 
1446   066B             L066B:
1447   066B 21 2C 20    				ld			hl,$202C
1448   066E 11 0D 00    				ld			de,$000D				; Sprite increment
1449   0671             L0671:
1450   0671 19          				add			hl,de
1451   0672 3D          				dec			a
1452   0673 C2 71 06    				jp			nz,L0671
1453   0676             	
1454   0676 78          				ld			a,b
1455   0677 EB          				ex			de,hl
1456   0678             	
1457   0678 21 1E 20    				ld			hl,$201E				; Current ship move index
1458   067B 7E          				ld			a,(hl)					; Read ship move index
1459   067C 34          				inc			(hl)						; Increment ship move index
1460   067D 21 7E 0F    				ld			hl,L0F7E				; Even ship move table?
1461   0680 1F          				rra
1462   0681 D2 8B 06    				jp			nc,L068B
1463   0684             	
1464   0684 21 AE 0F    				ld			hl,L0FAE				; Odd ship move table?
1465   0687 78          				ld			a,b
1466   0688 F6 10       				or			$10							; Set direction bit
1467   068A 47          				ld			b,a
1468   068B             	
1469   068B             L068B:
1470   068B 78          				ld			a,b
1471   068C             
1472   068C             				;; Index into ship type table
1473   068C 3D          				dec  a									; a = 0-5 / 10-15
1474   068D 07          				rlca
1475   068E 07          				rlca
1476   068F 07          				rlca
1477   0690 E6 38       				and			$38							; Clear low bits
1478   0692 85          				add			a,l
1479   0693 6F          				ld			l,a
1480   0694             
1481   0694             				;; Copy ship table data to sprite block
1482   0694 0E 08       				ld   c,$08
1483   0696             L0696:
1484   0696 7E          				ld			a,(hl)
1485   0697 23          				inc			hl
1486   0698 12          				ld			(de),a
1487   0699 1B          				dec			de
1488   069A 0D          				dec			c
1489   069B C2 96 06    				jp			nz,L0696
1490   069E             	
1491   069E 78          				ld			a,b
1492   069F F6 C0       				or			$C0							; B7 = moving, B6 = don't clear, B5 = ??
1493   06A1 12          				ld			(de),a					; Store ship type?
1494   06A2 F1          				pop			af
1495   06A3 C9          				ret
1496   06A4             
1497   06A4             				;; Called when (($2000)) == 0
1498   06A4             L06A4:
1499   06A4 21 C1 21    				ld			hl,$21C1				; Start of sprite index list
1500   06A7             L06A7:
1501   06A7 7E          				ld			a,(hl)
1502   06A8 A7          				and			a
1503   06A9 C8          				ret			z								; Done if this sprite inactive
1504   06AA             	
1505   06AA 36 00       				ld			(hl),$00				; Clear active flag
1506   06AC 23          				inc			hl
1507   06AD 56          				ld			d,(hl)					; Get index into sprite table
1508   06AE E5          				push		hl
1509   06AF             
1510   06AF             				;; hl = $2024 + $d * a
1511   06AF 21 24 20    				ld			hl,SHIPA0-SINC	; No 0 element
1512   06B2 01 0D 00    				ld			bc,$000D				; Sprite entry length
1513   06B5             L06B5:
1514   06B5 09          				add			hl,bc
1515   06B6 3D          				dec			a
1516   06B7 C2 B5 06    				jp			nz,L06B5
1517   06BA             	
1518   06BA 01 08 00    				ld			bc,$0008				; Middle of sprite table and work back
1519   06BD 09          				add			hl,bc
1520   06BE             
1521   06BE             				;; Change sprite to sinking ship
1522   06BE 36 0E       				ld			(hl),SINK>>8		; SINK MSB
1523   06C0 2B          				dec			hl
1524   06C1 36 55       				ld			(hl),SINK&$FF		; SINK LSB
1525   06C3 2B          				dec			hl
1526   06C4 2B          				dec			hl							; hl = Y pos
1527   06C5 2B          				dec			hl
1528   06C6 36 01       				ld			(hl),$01				; Delta y (?)
1529   06C8 2B          				dec			hl							; hl = Y flags
1530   06C9 2B          				dec			hl
1531   06CA 72          				ld			(hl),d					; X position
1532   06CB 2B          				dec			hl
1533   06CC 36 00       				ld			(hl),$00				; Delta x (?)
1534   06CE 2B          				dec			hl
1535   06CF 46          				ld			b,(hl)					; Get flags + ship type
1536   06D0 36 E0       				ld			(hl),$E0				; Flags
1537   06D2             	
1538   06D2 3A 02 20    				ld			a,(GTIME)				; Game time
1539   06D5 A7          				and			a
1540   06D6 C2 DB 06    				jp			nz,L06DB				; Add score if time is left
1541   06D9 E1          				pop			hl
1542   06DA C9          				ret
1543   06DB             
1544   06DB             
1545   06DB             				;; Score sunk ship
1546   06DB             L06DB:
1547   06DB 78          				ld   a,b
1548   06DC             
1549   06DC             				;; Draw sunk ship score
1550   06DC 01 57 0F    				ld			bc,TSCORE-1			; Ship hit score table
1551   06DF E6 07       				and			$07
1552   06E1 81          				add			a,c
1553   06E2 4F          				ld			c,a							; bc = index into table	
1554   06E3             	
1555   06E3 11 E9 21    				ld			de,TXTBUF				; Text buffer
1556   06E6 CD 82 0A    				call		L0A82						; BCD to buffer
1557   06E9 3E 30       				ld			a,$30
1558   06EB 12          				ld			(de),a					; Append 0
1559   06EC 13          				inc			de
1560   06ED 12          				ld			(de),a					; Append 0
1561   06EE             				
1562   06EE 0A          				ld			a,(bc)
1563   06EF 21 2B 20    				ld			hl,PSCORE				; Player score
1564   06F2 86          				add			a,(hl)					; Add a
1565   06F3 27          				daa
1566   06F4 77          				ld			(hl),a					; Store
1567   06F5 E1          				pop			hl
1568   06F6 4E          				ld			c,(hl)					; Get bc from table
1569   06F7 23          				inc			hl
1570   06F8 46          				ld			b,(hl)
1571   06F9 23          				inc			hl
1572   06FA             				
1573   06FA E5          				push		hl
1574   06FB 78          				ld			a,b
1575   06FC C6 20       				add			a,$20
1576   06FE 21 C2 09    				ld			hl,L09C2				; Explosion lamp 0-7 table
1577   0701 DA 07 07    				jp			c,L0707
1578   0704             				
1579   0704 21 BA 09    				ld			hl,L09BA				; Explosion lamp 8-F table
1580   0707             L0707:
1581   0707             				;; Use 3 MSBs of c to index into table
1582   0707 79          				ld			a,c
1583   0708 07          				rlca
1584   0709 07          				rlca
1585   070A 07          				rlca
1586   070B E6 07       				and			$07
1587   070D 85          				add			a,l
1588   070E 6F          				ld			l,a
1589   070F 7E          				ld			a,(hl)
1590   0710 D3 01       				out			($01),a					; Explosion lamp
1591   0712 3E 01       				ld			a,$01						; Sound bit 0
1592   0714 D3 05       				out			($05),a					; Audio write
1593   0716 3E 1E       				ld			a,$1E
1594   0718 32 25 20    				ld			($2025),a				; Set audio timer
1595   071B             
1596   071B             				;; Calculate score draw location
1597   071B 78          				ld			a,b
1598   071C 16 24       				ld			d,$24
1599   071E C6 20       				add			a,$20
1600   0720 FA 25 07    				jp			m,L0725
1601   0723 16 28       				ld			d,$28
1602   0725             L0725:
1603   0725 79          				ld			a,c
1604   0726 0F          				rrca
1605   0727 0F          				rrca
1606   0728 0F          				rrca
1607   0729 E6 1F       				and			$1F
1608   072B CA 2F 07    				jp			z,L072F
1609   072E 3D          				dec			a
1610   072F             L072F:
1611   072F FE 1E       				cp			$1E
1612   0731 C2 35 07    				jp			nz,L0735
1613   0734 3D          				dec			a
1614   0735             L0735:
1615   0735 F6 A0       				or			$A0							; Set bits 7,5 
1616   0737 5F          				ld			e,a
1617   0738             				
1618   0738 CD DB 07    				call		L07DB						; Find first de?
1619   073B             				
1620   073B 3E 2D       				ld			a,$2D
1621   073D 32 24 20    				ld			($2024),a				; Set timer (for showing score)
1622   0740 21 EA 21    				ld			hl,TXTBUF1			; Buffer?
1623   0743 3E 03       				ld			a,$03						; Length
1624   0745 CD 30 0B    				call		L0B30						; Draw string hl @ de, length a
1625   0748             				
1626   0748 E1          				pop			hl
1627   0749 C3 A7 06    				jp			L06A7
1628   074C             	
1629   074C             L074C:
1630   074C 21 A3 21    				ld			hl,$21A3				; ??
1631   074F             L074F:
1632   074F 7E          				ld			a,(hl)
1633   0750 A7          				and			a
1634   0751 C8          				ret			z
1635   0752             	
1636   0752 23          				inc			hl
1637   0753 C6 10       				add			a,$10
1638   0755 07          				rlca
1639   0756 07          				rlca
1640   0757 07          				rlca
1641   0758 E6 07       				and			$07
1642   075A 11 67 20    				ld			de,$2067				; ??
1643   075D 01 0D 00    				ld			bc,$000D				; Sprite increment
1644   0760 EB          				ex			de,hl
1645   0761             L0761:
1646   0761 09          				add			hl,bc
1647   0762 09          				add			hl,bc
1648   0763 3D          				dec			a
1649   0764 C2 61 07    				jp			nz,L0761
1650   0767             	
1651   0767 1A          				ld			a,(de)
1652   0768 D6 08       				sub			$08
1653   076A 96          				sub			(hl)
1654   076B FE EC       				cp			$EC
1655   076D D2 71 07    				jp			nc,L0771
1656   0770             	
1657   0770 09          				add			hl,bc
1658   0771             L0771:
1659   0771 2B          				dec			hl
1660   0772 2B          				dec			hl
1661   0773 36 00       				ld			(hl),$00
1662   0775 EB          				ex			de,hl
1663   0776 2B          				dec			hl
1664   0777 7E          				ld			a,(hl)
1665   0778 C6 30       				add			a,$30
1666   077A E6 F0       				and			$F0
1667   077C 57          				ld			d,a
1668   077D 36 00       				ld			(hl),$00
1669   077F 23          				inc			hl
1670   0780 5E          				ld			e,(hl)
1671   0781 23          				inc			hl
1672   0782 E5          				push		hl
1673   0783 CD 00 0A    				call		L0A00
1674   0786             	
1675   0786 7B          				ld			a,e
1676   0787 E6 1F       				and			$1F
1677   0789 CA 96 07    				jp			z,L0796
1678   078C             	
1679   078C 3D          				dec			a
1680   078D CA 96 07    				jp			z,L0796
1681   0790             	
1682   0790             L0790:
1683   0790 3D          				dec			a
1684   0791 FE 1C       				cp			$1C
1685   0793 F2 90 07    				jp			p,L0790
1686   0796             				
1687   0796             L0796:
1688   0796 5F          				ld			e,a
1689   0797 CD DB 07    				call		L07DB						; de to first empty slot
1690   079A             				
1691   079A 42          				ld			b,d
1692   079B 04          				inc			b
1693   079C 04          				inc			b
1694   079D 4B          				ld			c,e
1695   079E 0C          				inc			c
1696   079F C5          				push		bc
1697   07A0             
1698   07A0             				;; 3 rows up for middle char?
1699   07A0 7B          				ld			a,e
1700   07A1 C6 60       				add			a,$60
1701   07A3 5F          				ld			e,a
1702   07A4 D5          				push		de
1703   07A5             				
1704   07A5 42          				ld			b,d
1705   07A6 0C          				inc			c
1706   07A7 C5          				push		bc
1707   07A8             				
1708   07A8 3E 1E       				ld			a,$1E
1709   07AA 32 25 20    				ld			($2025),a				; Set timer (audio)
1710   07AD 3E 0F       				ld			a,$0F
1711   07AF 32 24 20    				ld			($2024),a				; Set timer (show explosion)
1712   07B2 3E 10       				ld			a,$10						; Sound bit 4
1713   07B4 D3 05       				out			($05),a					; Sound write
1714   07B6             				
1715   07B6 7B          				ld			a,e							; No idea what e is here, but used as PRNG
1716   07B7 E6 02       				and			$02							; Mask bit (a=0 or 28)
1717   07B9 21 40 0F    				ld			hl,TEMINE
1718   07BC 85          				add			a,l
1719   07BD 6F          				ld			l,a							; hl = ZAP or WAM
1720   07BE             
1721   07BE             				;; Get address from table -> hl
1722   07BE 5E          				ld			e,(hl)
1723   07BF 23          				inc			hl
1724   07C0 56          				ld			d,(hl)
1725   07C1 EB          				ex			de,hl						; hl = Table entry
1726   07C2             				
1727   07C2             				;; "Middle" letter or ZAP/WAM
1728   07C2 D1          				pop			de
1729   07C3 7E          				ld			a,(hl)
1730   07C4 23          				inc			hl
1731   07C5 CD 30 0B    				call		L0B30					; Draw string hl @ de, length a
1732   07C8             
1733   07C8             				;; Rest of ZAP/WAM
1734   07C8 D1          				pop			de
1735   07C9 7E          				ld			a,(hl)
1736   07CA 23          				inc			hl
1737   07CB CD 30 0B    				call		L0B30					; Draw string hl @ de, length a
1738   07CE             
1739   07CE             				;; Bottom of mine explosion
1740   07CE D1          				pop			de
1741   07CF 21 B5 0E    				ld			hl,MINEEXP
1742   07D2 3E 03       				ld			a,$03
1743   07D4 CD 30 0B    				call		L0B30					; Draw string hl @ de, length a
1744   07D7             				
1745   07D7 E1          				pop			hl
1746   07D8 C3 4F 07    				jp			L074F
1747   07DB             
1748   07DB             
1749   07DB             				;; Write de to first empty slot
1750   07DB             L07DB:
1751   07DB 21 F0 21    				ld			hl,$21F0
1752   07DE             L07DE:
1753   07DE 7E          				ld			a,(hl)
1754   07DF 23          				inc			hl
1755   07E0 B6          				or			(hl)
1756   07E1 23          				inc			hl
1757   07E2 C2 DE 07    				jp			nz,L07DE
1758   07E5             				
1759   07E5 2B          				dec			hl
1760   07E6 73          				ld			(hl),e
1761   07E7 2B          				dec			hl
1762   07E8 72          				ld			(hl),d
1763   07E9 C9          				ret
1764   07EA             
1765   07EA             				
1766   07EA             				;; Draw mines after reload
1767   07EA             L07EA:
1768   07EA 3A 2B 20    				ld			a,(PSCORE)			; Player score
1769   07ED FE 40       				cp			$40			
1770   07EF DA F4 07    				jp			c,L07F4
1771   07F2 3E 39       				ld			a,$39						; Min of score or $39
1772   07F4             				
1773   07F4             L07F4:
1774   07F4 32 2C 20    				ld			($202C),a				; Mine counter
1775   07F7             	
1776   07F7 21 7F 20    				ld			hl,$207F				; 1st mine sprite
1777   07FA 11 50 50    				ld			de,$5050				; Initial Mine X,Y
1778   07FD             	
1779   07FD             L07FD:
1780   07FD 7E          				ld			a,(hl)
1781   07FE A7          				and			a
1782   07FF FA 35 08    				jp			m,L0835					; Mine needs to be erased
1783   0802             
1784   0802             				;; Launch mine?
1785   0802             L0802:
1786   0802 01 08 00    				ld			bc,$0008
1787   0805 09          				add			hl,bc						; Advance in sprite table
1788   0806 36 0E       				ld			(hl),MINE>>8		; Mine MSB (+8)
1789   0808 2B          				dec			hl
1790   0809 36 A3       				ld			(hl),MINE&$FF 	; Mine LSB (+7)
1791   080B 2B          				dec			hl
1792   080C 2B          				dec			hl
1793   080D 73          				ld			(hl),e					; Y Pos (+5)
1794   080E 2B          				dec			hl
1795   080F 70          				ld			(hl),b					; Delta Y (+4)
1796   0810 2B          				dec			hl
1797   0811 2B          				dec			hl
1798   0812 72          				ld			(hl),d					; X Pos (+2)
1799   0813 2B          				dec			hl
1800   0814 36 01       				ld			(hl),$01				; Delta X (+1)
1801   0816 2B          				dec			hl
1802   0817 36 80       				ld			(hl),$80				; Flags
1803   0819             				
1804   0819 7A          				ld			a,d
1805   081A C6 51       				add			a,$51
1806   081C 57          				ld			d,a
1807   081D 1F          				rra
1808   081E DA 2E 08    				jp			c,L082E
1809   0821             	
1810   0821 3A 2C 20    				ld			a,($202C)				; Mine counter
1811   0824 D6 10       				sub			$10
1812   0826 F8          				ret			m								; Don't add more mines
1813   0827             	
1814   0827 32 2C 20    				ld			($202C),a				; Store count
1815   082A 7B          				ld			a,e
1816   082B C6 20       				add			a,$20
1817   082D 5F          				ld			e,a
1818   082E             	
1819   082E             L082E:
1820   082E 01 0D 00    				ld			bc,$000D				; Sprite table increment
1821   0831 09          				add			hl,bc						; Next mine
1822   0832 C3 FD 07    				jp			L07FD						; More mines!
1823   0835             
1824   0835             
1825   0835             				;; Erase mine area before launch
1826   0835             L0835:
1827   0835 E5          				push		hl
1828   0836 D5          				push		de
1829   0837 23          				inc			hl
1830   0838 23          				inc			hl
1831   0839 5E          				ld			e,(hl)
1832   083A 23          				inc			hl
1833   083B 23          				inc			hl
1834   083C 23          				inc			hl
1835   083D 56          				ld			d,(hl)
1836   083E CD 00 0A    				call		L0A00
1837   0841 EB          				ex			de,hl
1838   0842 01 02 10    				ld			bc,$1002				; 16 x 2 byte area
1839   0845 CD 3F 0A    				call		L0A3F						; Clear area at hl
1840   0848 D1          				pop			de
1841   0849 E1          				pop			hl
1842   084A C3 02 08    				jp			L0802
1843   084D             
1844   084D             				
1845   084D             				;; Handle high score erase
1846   084D             HERASE:	
1847   084D C8          				ret			z
1848   084E AF          				xor			a
1849   084F 32 06 20    				ld			(HSCORE),a			; Clear high score
1850   0852 3A 10 20    				ld			a,($2010)
1851   0855 A7          				and			a
1852   0856 C8          				ret			z
1853   0857             				
1854   0857 21 E9 21    				ld			hl,TXTBUF				; Text buffer
1855   085A E5          				push		hl
1856   085B             
1857   085B             				;; Write 4x '0' to buffer
1858   085B 01 30 04    				ld			bc,$0430				; b=loop counter, c=data
1859   085E             L085E:
1860   085E 71          				ld			(hl),c
1861   085F 23          				inc			hl
1862   0860 05          				dec			b
1863   0861 C2 5E 08    				jp			nz,L085E				; Loop
1864   0864             				
1865   0864 E1          				pop			hl
1866   0865 11 25 3E    				ld			de,$3E25				; Screen location
1867   0868 3E 04       				ld			a,$04						; Length = 4
1868   086A C3 30 0B    				jp			L0B30						; Draw string hl @ de, length a
1869   086D             				
1870   086D             
1871   086D             				;; $09E8 Entry B = Write low 3 bits of $2003 to $2029?
1872   086D             JTBLB:													; $086D
1873   086D EB          				ex			de,hl						; Sequence back to hl
1874   086E 22 00 20    				ld			($2000),hl			; Store
1875   0871             	
1876   0871 3A 03 20    				ld			a,($2003)				; 
1877   0874 E6 07       				and			$07							; Mask low 3 bits
1878   0876 FE 07       				cp			$07							; == $07?
1879   0878 C2 7C 08    				jp			nz,L087C
1880   087B             				
1881   087B AF          				xor			a								; Clear
1882   087C             L087C:
1883   087C 32 29 20    				ld			($2029),a				; Write
1884   087F C9          				ret
1885   0880             
1886   0880             				;; End of game clears
1887   0880             L0880:
1888   0880 F3          				di
1889   0881 EB          				ex			de,hl						; Stash hl in de
1890   0882 22 00 20    				ld			($2000),hl
1891   0885 AF          				xor			a
1892   0886 D3 02       				out			($02),a					; Clear periscope lamp
1893   0888 D3 05       				out			($05),a					; Clear audio latches
1894   088A D3 01       				out			($01),a					; Clear explosion lamp
1895   088C E1          				pop			hl							; (Return address)
1896   088D 01 00 00    				ld			bc,$0000
1897   0890 11 00 00    				ld			de,$0000
1898   0893 3E 10       				ld			a,$10
1899   0895 31 10 40    				ld			sp,$4010				; Clear $4010 down to $2011
1900   0898             L0898:
1901   0898 C5          				push		bc
1902   0899 13          				inc			de
1903   089A BA          				cp			d
1904   089B C2 98 08    				jp			nz,L0898									; Loop
1905   089E 31 00 24    				ld			sp,$2400
1906   08A1 E9          				jp			(hl)
1907   08A2             
1908   08A2             				
1909   08A2             				;; $09E8 Entry 3 (End game)
1910   08A2             JTBL3:	
1911   08A2             L08A2:
1912   08A2 E1          				pop			hl							; Return address
1913   08A3 22 09 20    				ld			($2009),hl			; Stash in ($2009-200a)
1914   08A6 CD 80 08    				call		L0880						; Does this ever return?
1915   08A9 2A 09 20    				ld			hl,($2009)			; Get return address back
1916   08AC E5          				push		hl							; Push back to stack
1917   08AD             				
1918   08AD 21 04 0F    				ld			hl,L0F04				; Water
1919   08B0 11 E0 27    				ld			de,$27E0
1920   08B3 3E 20       				ld			a,$20
1921   08B5 C3 30 0B    				jp			L0B30						; Draw string hl @ de, length a
1922   08B8             				
1923   08B8             L08B8:
1924   08B8 DB 01       				in			a,($01)					; IN0
1925   08BA 47          				ld			b,a
1926   08BB DB 01       				in			a,($01)					; IN0
1927   08BD 21 08 20    				ld			hl,IN0 					; Last IN0
1928   08C0 11 DA 09    				ld			de,TBLIN0				; Jump table for IN0
1929   08C3 B8          				cp			b								; Inputs stable?
1930   08C4 CC 05 0B    				call		z,L0B05					; Handle inputs
1931   08C7             
1932   08C7             				;; Jump table do nothing "routine"
1933   08C7             				;; (and end of this one)
1934   08C7             HRET:		
1935   08C7 C9          				ret											; (reset)
1936   08C8             
1937   08C8             				
1938   08C8             				;; Handle coin
1939   08C8             HCOIN:
1940   08C8 C8          				ret			z								; No coin
1941   08C9 3E 20       				ld			a,$20						; Sound bit 5
1942   08CB D3 05       				out			($05),a					; Audio outputs
1943   08CD 3E 0F       				ld			a,$0F
1944   08CF 32 25 20    				ld			($2025),a				; Set timer
1945   08D2             
1946   08D2 3A 07 20    				ld			a,(IN1)					; Last IN1
1947   08D5 47          				ld			b,a
1948   08D6 21 04 20    				ld			hl,$2004				; Half credits
1949   08D9 34          				inc			(hl)						; Increment
1950   08DA E6 04       				and			$04							; DSW2 = coinage
1951   08DC CA E2 08    				jp			z,L08E2
1952   08DF             
1953   08DF 7E          				ld			a,(hl)
1954   08E0 0F          				rrca
1955   08E1 D8          				ret			c								; Only 1 half ccredit
1956   08E2             
1957   08E2             L08E2:
1958   08E2 36 00       				ld			(hl),$00				; Clear half credit
1959   08E4 23          				inc			hl
1960   08E5 34          				inc			(hl)						; Add credit
1961   08E6             
1962   08E6 78          				ld			a,b							; Last IN1
1963   08E7 E6 08       				and			$08							; DSW3 = coinage
1964   08E9 CA F4 08    				jp			z,L08F4
1965   08EC             
1966   08EC 34          				inc			(hl)						; Add credit
1967   08ED 78          				ld			a,b							; Last IN1
1968   08EE E6 04       				and			$04							; DSW2 = coinage
1969   08F0 CA F4 08    				jp			z,L08F4
1970   08F3             
1971   08F3 34          				inc			(hl)						; Add credit (2C, 3C)
1972   08F4             
1973   08F4             L08F4:	
1974   08F4 7E          				ld			a,(hl)					; Get credits
1975   08F5 E6 0F       				and			$0F							; Useless
1976   08F7 77          				ld			(hl),a					; Store credits
1977   08F8             				
1978   08F8             				;; Falls through to start game when credits added
1979   08F8             HPUSH:	
1980   08F8 C8          				ret			z
1981   08F9 3A 02 20    				ld			a,(GTIME)				; Game time
1982   08FC A7          				and			a
1983   08FD C0          				ret			nz							; Skip if game active
1984   08FE             
1985   08FE 21 05 20    				ld			hl,CREDIT				; Credits?
1986   0901 7E          				ld			a,(hl)
1987   0902 A7          				and			a
1988   0903 CA 1A 09    				jp			z,L091A					; No credits, ignore start
1989   0906             				
1990   0906             L0906:
1991   0906 35          				dec			(hl)
1992   0907             	
1993   0907 DB 01       				in			a,($01)					; IN1
1994   0909 07          				rlca
1995   090A 07          				rlca
1996   090B E6 03       				and			$03							; Game time dips
1997   090D 11 54 0F    				ld			de,LDTIME				; $0F54 
1998   0910 83          				add			a,e							; Index into table
1999   0911 5F          				ld			e,a
2000   0912 1A          				ld			a,(de)
2001   0913 32 02 20    				ld			(GTIME),a				; Store time
2002   0916 32 2A 20    				ld			($202A),a				; Store time
2003   0919 C9          				ret
2004   091A             	
2005   091A             L091A:
2006   091A 3A 07 20    				ld			a,(IN1)					; Last IN1
2007   091D E6 0C       				and			$0C							; Mask coinage
2008   091F FE 0C       				cp			$0C							; 2C / 3Credit?
2009   0921 C0          				ret			nz
2010   0922             				
2011   0922 2B          				dec			hl
2012   0923 7E          				ld			a,(hl)					; Half credits
2013   0924 A7          				and			a
2014   0925 C8          				ret			z
2015   0926 C3 06 09    				jp			L0906
2016   0929             
2017   0929             				
2018   0929             				;; $2000 at reset
2019   0929             				;; Attract mode loop
2020   0929             L0929:
2021   0929 04          				.db			$04							; Command 4 = String
2022   092A 01          				.db			$01							; Length
2023   092B B8 0E       				.dw			LTBLANK					; String src address
2024   092D 30 3E       				.dw			$3E30						; Screen dst address
2025   092F             
2026   092F 09          				.db			$09							; Commnad 9
2027   0930 05 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2028   0932 33 38       				.dw			$3833						; Location
2029   0934 E6 0E       				.dw			LTCOIN					; "Insert Coin"
2030   0936 F1 0E       				.dw			LTPUSH					; "Push Button"
2031   0938             
2032   0938 04          				.db			$04							; Command 4 = String
2033   0939 1A          				.db			$1A							; Length 
2034   093A CC 0E       				.dw			LTHIGH					; String src address
2035   093C 02 3C       				.dw			$3C02						; Screen dst address
2036   093E             	
2037   093E 0A          				.db			$0A							; Command A = BCD @ loc
2038   093F 06 20       				.dw			HSCORE					; bc = 2006 = high score
2039   0941 E9 21       				.dw			TXTBUF					; Buffer loc
2040   0943 25 3E       				.dw			$3E25						; Screen loc
2041   0945             	
2042   0945 0A          				.db			$0A							; Command A = BCD @ loc
2043   0946 2B 20       				.dw			PSCORE					; bc = 202b = score
2044   0948 E9 21       				.dw			TXTBUF					; Buffer loc
2045   094A 35 3E       				.dw			$3E35						; Screen loc
2046   094C             	
2047   094C 02          				.db			$02							; Command 2 = arg to 2010
2048   094D 0F          				.db			$0F							; arg
2049   094E             
2050   094E             L094E:	
2051   094E 04          				.db			$04							; Command 4 = String
2052   094F 09          				.db			$09							; Length
2053   0950 C3 0E       				.dw			LTOVER					; String src address
2054   0952 0B 2C       				.dw			$2C0B						; Screen dst address
2055   0954                     
2056   0954             				;; Delay timer
2057   0954 01          				.db			$01							; Command 1 = arg to 2011
2058   0955 1E          				.db			$1E							; arg
2059   0956             				
2060   0956 00          				.db			$00							; Command 0 = Wait for $2011 timer
2061   0957             
2062   0957             
2063   0957 04          				.db			$04							; Command 4 = String
2064   0958 09          				.db			$09							; Length
2065   0959 B8 0E       				.dw			LTBLANK					; String src address
2066   095B 0B 2C       				.dw			$2C0B						; Screen dst address
2067   095D             
2068   095D             				;; Delay timer
2069   095D 01          				.db			$01							; Command 1 = arg to 2011
2070   095E 1E          				.db			$1E							; arg
2071   095F             				
2072   095F 00          				.db			$00							; Command 0 = Wait for $2011 timer
2073   0960             
2074   0960 06          				.db			$06							; Command 6 = Set ($2000)
2075   0961 4E 09       				.dw			L094E						; Next command address
2076   0963             	
2077   0963             L0963:
2078   0963 03          				.db			$03							; Do end of game sequence
2079   0964             	
2080   0964 04          				.db			$04							; Command 4 = String
2081   0965 08          				.db			$08							; Length
2082   0966 FC 0E       				.dw			LTSEA						; String src address (SEA WOLF)
2083   0968 0C 2C       				.dw			$2C0C						; Screen dst address
2084   096A             
2085   096A 04          				.db			$04							; Command 4 = String
2086   096B 0A          				.db			$0A							; Length
2087   096C CC 0E       				.dw			LTHIGH					; String src address (HIGH SCORE)
2088   096E 02 3C       				.dw			$3C02						; Screen dst address
2089   0970             	
2090   0970 0A          				.db			$0A							; Command A = BCD @ loc
2091   0971 06 20       				.dw			HSCORE					; bc = 2006 = high score
2092   0973 E9 21       				.dw			TXTBUF					; Buffer loc
2093   0975 25 3E       				.dw			$3E25						; Screen loc
2094   0977             	
2095   0977 09          				.db			$09							; Commnad 9
2096   0978 05 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2097   097A 33 38       				.dw			$3833						; Location
2098   097C E6 0E       				.dw			LTCOIN					; "Insert Coin"
2099   097E F1 0E       				.dw			LTPUSH					; "Push Button"
2100   0980             
2101   0980             				;; Delay timer
2102   0980 01          				.db			$01							; Command 1 = arg to 2011
2103   0981 5A          				.db			$5A							; arg
2104   0982             				
2105   0982 00          				.db			$00							; Command 0 = Wait for $2011 timer
2106   0983             
2107   0983             				;; Launch ship in attract
2108   0983 08          				.db			$08							; Command 8 (Data backwards to loc)
2109   0984 09          				.db			$09							; Count
2110   0985 60 20       				.dw			$2060						; de = $2060
2111   0987 EB 0D       				.dw			SHIP3						; $0DBE = Ship address
2112   0989 20          				.db			$20							; $20 = ???
2113   098A 15          				.db			$15							; $15 = Y Pos
2114   098B 00          				.db			$00							; $00 = Delta y
2115   098C E0          				.db			$E0							; $E0 = Y flags
2116   098D 00          				.db			$00							; $00 = X pos
2117   098E 01          				.db			$01							; $01	= Delta x
2118   098F C4          				.db			$C4							; $C4	= Flags (Ship 4, active)
2119   0990             
2120   0990             				;; Delay timer
2121   0990 01          				.db			$01							; Command 1 = arg to 2011
2122   0991 5A          				.db			$5A							; arg
2123   0992             				
2124   0992 00          				.db			$00							; Command 0 = Wait for $2011 timer
2125   0993             
2126   0993             				;; Launch missile in attract
2127   0993 08          				.db			$08							; Command 8 (Data backwards to loc)
2128   0994 09          				.db			$09							; Count
2129   0995 EF 20       				.dw			$20EF						; de = $20EF
2130   0997 75 0E       				.dw			SHOT0						; $0E75 = Shot address
2131   0999 9C          				.db			$9C							; $9C = ???
2132   099A E0          				.db			$E0							; $E0	= Y Pos
2133   099B FA          				.db			$FA							; $FA	= Delta y
2134   099C 00          				.db			$00							; $00	= Y flags
2135   099D A8          				.db			$A8							; $A8	= X pos
2136   099E 00          				.db			$00							; $00	= Delta X
2137   099F C0          				.db			$C0							; $C0	= Flags (Non-ship, active)
2138   09A0             
2139   09A0             				;; Delay timer
2140   09A0 01          				.db			$01							; Command 1 = arg to 2011
2141   09A1 B4          				.db			$B4							; arg
2142   09A2             				
2143   09A2 00          				.db			$00							; Command 0 = Wait for $2011 timer
2144   09A3             	
2145   09A3 06          				.db			$06							; Command 6 = Set ($2000)
2146   09A4 63 09       				.dw			L0963						; Next command address
2147   09A6             
2148   09A6             
2149   09A6             				;; Game play control loop
2150   09A6             L09A6:
2151   09A6             				;; Delay timer
2152   09A6 01          				.db			$01							; Command 1 = arg to 2011
2153   09A7 0F          				.db			$0F							; arg
2154   09A8             
2155   09A8 00          				.db			$00							; Command 0 = Wait for $2011 timer
2156   09A9             	
2157   09A9 03          				.db			$03							; Command 3 = End game
2158   09AA                    	
2159   09AA 04          				.db			$04							; Command 4 = String
2160   09AB 09          				.db			$09							; Length
2161   09AC 29 0F       				.dw			LTTIME					; String src address (TIME/SCORE)
2162   09AE 0E 3C       				.dw			$3C0E						; Screen dst address
2163   09B0             	
2164   09B0 07          				.db			$07							; Command 7 = Store a to bc
2165   09B1 28          				.db			$28							; a
2166   09B2 22 20       				.dw			$2022						; bc
2167   09B4             
2168   09B4 07          				.db			$07							; Command 7 = Store a to bc
2169   09B5 0A          				.db			$0A							; a
2170   09B6 21 20       				.dw			$2021						; bc
2171   09B8             
2172   09B8 0B          				.db			$0B							; Command B = Write $2029?
2173   09B9             				
2174   09B9 00          				.db			$00							; Command 0 = Wait for $2011 timer
2175   09BA             
2176   09BA             				
2177   09BA             				;; Explosion lamp tables!
2178   09BA             L09BA:
2179   09BA 48 44 42 41 				.db			$48, $44, $42, $41, $88, $84, $82, $81		; 
2179   09BE 88 84 82 81 
2180   09C2             L09C2:
2181   09C2 18 14 12 11 				.db			$18, $14, $12, $11, $28, $24, $22, $21		; 
2181   09C6 28 24 22 21 
2182   09CA             
2183   09CA             
2184   09CA             				;; Jump table for IN1 changes (8 entries)
2185   09CA             TBLIN1:	
2186   09CA C8 08       				.dw			HCOIN						; 0 = 08C8 = Coin
2187   09CC F8 08       				.dw			HPUSH						; 1 = 08F8 = Start
2188   09CE C7 08       				.dw			HRET						; 2 = 08C7 = (ret) Coinage
2189   09D0 C7 08       				.dw			HRET						; 3 = 08C7 = (ret) Coinage
2190   09D2 4D 08       				.dw			HERASE					; 4 = 084D = Erase highs
2191   09D4 C7 08       				.dw			HRET						; 5 = 08C7 = (ret) Extended time
2192   09D6 C7 08       				.dw			HRET						; 6 = 08C7 = (ret) Extended time
2193   09D8 C7 08       				.dw			HRET						; 7 = 08C7 = (ret) Extended time
2194   09DA             
2195   09DA             				;; Jump table for IN0 changes (8 entries)
2196   09DA             TBLIN0:	
2197   09DA C7 08       				.dw			HRET						; 0 = 08C7 = (ret) Turret
2198   09DC C7 08       				.dw			HRET						; 1 = 08C7 = (ret) Turret
2199   09DE C7 08       				.dw			HRET						; 2 = 08C7 = (ret) Turret
2200   09E0 C7 08       				.dw			HRET						; 3 = 08C7 = (ret) Turret
2201   09E2 C7 08       				.dw			HRET						; 4 = 08C7 = (ret) Turret
2202   09E4 7B 05       				.dw			HFIRE						; 5 = 057B = Fire button
2203   09E6 C7 08       				.dw			HRET						; 6 = 08C7 = (ret) Time
2204   09E8 C7 08       				.dw			HRET						; 7 = 08C7 = (ret) Time
2205   09EA             
2206   09EA             				;; Jump table for $047F (0 entry not used)
2207   09EA             				;; Used for attract mode sequence
2208   09EA             TBLJMP:	
2209   09EA 7C 0B       				.dw			JTBL1						; 1 = 0B7C = Arg to 2011
2210   09EC 72 0B       				.dw			JTBL2						; 2 = 0B72 = Arg to 2010
2211   09EE A2 08       				.dw			JTBL3						; 3 = 08A2 = End of game + reset
2212   09F0 22 0B       				.dw			JTBL4						; 4 = 0B22 = String
2213   09F2 ED 0A       				.dw			JTBL5						; 5 = 0AED = (Not used)
2214   09F4 86 0B       				.dw			JTBL6						; 6 = 0B86 = (de) -> $2000 
2215   09F6 E1 0A       				.dw			JTBL7						; 7 = 0AE1 = val -> addr
2216   09F8 9F 0A       				.dw			JTBL8						; 8 = 0A9F = Arg to loc
2217   09FA BC 0A       				.dw			JTBL9						; 9 = 0ABC = Select String
2218   09FC 53 0A       				.dw			JTBLA						; A = 0A53 = BCD @ location
2219   09FE 6D 08       				.dw			JTBLB						; B = 086D = LSBs of $2003 to $2029 (?)
2220   0A00             
2221   0A00             				;; e&$07 -> c,  de = de >> 3 + $2400,
2222   0A00             				;; Get address for shifted data
2223   0A00             L0A00:
2224   0A00 7B          				ld			a,e							; Mask e
2225   0A01 E6 07       				and			$07
2226   0A03 4F          				ld			c,a							; Stash in c
2227   0A04             
2228   0A04             				;; de>>3
2229   0A04 06 03       				ld			b,$03						; Loop counter
2230   0A06             L0A06:
2231   0A06 AF          				xor			a								; CLC
2232   0A07 7A          				ld			a,d							; LSB of d to carry
2233   0A08 1F          				rra
2234   0A09 57          				ld			d,a
2235   0A0A 7B          				ld			a,e
2236   0A0B 1F          				rra
2237   0A0C 5F          				ld			e,a
2238   0A0D 05          				dec			b
2239   0A0E C2 06 0A    				jp			nz,L0A06				; Loop
2240   0A11             				
2241   0A11 7A          				ld			a,d
2242   0A12 C6 24       				add			a,$24
2243   0A14 57          				ld			d,a
2244   0A15 C9          				ret
2245   0A16             				
2246   0A16             
2247   0A16             L0A16:
2248   0A16 F5          				push		af							; Store count
2249   0A17 7E          				ld			a,(hl)					; Get value
2250   0A18 02          				ld			(bc),a					; Store value
2251   0A19 03          				inc			bc			
2252   0A1A EB          				ex			de,hl
2253   0A1B B6          				or			(hl)
2254   0A1C 23          				inc			hl
2255   0A1D 12          				ld			(de),a
2256   0A1E F1          				pop			af							; Restore count
2257   0A1F E5          				push		hl
2258   0A20 21 20 00    				ld			hl,$0020				; Row increment
2259   0A23 19          				add			hl,de						; hl = de+$0020
2260   0A24 D1          				pop			de							; de = old hl
2261   0A25 3D          				dec			a
2262   0A26 C2 16 0A    				jp			nz,L0A16				; loop
2263   0A29 C9          				ret
2264   0A2A             
2265   0A2A             	
2266   0A2A             				;; Draw b x c block from de to screen at hl
2267   0A2A             L0A2A:
2268   0A2A C5          				push		bc
2269   0A2B E5          				push		hl
2270   0A2C             L0A2C:
2271   0A2C 1A          				ld			a,(de)
2272   0A2D 13          				inc			de
2273   0A2E 77          				ld			(hl),a
2274   0A2F 23          				inc			hl
2275   0A30 0D          				dec			c
2276   0A31 C2 2C 0A    				jp			nz,L0A2C				; Loop for col
2277   0A34             				
2278   0A34 E1          				pop			hl
2279   0A35 01 20 00    				ld			bc,$0020				; Row increment
2280   0A38 09          				add			hl,bc
2281   0A39 C1          				pop			bc
2282   0A3A 05          				dec			b
2283   0A3B C2 2A 0A    				jp			nz,L0A2A				; Loop for row
2284   0A3E C9          				ret
2285   0A3F             
2286   0A3F             
2287   0A3F             				;; Clear (hl - hl+c-1)  b times with row offsets
2288   0A3F             L0A3F:
2289   0A3F AF          				xor			a
2290   0A40             L0A40:
2291   0A40 C5          				push		bc
2292   0A41 E5          				push		hl
2293   0A42             L0A42:
2294   0A42 77          				ld			(hl),a
2295   0A43 23          				inc			hl
2296   0A44 0D          				dec			c
2297   0A45 C2 42 0A    				jp			nz,L0A42				; Loop for col
2298   0A48             				
2299   0A48 E1          				pop			hl
2300   0A49 01 20 00    				ld			bc,$0020				; Row increment
2301   0A4C 09          				add			hl,bc
2302   0A4D C1          				pop			bc
2303   0A4E 05          				dec			b
2304   0A4F C2 40 0A    				jp			nz,L0A40				; Loop for row
2305   0A52             				
2306   0A52 C9          				ret
2307   0A53             
2308   0A53             	
2309   0A53             				;; $09E8 Entry A
2310   0A53             JTBLA:													; $0A53
2311   0A53 EB          				ex			de,hl
2312   0A54 4E          				ld			c,(hl)					; Read bc
2313   0A55 23          				inc			hl
2314   0A56 46          				ld			b,(hl)
2315   0A57 23          				inc			hl
2316   0A58 5E          				ld			e,(hl)					; Read de
2317   0A59 23          				inc			hl
2318   0A5A 56          				ld			d,(hl)
2319   0A5B 2B          				dec			hl							; Back up to use de again
2320   0A5C CD 82 0A    				call		L0A82						; Draw BCD from bc at buffer at de
2321   0A5F EB          				ex			de,hl						; Last address now in hl
2322   0A60 CD 7A 0A    				call		L0A7A						; Replace space with zero
2323   0A63 23          				inc			hl
2324   0A64 EB          				ex			de,hl						; Last address now in de
2325   0A65 3E 30       				ld			a,$30
2326   0A67 12          				ld			(de),a					; Append zero
2327   0A68 13          				inc			de
2328   0A69 12          				ld			(de),a					; Append zero
2329   0A6A CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2330   0A6D D5          				push		de
2331   0A6E CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2332   0A71 22 00 20    				ld			($2000),hl			; Next command 
2333   0A74 E1          				pop			hl
2334   0A75 3E 04       				ld			a,$04						; Length
2335   0A77 C3 30 0B    				jp			L0B30						; Draw string hl @ de, length a
2336   0A7A             
2337   0A7A             
2338   0A7A             				;; Replace space with a zero
2339   0A7A             L0A7A:
2340   0A7A 2B          				dec			hl
2341   0A7B 7E          				ld			a,(hl)
2342   0A7C E6 40       				and			$40
2343   0A7E C8          				ret			z
2344   0A7F 36 30       				ld			(hl),$30
2345   0A81 C9          				ret
2346   0A82             
2347   0A82             				;; BCD at (bc) to string at (de)
2348   0A82             L0A82:
2349   0A82 0A          				ld			a,(bc)	
2350   0A83 1F          				rra
2351   0A84 1F          				rra
2352   0A85 1F          				rra
2353   0A86 1F          				rra
2354   0A87 E6 0F       				and			$0F							; Mask high nybble
2355   0A89 C2 8E 0A    				jp			nz,L0A8E	
2356   0A8C 3E 10       				ld			a,$10						; $40 -> blank
2357   0A8E             L0A8E:
2358   0A8E C6 30       				add			a,$30						; Decimal to ascii
2359   0A90 12          				ld			(de),a					; Store digit
2360   0A91 13          				inc			de							; Inc buffer pointer
2361   0A92 0A          				ld			a,(bc)			
2362   0A93 E6 0F       				and			$0F							; Mask low nybble
2363   0A95 C2 9A 0A    				jp			nz,L0A9A
2364   0A98 3E 10       				ld			a,$10						; $40 -> blank
2365   0A9A             L0A9A:
2366   0A9A C6 30       				add			a,$30						; Decimal to ascii
2367   0A9C 12          				ld			(de),a					; Store digit
2368   0A9D 13          				inc			de							; Inc buffer pointer
2369   0A9E C9          				ret
2370   0A9F             
2371   0A9F             			
2372   0A9F             				;; $09E8 Entry 8 -- Copy data from sequence to address (backwards)
2373   0A9F             JTBL8:													; $0A9F
2374   0A9F EB          				ex			de,hl						; Sequence address back to hl
2375   0AA0 46          				ld			b,(hl)					; Get count
2376   0AA1 23          				inc			hl
2377   0AA2 05          				dec			b
2378   0AA3 05          				dec			b
2379   0AA4 CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2  (address)
2380   0AA7 4E          				ld			c,(hl)					; Read first byte
2381   0AA8 23          				inc			hl
2382   0AA9 7E          				ld			a,(hl)					; Read second byte
2383   0AAA 23          				inc			hl
2384   0AAB 12          				ld			(de),a					; Write first byte
2385   0AAC 1B          				dec			de
2386   0AAD 79          				ld			a,c
2387   0AAE 12          				ld			(de),a					; Write second byte
2388   0AAF 1B          				dec			de
2389   0AB0             	
2390   0AB0             L0AB0:
2391   0AB0 7E          				ld			a,(hl)					; Loop for rest of count
2392   0AB1 23          				inc			hl
2393   0AB2 12          				ld			(de),a
2394   0AB3 1B          				dec			de
2395   0AB4 05          				dec			b
2396   0AB5 C2 B0 0A    				jp			nz,L0AB0
2397   0AB8 22 00 20    				ld			($2000),hl			; Next command
2398   0ABB C9          				ret
2399   0ABC             
2400   0ABC             	
2401   0ABC             				;; $09E8 Entry 9 -- Draw INSERT COIN or PUSH BUTTON
2402   0ABC             JTBL9:													; $0ABC
2403   0ABC EB          				ex			de,hl
2404   0ABD CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2405   0AC0 1A          				ld			a,(de)
2406   0AC1 CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2407   0AC4 D5          				push		de
2408   0AC5 CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2409   0AC8 D5          				push		de
2410   0AC9 CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2411   0ACC 22 00 20    				ld			($2000),hl			; Next command
2412   0ACF             	
2413   0ACF EB          				ex			de,hl
2414   0AD0 A7          				and			a
2415   0AD1 CA D5 0A    				jp			z,L0AD5					; Draw first string?
2416   0AD4 E3          				ex			(sp),hl
2417   0AD5             				
2418   0AD5             L0AD5:
2419   0AD5 E1          				pop			hl
2420   0AD6 D1          				pop			de
2421   0AD7 3E 0B       				ld			a,$0B						; Length
2422   0AD9 C3 30 0B    				jp			L0B30						; Draw string hl @ de, length a
2423   0ADC             
2424   0ADC             				
2425   0ADC             				;; (hl, hl+1) -> de, hl+=2
2426   0ADC             L0ADC:
2427   0ADC 5E          				ld			e,(hl)					; LSB from table
2428   0ADD 23          				inc			hl
2429   0ADE 56          				ld			d,(hl)					; MSB from table
2430   0ADF 23          				inc			hl
2431   0AE0 C9          				ret
2432   0AE1             
2433   0AE1             				;; $9EA8 Entry 7 -- arg -> addr
2434   0AE1             JTBL7:													; $0AE1
2435   0AE1 1A          				ld			a,(de)					; Next entry
2436   0AE2 13          				inc			de
2437   0AE3 EB          				ex			de,hl
2438   0AE4 4E          				ld			c,(hl)					; Next entry
2439   0AE5 23          				inc			hl
2440   0AE6 46          				ld			b,(hl)					; Next entry
2441   0AE7 23          				inc			hl
2442   0AE8 22 00 20    				ld			($2000),hl			; Store command
2443   0AEB 02          				ld			(bc),a					; a -> (bc)
2444   0AEC C9          				ret
2445   0AED             
2446   0AED             				;; $09E8 Entry 5
2447   0AED             				;; This is apparently never called
2448   0AED             				;; Read from de table into b, c, a, e, d
2449   0AED             JTBL5:													; $0AED
2450   0AED EB          				ex			de,hl			
2451   0AEE 46          				ld			b,(hl)					; get b,c,a from (hl) [was (de)]
2452   0AEF 23          				inc			hl
2453   0AF0 4E          				ld			c,(hl)
2454   0AF1 23          				inc			hl
2455   0AF2 7E          				ld			a,(hl)
2456   0AF3 23          				inc			hl
2457   0AF4 CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2458   0AF7 22 00 20    				ld   ($2000),hl					; Store command
2459   0AFA             				
2460   0AFA EB          				ex			de,hl
2461   0AFB 36 DB       				ld			(hl),$DB				; ?? constant?
2462   0AFD 23          				inc			hl
2463   0AFE 71          				ld			(hl),c
2464   0AFF 23          				inc			hl
2465   0B00 36 C9       				ld			(hl),$C9				; ?? constant?
2466   0B02 2B          				dec			hl
2467   0B03 2B          				dec			hl
2468   0B04 E9          				jp			(hl)						; Jump
2469   0B05             
2470   0B05             				
2471   0B05             				;; Deal with inputs (when stable)
2472   0B05             L0B05:
2473   0B05 AE          				xor			(hl)						; XOR with stored value
2474   0B06 C8          				ret			z								; No changes
2475   0B07             	
2476   0B07 4F          				ld			c,a							; Stash changed bits
2477   0B08 06 01       				ld			b,$01						; Bit being checked
2478   0B0A             	
2479   0B0A             L0B0A:
2480   0B0A 79          				ld			a,c							; Restore changed bits	
2481   0B0B 0F          				rrca
2482   0B0C DA 18 0B    				jp			c,L0B18					; Bit is high
2483   0B0F             	
2484   0B0F 4F          				ld			c,a							; Stash changed bits
2485   0B10 78          				ld			a,b							; Shift check bit
2486   0B11 07          				rlca
2487   0B12 47          				ld			b,a
2488   0B13 13          				inc			de							; Advance jump table
2489   0B14 13          				inc			de
2490   0B15 C3 0A 0B    				jp			L0B0A						; Loop
2491   0B18             	
2492   0B18             L0B18:
2493   0B18 78          				ld			a,b							; Bit found to a
2494   0B19 AE          				xor			(hl)						; Clear bit
2495   0B1A 77          				ld			(hl),a					; Store back
2496   0B1B A0          				and			b								; Value of changed bit
2497   0B1C             
2498   0B1C             				;; Get jump address from table
2499   0B1C EB          				ex			de,hl
2500   0B1D 4E          				ld			c,(hl)
2501   0B1E 23          				inc			hl
2502   0B1F 66          				ld			h,(hl)
2503   0B20 69          				ld			l,c
2504   0B21 E9          				jp			(hl)						; Jump to handler
2505   0B22             
2506   0B22             				
2507   0B22             				;; $09E8 Entry 4 (Draw string))
2508   0B22             JTBL4:													; $0E22
2509   0B22 EB          				ex			de,hl						; 
2510   0B23 7E          				ld			a,(hl)					; Length
2511   0B24 23          				inc			hl
2512   0B25 CD DC 0A    				call		L0ADC						; (hl, hl+1) -> de, hl+=2
2513   0B28 D5          				push		de
2514   0B29 CD DC 0A    				call		L0ADC						; (hl, hl,1) -> de, hl+=2
2515   0B2C 22 00 20    				ld			($2000),hl			; Next command
2516   0B2F E1          				pop			hl							; String src address
2517   0B30             
2518   0B30             				;; Write string length a from hl to de
2519   0B30             L0B30:
2520   0B30 F5          				push		af
2521   0B31             L0B31:
2522   0B31 7E          				ld			a,(hl)					; Get byte
2523   0B32 23          				inc			hl
2524   0B33 D6 30       				sub			$30							; Ascii -> tbl
2525   0B35 F2 49 0B    				jp			p,L0B49					; Jump if >=$30
2526   0B38             
2527   0B38             				;; Blank space = $30-a (?)
2528   0B38 47          				ld			b,a
2529   0B39             L0B39:
2530   0B39 1C          				inc			e
2531   0B3A 7B          				ld			a,e
2532   0B3B E6 1F       				and			$1F
2533   0B3D C2 42 0B    				jp			nz,L0B42				; No wrap
2534   0B40 14          				inc			d
2535   0B41 14          				inc			d
2536   0B42             L0B42:
2537   0B42 04          				inc			b
2538   0B43 C2 39 0B    				jp			nz,L0B39				; Loop for space
2539   0B46             				
2540   0B46 C3 31 0B    				jp			L0B31						; Loop for chars
2541   0B49             
2542   0B49             				;; ASCII
2543   0B49             L0B49:
2544   0B49 E5          				push		hl
2545   0B4A D5          				push		de
2546   0B4B             				;; hl = CHARS + a * $0A
2547   0B4B 21 8F 0B    				ld			hl,CHARS				; Start of char table
2548   0B4E CA 59 0B    				jp			z,L0B59					; (no need to add)
2549   0B51 01 0A 00    				ld			bc,$000A				; Add a*$0a
2550   0B54             L0B54:
2551   0B54 09          				add			hl,bc
2552   0B55 3D          				dec			a
2553   0B56 C2 54 0B    				jp			nz,L0B54
2554   0B59             	
2555   0B59             L0B59:
2556   0B59 EB          				ex			de,hl
2557   0B5A 01 20 00    				ld			bc,$0020				; Row increment
2558   0B5D 3E 0A       				ld			a,$0A						; Loop $a times
2559   0B5F             				
2560   0B5F             L0B5F:
2561   0B5F F5          				push		af
2562   0B60 1A          				ld			a,(de)					; Load byte
2563   0B61 13          				inc			de							; Inc index
2564   0B62 77          				ld			(hl),a					; Store to screen
2565   0B63 09          				add			hl,bc						; Next row
2566   0B64 F1          				pop			af
2567   0B65 3D          				dec			a
2568   0B66 C2 5F 0B    				jp			nz,L0B5F				; Loop for this char
2569   0B69             				
2570   0B69 D1          				pop			de
2571   0B6A E1          				pop			hl
2572   0B6B 13          				inc			de							; Next screen loc
2573   0B6C F1          				pop			af
2574   0B6D 3D          				dec			a
2575   0B6E C2 30 0B    				jp			nz,L0B30				; Next char
2576   0B71             				
2577   0B71 C9          				ret
2578   0B72             
2579   0B72             				
2580   0B72             				;; $09E8 Entry 2  (argument to 2010)
2581   0B72             JTBL2:													; $0B72
2582   0B72 EB          				ex			de,hl
2583   0B73 7E          				ld			a,(hl)					; Argument
2584   0B74 23          				inc			hl
2585   0B75 22 00 20    				ld			($2000),hl			; Next command
2586   0B78 32 10 20    				ld			($2010),a				; Store arg
2587   0B7B C9          				ret
2588   0B7C             
2589   0B7C             				;; $09E8 Entry 1 (argument to 2011)
2590   0B7C             JTBL1:													; $0B7C
2591   0B7C EB          				ex			de,hl
2592   0B7D 7E          				ld			a,(hl)					; Argument
2593   0B7E 23          				inc			hl
2594   0B7F 22 00 20    				ld			($2000),hl			; Next command
2595   0B82 32 11 20    				ld			($2011),a				; Store arg
2596   0B85 C9          				ret
2597   0B86             
2598   0B86             				;; $09E8 Entry 6 (de) -> $2000
2599   0B86             JTBL6:													; $0B86
2600   0B86 EB          				ex			de,hl
2601   0B87 5E          				ld			e,(hl)
2602   0B88 23          				inc			hl
2603   0B89 56          				ld			d,(hl)
2604   0B8A EB          				ex			de,hl
2605   0B8B 22 00 20    				ld			($2000),hl			; Store command
2606   0B8E C9          				ret
2607   0B8F             
2608   0B8F             				
2609   0B8F             				;; Character table
2610   0B8F             CHARS:													; $0B8F
2611   0B8F             #include "swfont.asm"
0001+  0B8F             	;;	.org	$0b8f 
0002+  0B8F             
0003+  0B8F             chartbl:
0004+  0B8F 3C          	.db	$3c		; ....########.... $30
0005+  0B90 7E          	.db	$7e		; ..############.. 
0006+  0B91 66          	.db	$66		; ..####....####.. 
0007+  0B92 66          	.db	$66		; ..####....####.. 
0008+  0B93 66          	.db	$66		; ..####....####.. 
0009+  0B94 66          	.db	$66		; ..####....####.. 
0010+  0B95 66          	.db	$66		; ..####....####.. 
0011+  0B96 66          	.db	$66		; ..####....####.. 
0012+  0B97 7E          	.db	$7e		; ..############.. 
0013+  0B98 3C          	.db	$3c		; ....########.... 
0014+  0B99             
0015+  0B99 18          	.db	$18		; ......####...... $31
0016+  0B9A 1C          	.db	$1c		; ....######...... 
0017+  0B9B 18          	.db	$18		; ......####...... 
0018+  0B9C 18          	.db	$18		; ......####...... 
0019+  0B9D 18          	.db	$18		; ......####...... 
0020+  0B9E 18          	.db	$18		; ......####...... 
0021+  0B9F 18          	.db	$18		; ......####...... 
0022+  0BA0 18          	.db	$18		; ......####...... 
0023+  0BA1 3C          	.db	$3c		; ....########.... 
0024+  0BA2 3C          	.db	$3c		; ....########.... 
0025+  0BA3             
0026+  0BA3 3C          	.db	$3c		; ....########.... $32
0027+  0BA4 7E          	.db	$7e		; ..############.. 
0028+  0BA5 66          	.db	$66		; ..####....####.. 
0029+  0BA6 60          	.db	$60		; ..........####.. 
0030+  0BA7 7C          	.db	$7c		; ....##########.. 
0031+  0BA8 3E          	.db	$3e		; ..##########.... 
0032+  0BA9 06          	.db	$06		; ..####.......... 
0033+  0BAA 06          	.db	$06		; ..####.......... 
0034+  0BAB 7E          	.db	$7e		; ..############.. 
0035+  0BAC 7E          	.db	$7e		; ..############.. 
0036+  0BAD             
0037+  0BAD 3C          	.db	$3c		; ....########.... $33
0038+  0BAE 7E          	.db	$7e		; ..############.. 
0039+  0BAF 66          	.db	$66		; ..####....####.. 
0040+  0BB0 60          	.db	$60		; ..........####.. 
0041+  0BB1 38          	.db	$38		; ......######.... 
0042+  0BB2 78          	.db	$78		; ......########.. 
0043+  0BB3 60          	.db	$60		; ..........####.. 
0044+  0BB4 66          	.db	$66		; ..####....####.. 
0045+  0BB5 7E          	.db	$7e		; ..############.. 
0046+  0BB6 3C          	.db	$3c		; ....########.... 
0047+  0BB7             
0048+  0BB7 66          	.db	$66		; ..####....####.. $34
0049+  0BB8 66          	.db	$66		; ..####....####.. 
0050+  0BB9 66          	.db	$66		; ..####....####.. 
0051+  0BBA 66          	.db	$66		; ..####....####.. 
0052+  0BBB 7E          	.db	$7e		; ..############.. 
0053+  0BBC 7E          	.db	$7e		; ..############.. 
0054+  0BBD 60          	.db	$60		; ..........####.. 
0055+  0BBE 60          	.db	$60		; ..........####.. 
0056+  0BBF 60          	.db	$60		; ..........####.. 
0057+  0BC0 60          	.db	$60		; ..........####.. 
0058+  0BC1             
0059+  0BC1 3E          	.db	$3e		; ..##########.... $35
0060+  0BC2 3E          	.db	$3e		; ..##########.... 
0061+  0BC3 06          	.db	$06		; ..####.......... 
0062+  0BC4 06          	.db	$06		; ..####.......... 
0063+  0BC5 3E          	.db	$3e		; ..##########.... 
0064+  0BC6 7E          	.db	$7e		; ..############.. 
0065+  0BC7 60          	.db	$60		; ..........####.. 
0066+  0BC8 66          	.db	$66		; ..####....####.. 
0067+  0BC9 7E          	.db	$7e		; ..############.. 
0068+  0BCA 3C          	.db	$3c		; ....########.... 
0069+  0BCB             
0070+  0BCB 3C          	.db	$3c		; ....########.... $36
0071+  0BCC 3E          	.db	$3e		; ..##########.... 
0072+  0BCD 06          	.db	$06		; ..####.......... 
0073+  0BCE 06          	.db	$06		; ..####.......... 
0074+  0BCF 3E          	.db	$3e		; ..##########.... 
0075+  0BD0 7E          	.db	$7e		; ..############.. 
0076+  0BD1 66          	.db	$66		; ..####....####.. 
0077+  0BD2 66          	.db	$66		; ..####....####.. 
0078+  0BD3 7E          	.db	$7e		; ..############.. 
0079+  0BD4 3C          	.db	$3c		; ....########.... 
0080+  0BD5             
0081+  0BD5 7E          	.db	$7e		; ..############.. $37
0082+  0BD6 7E          	.db	$7e		; ..############.. 
0083+  0BD7 60          	.db	$60		; ..........####.. 
0084+  0BD8 70          	.db	$70		; ........######.. 
0085+  0BD9 30          	.db	$30		; ........####.... 
0086+  0BDA 38          	.db	$38		; ......######.... 
0087+  0BDB 18          	.db	$18		; ......####...... 
0088+  0BDC 1C          	.db	$1c		; ....######...... 
0089+  0BDD 0C          	.db	$0c		; ....####........ 
0090+  0BDE 0C          	.db	$0c		; ....####........ 
0091+  0BDF             
0092+  0BDF 3C          	.db	$3c		; ....########.... $38
0093+  0BE0 7E          	.db	$7e		; ..############.. 
0094+  0BE1 66          	.db	$66		; ..####....####.. 
0095+  0BE2 66          	.db	$66		; ..####....####.. 
0096+  0BE3 3C          	.db	$3c		; ....########.... 
0097+  0BE4 7E          	.db	$7e		; ..############.. 
0098+  0BE5 66          	.db	$66		; ..####....####.. 
0099+  0BE6 66          	.db	$66		; ..####....####.. 
0100+  0BE7 7E          	.db	$7e		; ..############.. 
0101+  0BE8 3C          	.db	$3c		; ....########.... 
0102+  0BE9             
0103+  0BE9 3C          	.db	$3c		; ....########.... $39
0104+  0BEA 7E          	.db	$7e		; ..############.. 
0105+  0BEB 66          	.db	$66		; ..####....####.. 
0106+  0BEC 66          	.db	$66		; ..####....####.. 
0107+  0BED 7E          	.db	$7e		; ..############.. 
0108+  0BEE 7C          	.db	$7c		; ....##########.. 
0109+  0BEF 60          	.db	$60		; ..........####.. 
0110+  0BF0 60          	.db	$60		; ..........####.. 
0111+  0BF1 7C          	.db	$7c		; ....##########.. 
0112+  0BF2 3C          	.db	$3c		; ....########.... 
0113+  0BF3             
0114+  0BF3             WATER0:	
0115+  0BF3 0C          	.db	$0c		; ....####........ $3A
0116+  0BF4 93          	.db	$93		; ####....##....## 
0117+  0BF5 60          	.db	$60		; ..........####.. 
0118+  0BF6 00          	.db	$00		; ................ 
0119+  0BF7 00          	.db	$00		; ................ 
0120+  0BF8 00          	.db	$00		; ................ 
0121+  0BF9 00          	.db	$00		; ................ 
0122+  0BFA 00          	.db	$00		; ................ 
0123+  0BFB 00          	.db	$00		; ................ 
0124+  0BFC 00          	.db	$00		; ................ 
0125+  0BFD             
0126+  0BFD 60          	.db	$60		; ..........####.. $3B
0127+  0BFE 99          	.db	$99		; ##....####....## 
0128+  0BFF 06          	.db	$06		; ..####.......... 
0129+  0C00 00          	.db	$00		; ................ 
0130+  0C01 00          	.db	$00		; ................ 
0131+  0C02 00          	.db	$00		; ................ 
0132+  0C03 00          	.db	$00		; ................ 
0133+  0C04 00          	.db	$00		; ................ 
0134+  0C05 00          	.db	$00		; ................ 
0135+  0C06 00          	.db	$00		; ................ 
0136+  0C07             
0137+  0C07 30          	.db	$30		; ........####.... $3C
0138+  0C08 CD          	.db	$cd		; ##..####....#### 
0139+  0C09 02          	.db	$02		; ..##............ 
0140+  0C0A 00          	.db	$00		; ................ 
0141+  0C0B 00          	.db	$00		; ................ 
0142+  0C0C 00          	.db	$00		; ................ 
0143+  0C0D 00          	.db	$00		; ................ 
0144+  0C0E 00          	.db	$00		; ................ 
0145+  0C0F 00          	.db	$00		; ................ 
0146+  0C10 00          	.db	$00		; ................ 
0147+  0C11             
0148+  0C11 02          	.db	$02		; ..##............ $3D
0149+  0C12 C0          	.db	$c0		; ............#### 
0150+  0C13 78          	.db	$78		; ......########.. 
0151+  0C14 E0          	.db	$e0		; ..........###### 
0152+  0C15 80          	.db	$80		; ..............## 
0153+  0C16 F0          	.db	$f0		; ........######## 
0154+  0C17 01          	.db	$01		; ##.............. 
0155+  0C18 C0          	.db	$c0		; ............#### 
0156+  0C19 F0          	.db	$f0		; ........######## 
0157+  0C1A 7C          	.db	$7c		; ....##########.. 
0158+  0C1B             
0159+  0C1B 08          	.db	$08		; ......##........ $3E
0160+  0C1C 1C          	.db	$1c		; ....######...... 
0161+  0C1D 3E          	.db	$3e		; ..##########.... 
0162+  0C1E 7F          	.db	$7f		; ##############.. 
0163+  0C1F FF          	.db	$ff		; ################ 
0164+  0C20 FF          	.db	$ff		; ################ 
0165+  0C21 BF          	.db	$bf		; ############..## 
0166+  0C22 1F          	.db	$1f		; ##########...... 
0167+  0C23 02          	.db	$02		; ..##............ 
0168+  0C24 40          	.db	$40		; ............##.. 
0169+  0C25             
0170+  0C25 02          	.db	$02		; ..##............ $3F
0171+  0C26 80          	.db	$80		; ..............## 
0172+  0C27 78          	.db	$78		; ......########.. 
0173+  0C28 1E          	.db	$1e		; ..########...... 
0174+  0C29 07          	.db	$07		; ######.......... 
0175+  0C2A 01          	.db	$01		; ##.............. 
0176+  0C2B 7C          	.db	$7c		; ....##########.. 
0177+  0C2C F8          	.db	$f8		; ......########## 
0178+  0C2D 0C          	.db	$0c		; ....####........ 
0179+  0C2E 10          	.db	$10		; ........##...... 
0180+  0C2F             
0181+  0C2F 00          	.db	$00		; ................ $40
0182+  0C30 00          	.db	$00		; ..######..###### 
0183+  0C31 00          	.db	$00		; ....####..##..## 
0184+  0C32 00          	.db	$00		; ..##......##..## 
0185+  0C33 00          	.db	$00		; ..######..###### 
0186+  0C34 00          	.db	$00		; ................ 
0187+  0C35 00          	.db	$00		; ..######..##..## 
0188+  0C36 00          	.db	$00		; ....####..###### 
0189+  0C37 00          	.db	$00		; ..##..........## 
0190+  0C38 00          	.db	$00		; ..######......## 
0191+  0C39             
0192+  0C39 18          	.db	$18		; ......####...... $41
0193+  0C3A 3C          	.db	$3c		; ....########.... 
0194+  0C3B 7E          	.db	$7e		; ..############.. 
0195+  0C3C 66          	.db	$66		; ..####....####.. 
0196+  0C3D 66          	.db	$66		; ..####....####.. 
0197+  0C3E 66          	.db	$66		; ..####....####.. 
0198+  0C3F 7E          	.db	$7e		; ..############.. 
0199+  0C40 7E          	.db	$7e		; ..############.. 
0200+  0C41 66          	.db	$66		; ..####....####.. 
0201+  0C42 66          	.db	$66		; ..####....####.. 
0202+  0C43             
0203+  0C43 3E          	.db	$3e		; ..##########.... $42
0204+  0C44 7E          	.db	$7e		; ..############.. 
0205+  0C45 66          	.db	$66		; ..####....####.. 
0206+  0C46 66          	.db	$66		; ..####....####.. 
0207+  0C47 3E          	.db	$3e		; ..##########.... 
0208+  0C48 7E          	.db	$7e		; ..############.. 
0209+  0C49 66          	.db	$66		; ..####....####.. 
0210+  0C4A 66          	.db	$66		; ..####....####.. 
0211+  0C4B 7E          	.db	$7e		; ..############.. 
0212+  0C4C 3E          	.db	$3e		; ..##########.... 
0213+  0C4D             
0214+  0C4D 3C          	.db	$3c		; ....########.... $43
0215+  0C4E 7E          	.db	$7e		; ..############.. 
0216+  0C4F 66          	.db	$66		; ..####....####.. 
0217+  0C50 06          	.db	$06		; ..####.......... 
0218+  0C51 06          	.db	$06		; ..####.......... 
0219+  0C52 06          	.db	$06		; ..####.......... 
0220+  0C53 06          	.db	$06		; ..####.......... 
0221+  0C54 66          	.db	$66		; ..####....####.. 
0222+  0C55 7E          	.db	$7e		; ..############.. 
0223+  0C56 3C          	.db	$3c		; ....########.... 
0224+  0C57             
0225+  0C57 3E          	.db	$3e		; ..##########.... $44
0226+  0C58 7E          	.db	$7e		; ..############.. 
0227+  0C59 66          	.db	$66		; ..####....####.. 
0228+  0C5A 66          	.db	$66		; ..####....####.. 
0229+  0C5B 66          	.db	$66		; ..####....####.. 
0230+  0C5C 66          	.db	$66		; ..####....####.. 
0231+  0C5D 66          	.db	$66		; ..####....####.. 
0232+  0C5E 66          	.db	$66		; ..####....####.. 
0233+  0C5F 7E          	.db	$7e		; ..############.. 
0234+  0C60 3E          	.db	$3e		; ..##########.... 
0235+  0C61             
0236+  0C61 7E          	.db	$7e		; ..############.. $45
0237+  0C62 7E          	.db	$7e		; ..############.. 
0238+  0C63 06          	.db	$06		; ..####.......... 
0239+  0C64 06          	.db	$06		; ..####.......... 
0240+  0C65 3E          	.db	$3e		; ..##########.... 
0241+  0C66 3E          	.db	$3e		; ..##########.... 
0242+  0C67 06          	.db	$06		; ..####.......... 
0243+  0C68 06          	.db	$06		; ..####.......... 
0244+  0C69 7E          	.db	$7e		; ..############.. 
0245+  0C6A 7E          	.db	$7e		; ..############.. 
0246+  0C6B             
0247+  0C6B 7E          	.db	$7e		; ..############.. $46
0248+  0C6C 7E          	.db	$7e		; ..############.. 
0249+  0C6D 06          	.db	$06		; ..####.......... 
0250+  0C6E 06          	.db	$06		; ..####.......... 
0251+  0C6F 3E          	.db	$3e		; ..##########.... 
0252+  0C70 3E          	.db	$3e		; ..##########.... 
0253+  0C71 06          	.db	$06		; ..####.......... 
0254+  0C72 06          	.db	$06		; ..####.......... 
0255+  0C73 06          	.db	$06		; ..####.......... 
0256+  0C74 06          	.db	$06		; ..####.......... 
0257+  0C75             
0258+  0C75 3C          	.db	$3c		; ....########.... $47
0259+  0C76 7E          	.db	$7e		; ..############.. 
0260+  0C77 66          	.db	$66		; ..####....####.. 
0261+  0C78 06          	.db	$06		; ..####.......... 
0262+  0C79 06          	.db	$06		; ..####.......... 
0263+  0C7A 76          	.db	$76		; ..####..######.. 
0264+  0C7B 76          	.db	$76		; ..####..######.. 
0265+  0C7C 66          	.db	$66		; ..####....####.. 
0266+  0C7D 7E          	.db	$7e		; ..############.. 
0267+  0C7E 3C          	.db	$3c		; ....########.... 
0268+  0C7F             
0269+  0C7F 66          	.db	$66		; ..####....####.. $48
0270+  0C80 66          	.db	$66		; ..####....####.. 
0271+  0C81 66          	.db	$66		; ..####....####.. 
0272+  0C82 66          	.db	$66		; ..####....####.. 
0273+  0C83 7E          	.db	$7e		; ..############.. 
0274+  0C84 7E          	.db	$7e		; ..############.. 
0275+  0C85 66          	.db	$66		; ..####....####.. 
0276+  0C86 66          	.db	$66		; ..####....####.. 
0277+  0C87 66          	.db	$66		; ..####....####.. 
0278+  0C88 66          	.db	$66		; ..####....####.. 
0279+  0C89             
0280+  0C89 3C          	.db	$3c		; ....########.... $49
0281+  0C8A 3C          	.db	$3c		; ....########.... 
0282+  0C8B 18          	.db	$18		; ......####...... 
0283+  0C8C 18          	.db	$18		; ......####...... 
0284+  0C8D 18          	.db	$18		; ......####...... 
0285+  0C8E 18          	.db	$18		; ......####...... 
0286+  0C8F 18          	.db	$18		; ......####...... 
0287+  0C90 18          	.db	$18		; ......####...... 
0288+  0C91 3C          	.db	$3c		; ....########.... 
0289+  0C92 3C          	.db	$3c		; ....########.... 
0290+  0C93             
0291+  0C93 60          	.db	$60		; ..........####.. $4A
0292+  0C94 60          	.db	$60		; ..........####.. 
0293+  0C95 60          	.db	$60		; ..........####.. 
0294+  0C96 60          	.db	$60		; ..........####.. 
0295+  0C97 60          	.db	$60		; ..........####.. 
0296+  0C98 60          	.db	$60		; ..........####.. 
0297+  0C99 60          	.db	$60		; ..........####.. 
0298+  0C9A 66          	.db	$66		; ..####....####.. 
0299+  0C9B 7E          	.db	$7e		; ..############.. 
0300+  0C9C 3C          	.db	$3c		; ....########.... 
0301+  0C9D             
0302+  0C9D 66          	.db	$66		; ..####....####.. $4B
0303+  0C9E 66          	.db	$66		; ..####....####.. 
0304+  0C9F 76          	.db	$76		; ..####..######.. 
0305+  0CA0 3E          	.db	$3e		; ..##########.... 
0306+  0CA1 1E          	.db	$1e		; ..########...... 
0307+  0CA2 1E          	.db	$1e		; ..########...... 
0308+  0CA3 3E          	.db	$3e		; ..##########.... 
0309+  0CA4 76          	.db	$76		; ..####..######.. 
0310+  0CA5 66          	.db	$66		; ..####....####.. 
0311+  0CA6 66          	.db	$66		; ..####....####.. 
0312+  0CA7             
0313+  0CA7 06          	.db	$06		; ..####.......... $4C
0314+  0CA8 06          	.db	$06		; ..####.......... 
0315+  0CA9 06          	.db	$06		; ..####.......... 
0316+  0CAA 06          	.db	$06		; ..####.......... 
0317+  0CAB 06          	.db	$06		; ..####.......... 
0318+  0CAC 06          	.db	$06		; ..####.......... 
0319+  0CAD 06          	.db	$06		; ..####.......... 
0320+  0CAE 06          	.db	$06		; ..####.......... 
0321+  0CAF 7E          	.db	$7e		; ..############.. 
0322+  0CB0 7E          	.db	$7e		; ..############.. 
0323+  0CB1             
0324+  0CB1 C3          	.db	$c3		; ####........#### $4D
0325+  0CB2 C3          	.db	$c3		; ####........#### 
0326+  0CB3 E7          	.db	$e7		; ######....###### 
0327+  0CB4 E7          	.db	$e7		; ######....###### 
0328+  0CB5 FF          	.db	$ff		; ################ 
0329+  0CB6 FF          	.db	$ff		; ################ 
0330+  0CB7 DB          	.db	$db		; ####..####..#### 
0331+  0CB8 C3          	.db	$c3		; ####........#### 
0332+  0CB9 C3          	.db	$c3		; ####........#### 
0333+  0CBA C3          	.db	$c3		; ####........#### 
0334+  0CBB             
0335+  0CBB 66          	.db	$66		; ..####....####.. $4E
0336+  0CBC 66          	.db	$66		; ..####....####.. 
0337+  0CBD 6E          	.db	$6e		; ..######..####.. 
0338+  0CBE 6E          	.db	$6e		; ..######..####.. 
0339+  0CBF 7E          	.db	$7e		; ..############.. 
0340+  0CC0 7E          	.db	$7e		; ..############.. 
0341+  0CC1 76          	.db	$76		; ..####..######.. 
0342+  0CC2 76          	.db	$76		; ..####..######.. 
0343+  0CC3 66          	.db	$66		; ..####....####.. 
0344+  0CC4 66          	.db	$66		; ..####....####.. 
0345+  0CC5             
0346+  0CC5 3C          	.db	$3c		; ....########.... $4F
0347+  0CC6 7E          	.db	$7e		; ..############.. 
0348+  0CC7 66          	.db	$66		; ..####....####.. 
0349+  0CC8 66          	.db	$66		; ..####....####.. 
0350+  0CC9 66          	.db	$66		; ..####....####.. 
0351+  0CCA 66          	.db	$66		; ..####....####.. 
0352+  0CCB 66          	.db	$66		; ..####....####.. 
0353+  0CCC 66          	.db	$66		; ..####....####.. 
0354+  0CCD 7E          	.db	$7e		; ..############.. 
0355+  0CCE 3C          	.db	$3c		; ....########.... 
0356+  0CCF             
0357+  0CCF 3E          	.db	$3e		; ..##########.... $50
0358+  0CD0 7E          	.db	$7e		; ..############.. 
0359+  0CD1 66          	.db	$66		; ..####....####.. 
0360+  0CD2 66          	.db	$66		; ..####....####.. 
0361+  0CD3 7E          	.db	$7e		; ..############.. 
0362+  0CD4 3E          	.db	$3e		; ..##########.... 
0363+  0CD5 06          	.db	$06		; ..####.......... 
0364+  0CD6 06          	.db	$06		; ..####.......... 
0365+  0CD7 06          	.db	$06		; ..####.......... 
0366+  0CD8 06          	.db	$06		; ..####.......... 
0367+  0CD9             
0368+  0CD9~            #IF SW2024
0369+  0CD9~            	.db	$00		; ................ $51
0370+  0CD9~            	.db	$00		; ................ 
0371+  0CD9~            	.db	$01		; ##.............. 
0372+  0CD9~            	.db	$01		; ##.............. 
0373+  0CD9~            	.db	$84		; ....##........## 
0374+  0CD9~            	.db	$ca		; ..##..##....#### 
0375+  0CD9~            	.db	$a8		; ......##..##..## 
0376+  0CD9~            	.db	$e4		; ....##....###### 
0377+  0CD9~            	.db	$82		; ..##..........## 
0378+  0CD9~            	.db	$8e		; ..######......##
0379+  0CD9             #ELSE
0380+  0CD9 3C          	.db	$3c		; ....########.... $51
0381+  0CDA 7E          	.db	$7e		; ..############.. 
0382+  0CDB 66          	.db	$66		; ..####....####.. 
0383+  0CDC 66          	.db	$66		; ..####....####.. 
0384+  0CDD 66          	.db	$66		; ..####....####.. 
0385+  0CDE 66          	.db	$66		; ..####....####.. 
0386+  0CDF 66          	.db	$66		; ..####....####.. 
0387+  0CE0 66          	.db	$66		; ..####....####.. 
0388+  0CE1 7E          	.db	$7e		; ..############.. 
0389+  0CE2 5C          	.db	$5c		; ....######..##.. 
0390+  0CE3             #ENDIF
0391+  0CE3             
0392+  0CE3 3E          	.db	$3e		; ..##########.... $52
0393+  0CE4 7E          	.db	$7e		; ..############.. 
0394+  0CE5 66          	.db	$66		; ..####....####.. 
0395+  0CE6 66          	.db	$66		; ..####....####.. 
0396+  0CE7 7E          	.db	$7e		; ..############.. 
0397+  0CE8 3E          	.db	$3e		; ..##########.... 
0398+  0CE9 76          	.db	$76		; ..####..######.. 
0399+  0CEA 66          	.db	$66		; ..####....####.. 
0400+  0CEB 66          	.db	$66		; ..####....####.. 
0401+  0CEC 66          	.db	$66		; ..####....####.. 
0402+  0CED             
0403+  0CED 3C          	.db	$3c		; ....########.... $53
0404+  0CEE 7E          	.db	$7e		; ..############.. 
0405+  0CEF 66          	.db	$66		; ..####....####.. 
0406+  0CF0 06          	.db	$06		; ..####.......... 
0407+  0CF1 3E          	.db	$3e		; ..##########.... 
0408+  0CF2 7C          	.db	$7c		; ....##########.. 
0409+  0CF3 60          	.db	$60		; ..........####.. 
0410+  0CF4 66          	.db	$66		; ..####....####.. 
0411+  0CF5 7E          	.db	$7e		; ..############.. 
0412+  0CF6 3C          	.db	$3c		; ....########.... 
0413+  0CF7             
0414+  0CF7 7E          	.db	$7e		; ..############.. $54
0415+  0CF8 7E          	.db	$7e		; ..############.. 
0416+  0CF9 18          	.db	$18		; ......####...... 
0417+  0CFA 18          	.db	$18		; ......####...... 
0418+  0CFB 18          	.db	$18		; ......####...... 
0419+  0CFC 18          	.db	$18		; ......####...... 
0420+  0CFD 18          	.db	$18		; ......####...... 
0421+  0CFE 18          	.db	$18		; ......####...... 
0422+  0CFF 18          	.db	$18		; ......####...... 
0423+  0D00 18          	.db	$18		; ......####...... 
0424+  0D01             
0425+  0D01 66          	.db	$66		; ..####....####.. $55
0426+  0D02 66          	.db	$66		; ..####....####.. 
0427+  0D03 66          	.db	$66		; ..####....####.. 
0428+  0D04 66          	.db	$66		; ..####....####.. 
0429+  0D05 66          	.db	$66		; ..####....####.. 
0430+  0D06 66          	.db	$66		; ..####....####.. 
0431+  0D07 66          	.db	$66		; ..####....####.. 
0432+  0D08 66          	.db	$66		; ..####....####.. 
0433+  0D09 7E          	.db	$7e		; ..############.. 
0434+  0D0A 3C          	.db	$3c		; ....########.... 
0435+  0D0B             
0436+  0D0B 66          	.db	$66		; ..####....####.. $56
0437+  0D0C 66          	.db	$66		; ..####....####.. 
0438+  0D0D 66          	.db	$66		; ..####....####.. 
0439+  0D0E 66          	.db	$66		; ..####....####.. 
0440+  0D0F 66          	.db	$66		; ..####....####.. 
0441+  0D10 7E          	.db	$7e		; ..############.. 
0442+  0D11 3C          	.db	$3c		; ....########.... 
0443+  0D12 3C          	.db	$3c		; ....########.... 
0444+  0D13 18          	.db	$18		; ......####...... 
0445+  0D14 18          	.db	$18		; ......####...... 
0446+  0D15             
0447+  0D15 C3          	.db	$c3		; ####........#### $57
0448+  0D16 C3          	.db	$c3		; ####........#### 
0449+  0D17 C3          	.db	$c3		; ####........#### 
0450+  0D18 DB          	.db	$db		; ####..####..#### 
0451+  0D19 FF          	.db	$ff		; ################ 
0452+  0D1A FF          	.db	$ff		; ################ 
0453+  0D1B E7          	.db	$e7		; ######....###### 
0454+  0D1C E7          	.db	$e7		; ######....###### 
0455+  0D1D C3          	.db	$c3		; ####........#### 
0456+  0D1E C3          	.db	$c3		; ####........#### 
0457+  0D1F             
0458+  0D1F 66          	.db	$66		; ..####....####.. $58
0459+  0D20 66          	.db	$66		; ..####....####.. 
0460+  0D21 7E          	.db	$7e		; ..############.. 
0461+  0D22 3C          	.db	$3c		; ....########.... 
0462+  0D23 18          	.db	$18		; ......####...... 
0463+  0D24 18          	.db	$18		; ......####...... 
0464+  0D25 3C          	.db	$3c		; ....########.... 
0465+  0D26 7E          	.db	$7e		; ..############.. 
0466+  0D27 66          	.db	$66		; ..####....####.. 
0467+  0D28 66          	.db	$66		; ..####....####.. 
0468+  0D29             
0469+  0D29 66          	.db	$66		; ..####....####.. $59
0470+  0D2A 66          	.db	$66		; ..####....####.. 
0471+  0D2B 7E          	.db	$7e		; ..############.. 
0472+  0D2C 3C          	.db	$3c		; ....########.... 
0473+  0D2D 18          	.db	$18		; ......####...... 
0474+  0D2E 18          	.db	$18		; ......####...... 
0475+  0D2F 18          	.db	$18		; ......####...... 
0476+  0D30 18          	.db	$18		; ......####...... 
0477+  0D31 18          	.db	$18		; ......####...... 
0478+  0D32 18          	.db	$18		; ......####...... 
0479+  0D33             
0480+  0D33 7E          	.db	$7e		; ..############.. $5A
0481+  0D34 7E          	.db	$7e		; ..############.. 
0482+  0D35 60          	.db	$60		; ..........####.. 
0483+  0D36 70          	.db	$70		; ........######.. 
0484+  0D37 38          	.db	$38		; ......######.... 
0485+  0D38 1C          	.db	$1c		; ....######...... 
0486+  0D39 0E          	.db	$0e		; ..######........ 
0487+  0D3A 06          	.db	$06		; ..####.......... 
0488+  0D3B 7E          	.db	$7e		; ..############.. 
0489+  0D3C 7E          	.db	$7e		; ..############.. 
0490+  0D3D             				
0491+  0D3D             	.end
0492+  0D3D             				2612   0D3D             
2613   0D3D             				
2614   0D3D             				;; Sprites
2615   0D3D             GFX:														; $0D3D
2616   0D3D             #include "swgfx.asm"
0001+  0D3D             				;; 	.org	$0d3d
0002+  0D3D             SHIP0:	
0003+  0D3D 05 0C       	.db	$05, $0c		; Size 5 x 12
0004+  0D3F 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0004+  0D43 00 
0005+  0D44 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0005+  0D48 00 
0006+  0D49 00 60 0E 00 	.db	$00, $60, $0e, $00, $00		; ................ ..........####.. ..######........ ................ ................ 
0006+  0D4D 00 
0007+  0D4E 00 E0 CE 3F 	.db	$00, $e0, $ce, $3f, $00		; ................ ..........###### ..######....#### ############.... ................ 
0007+  0D52 00 
0008+  0D53 00 E0 DE 03 	.db	$00, $e0, $de, $03, $00		; ................ ..........###### ..########..#### ####............ ................ 
0008+  0D57 00 
0009+  0D58 F8 F7 DF F7 	.db	$f8, $f7, $df, $f7, $0f		; ......########## ######..######## ##########..#### ######..######## ########........ 
0009+  0D5C 0F 
0010+  0D5D 80 F7 DF F7 	.db	$80, $f7, $df, $f7, $00		; ..............## ######..######## ##########..#### ######..######## ................ 
0010+  0D61 00 
0011+  0D62 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0011+  0D66 FF 
0012+  0D67 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $7f		; ################ ################ ################ ################ ##############.. 
0012+  0D6B 7F 
0013+  0D6C FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $3f		; ################ ################ ################ ################ ############.... 
0013+  0D70 3F 
0014+  0D71 FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $1f		; ..############## ################ ################ ################ ##########...... 
0014+  0D75 1F 
0015+  0D76 FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $0f		; ..############## ################ ################ ################ ########........ 
0015+  0D7A 0F 
0016+  0D7B             
0017+  0D7B             SHIP1:	
0018+  0D7B 04 0C       	.db	$04, $0c		; Size 4 x 12
0019+  0D7D 00 00 03 00 	.db	$00, $00, $03, $00		; ................ ................ ####............ ................ 
0020+  0D81 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0021+  0D85 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0022+  0D89 02 B6 03 00 	.db	$02, $b6, $03, $00		; ..##............ ..####..####..## ####............ ................ 
0023+  0D8D 87 FF F3 07 	.db	$87, $ff, $f3, $07		; ######........## ################ ####....######## ######.......... 
0024+  0D91 E2 FF F7 00 	.db	$e2, $ff, $f7, $00		; ..##......###### ################ ######..######## ................ 
0025+  0D95 FF FF FF FF 	.db	$ff, $ff, $ff, $ff		; ################ ################ ################ ################ 
0026+  0D99 FF FF FF 7F 	.db	$ff, $ff, $ff, $7f		; ################ ################ ################ ##############.. 
0027+  0D9D FF FF FF 3F 	.db	$ff, $ff, $ff, $3f		; ################ ################ ################ ############.... 
0028+  0DA1 FC FF FF 1F 	.db	$fc, $ff, $ff, $1f		; ....############ ################ ################ ##########...... 
0029+  0DA5 FC FF FF 0F 	.db	$fc, $ff, $ff, $0f		; ....############ ################ ################ ########........ 
0030+  0DA9 F8 FF FF 07 	.db	$f8, $ff, $ff, $07		; ......########## ################ ################ ######.......... 
0031+  0DAD             
0032+  0DAD             SHIP2:	
0033+  0DAD 05 0C       	.db	$05, $0c		; Size 5 x 12
0034+  0DAF 00 00 40 00 	.db	$00, $00, $40, $00, $00		; ................ ................ ............##.. ................ ................ 
0034+  0DB3 00 
0035+  0DB4 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0035+  0DB8 00 
0036+  0DB9 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0036+  0DBD 00 
0037+  0DBE 00 80 F0 1E 	.db	$00, $80, $f0, $1e, $00		; ................ ..............## ........######## ..########...... ................ 
0037+  0DC2 00 
0038+  0DC3 00 00 FB 06 	.db	$00, $00, $fb, $06, $00		; ................ ................ ####..########## ..####.......... ................ 
0038+  0DC7 00 
0039+  0DC8 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0039+  0DCC FF 
0040+  0DCD FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $3f		; ....############ ################ ################ ################ ############.... 
0040+  0DD1 3F 
0041+  0DD2 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $1f		; ....############ ################ ################ ################ ##########...... 
0041+  0DD6 1F 
0042+  0DD7 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $0f		; ....############ ################ ################ ################ ########........ 
0042+  0DDB 0F 
0043+  0DDC F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $07		; ......########## ################ ################ ################ ######.......... 
0043+  0DE0 07 
0044+  0DE1 F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0044+  0DE5 03 
0045+  0DE6 F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0045+  0DEA 03 
0046+  0DEB             
0047+  0DEB             SHIP3:	
0048+  0DEB 04 0B       	.db	$04, $0b		; Size 4 x 11
0049+  0DED 40 00 00 02 	.db	$40, $00, $00, $02		; ............##.. ................ ................ ..##............ 
0050+  0DF1 40 80 00 02 	.db	$40, $80, $00, $02		; ............##.. ..............## ................ ..##............ 
0051+  0DF5 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0052+  0DF9 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0053+  0DFD 40 F0 07 02 	.db	$40, $f0, $07, $02		; ............##.. ........######## ######.......... ..##............ 
0054+  0E01 FC F0 07 F8 	.db	$fc, $f0, $07, $f8		; ....############ ........######## ######.......... ......########## 
0055+  0E05 FC FF FF 7F 	.db	$fc, $ff, $ff, $7f		; ....############ ################ ################ ##############.. 
0056+  0E09 FC FF FF 3F 	.db	$fc, $ff, $ff, $3f		; ....############ ################ ################ ############.... 
0057+  0E0D F8 FF FF 1F 	.db	$f8, $ff, $ff, $1f		; ......########## ################ ################ ##########...... 
0058+  0E11 F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0059+  0E15 F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0060+  0E19             
0061+  0E19             SHIP4:	
0062+  0E19 04 0B       	.db	$04, $0b		; Size 4 x 11
0063+  0E1B 80 00 00 00 	.db	$80, $00, $00, $00		; ..............## ................ ................ ................ 
0064+  0E1F 00 00 00 01 	.db	$00, $00, $00, $01		; ................ ................ ................ ##.............. 
0065+  0E23 A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0066+  0E27 A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0067+  0E2B F0 01 00 01 	.db	$f0, $01, $00, $01		; ........######## ##.............. ................ ##.............. 
0068+  0E2F F8 01 00 F9 	.db	$f8, $01, $00, $f9		; ......########## ##.............. ................ ##....########## 
0069+  0E33 F8 FF FF 7F 	.db	$f8, $ff, $ff, $7f		; ......########## ################ ################ ##############.. 
0070+  0E37 F0 FF FF 3F 	.db	$f0, $ff, $ff, $3f		; ........######## ################ ################ ############.... 
0071+  0E3B F0 FF FF 1F 	.db	$f0, $ff, $ff, $1f		; ........######## ################ ################ ##########...... 
0072+  0E3F F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0073+  0E43 E0 FF FF 0F 	.db	$e0, $ff, $ff, $0f		; ..........###### ################ ################ ########........ 
0074+  0E47             
0075+  0E47             SHIP5:
0076+  0E47 02 06       	.db	$02, $06		; Size 2 x 6
0077+  0E49 00 03       	.db	$00, $03		; ................ ####............ 
0078+  0E4B 10 07       	.db	$10, $07		; ........##...... ######.......... 
0079+  0E4D E0 FF       	.db	$e0, $ff		; ..........###### ################ 
0080+  0E4F FF 7F       	.db	$ff, $7f		; ################ ##############.. 
0081+  0E51 FF 3F       	.db	$ff, $3f		; ################ ############.... 
0082+  0E53 FF 1F       	.db	$ff, $1f		; ################ ##########...... 
0083+  0E55             
0084+  0E55             SINK:	
0085+  0E55 02 0F       	.db	$02, $0f		; Size 2 x 15
0086+  0E57 10 00       	.db	$10, $00		; ........##...... ................ 
0087+  0E59 30 02       	.db	$30, $02		; ........####.... ..##............ 
0088+  0E5B 70 01       	.db	$70, $01		; ........######.. ##.............. 
0089+  0E5D FC 00       	.db	$fc, $00		; ....############ ................ 
0090+  0E5F F8 11       	.db	$f8, $11		; ......########## ##......##...... 
0091+  0E61 F0 3B       	.db	$f0, $3b		; ........######## ####..######.... 
0092+  0E63 E0 7F       	.db	$e0, $7f		; ..........###### ##############.. 
0093+  0E65 C0 3F       	.db	$c0, $3f		; ............#### ############.... 
0094+  0E67 80 1F       	.db	$80, $1f		; ..............## ##########...... 
0095+  0E69 00 3F       	.db	$00, $3f		; ................ ############.... 
0096+  0E6B 00 1E       	.db	$00, $1e		; ................ ..########...... 
0097+  0E6D 00 04       	.db	$00, $04		; ................ ....##.......... 
0098+  0E6F 00 48       	.db	$00, $48		; ................ ......##....##.. 
0099+  0E71 00 F8       	.db	$00, $f8		; ................ ......########## 
0100+  0E73 00 F8       	.db	$00, $f8		; ................ ......########## 
0101+  0E75             
0102+  0E75             SHOT0:	
0103+  0E75 01 11       	.db	$01, $11		; Size 1 x 17
0104+  0E77 10          	.db	$10		; ........##...... 
0105+  0E78 38          	.db	$38		; ......######.... 
0106+  0E79 38          	.db	$38		; ......######.... 
0107+  0E7A 38          	.db	$38		; ......######.... 
0108+  0E7B 38          	.db	$38		; ......######.... 
0109+  0E7C 38          	.db	$38		; ......######.... 
0110+  0E7D 38          	.db	$38		; ......######.... 
0111+  0E7E 38          	.db	$38		; ......######.... 
0112+  0E7F 38          	.db	$38		; ......######.... 
0113+  0E80 38          	.db	$38		; ......######.... 
0114+  0E81 38          	.db	$38		; ......######.... 
0115+  0E82 38          	.db	$38		; ......######.... 
0116+  0E83 38          	.db	$38		; ......######.... 
0117+  0E84 10          	.db	$10		; ........##...... 
0118+  0E85 10          	.db	$10		; ........##...... 
0119+  0E86 10          	.db	$10		; ........##...... 
0120+  0E87 38          	.db	$38		; ......######.... 
0121+  0E88             
0122+  0E88             SHOT1:	
0123+  0E88 01 0E       	.db	$01, $0e		; Size 1 x 14
0124+  0E8A 18          	.db	$18		; ......####...... 
0125+  0E8B 18          	.db	$18		; ......####...... 
0126+  0E8C 18          	.db	$18		; ......####...... 
0127+  0E8D 18          	.db	$18		; ......####...... 
0128+  0E8E 18          	.db	$18		; ......####...... 
0129+  0E8F 18          	.db	$18		; ......####...... 
0130+  0E90 18          	.db	$18		; ......####...... 
0131+  0E91 18          	.db	$18		; ......####...... 
0132+  0E92 18          	.db	$18		; ......####...... 
0133+  0E93 18          	.db	$18		; ......####...... 
0134+  0E94 18          	.db	$18		; ......####...... 
0135+  0E95 18          	.db	$18		; ......####...... 
0136+  0E96 00          	.db	$00		; ................ 
0137+  0E97 18          	.db	$18		; ......####...... 
0138+  0E98             
0139+  0E98             SHOT2:	
0140+  0E98 01 09       	.db	$01, $09		; Size 1 x 9
0141+  0E9A 10          	.db	$10		; ........##...... 
0142+  0E9B 10          	.db	$10		; ........##...... 
0143+  0E9C 10          	.db	$10		; ........##...... 
0144+  0E9D 10          	.db	$10		; ........##...... 
0145+  0E9E 10          	.db	$10		; ........##...... 
0146+  0E9F 10          	.db	$10		; ........##...... 
0147+  0EA0 10          	.db	$10		; ........##...... 
0148+  0EA1 10          	.db	$10		; ........##...... 
0149+  0EA2 10          	.db	$10		; ........##...... 
0150+  0EA3             
0151+  0EA3             MINE:
0152+  0EA3             #IF OLDMINE
0153+  0EA3 01 10       	.db	$01, $10		; Size 1 x 16
0154+  0EA5 10          	.db	$10		; ........##...... 
0155+  0EA6 BA          	.db	$ba		; ..##..######..## 
0156+  0EA7 7C          	.db	$7c		; ....##########.. 
0157+  0EA8 FE          	.db	$fe		; ..############## 
0158+  0EA9 7C          	.db	$7c		; ....##########.. 
0159+  0EAA 38          	.db	$38		; ......######.... 
0160+  0EAB 54          	.db	$54		; ....##..##..##.. 
0161+  0EAC 10          	.db	$10		; ........##...... 
0162+  0EAD 00          	.db	$00		; ................ 
0163+  0EAE 10          	.db	$10		; ........##...... 
0164+  0EAF 00          	.db	$00		; ................ 
0165+  0EB0 08          	.db	$08		; ......##........ 
0166+  0EB1 00          	.db	$00		; ................ 
0167+  0EB2 00          	.db	$00		; ................ 
0168+  0EB3 04          	.db	$04		; ....##.......... 
0169+  0EB4 00          	.db	$00		; ................ 
0170+  0EB5~            #ELSE														; Cant use left 2 pixels, right pixels, or top line, else artifacts
0171+  0EB5~            	.db	$01, $10		; Size 1 x 16
0172+  0EB5~            	.db	$00		; ................ 
0173+  0EB5~            	.db	$54		; ....##..##..##.. 
0174+  0EB5~            	.db	$38		; ......######.... 
0175+  0EB5~            	.db	$7c		; ....##########.. 
0176+  0EB5~            	.db	$6c		; ....####..####.. 
0177+  0EB5~            	.db	$7c		; ....##########.. 
0178+  0EB5~            	.db	$38		; ......######.... 
0179+  0EB5~            	.db	$54		; ....##..##..##.. 
0180+  0EB5~            	.db	$10		; ........##...... 
0181+  0EB5~            	.db	$00		; ................ 
0182+  0EB5~            	.db	$10		; ........##...... 
0183+  0EB5~            	.db	$00		; ................ 
0184+  0EB5~            	.db	$08		; ......##........ 
0185+  0EB5~            	.db	$00		; ................ 
0186+  0EB5~            	.db	$04		; ....##.......... 
0187+  0EB5~            	.db	$00		; ................ 
0188+  0EB5             #ENDIF
0189+  0EB5             			
0190+  0EB5             	.end
0191+  0EB5             				2617   0EB5             
2618   0EB5             				
2619   0EB5             				;; Table for $07CF
2620   0EB5             MINEEXP:																									; $0EB5
2621   0EB5 3D 3E 3F    				.db			$3D, $3E, $3F															; Mine explosion
2622   0EB8             
2623   0EB8             LTBLANK:																									; $0EB8
2624   0EB8 40 40 40 40 				.db			$40, $40, $40, $40, $40, $40, $40, $40		; ________
2624   0EBC 40 40 40 40 
2625   0EC0 40 40 40    				.db			$40, $40, $40															; ___
2626   0EC3             
2627   0EC3             LTOVER:																										; $0EC3
2628   0EC3 47 41 4D 45 				.db			$47, $41, $4D, $45, $40, $4F, $56, $45		; GAME_OVE
2628   0EC7 40 4F 56 45 
2629   0ECB 52          				.db			$52																				; R
2630   0ECC             
2631   0ECC             LTHIGH:																										; $0ECC 
2632   0ECC 48 49 47 48 				.db			$48, $49, $47, $48, $40, $53, $43, $4F		; HIGH_SCO
2632   0ED0 40 53 43 4F 
2633   0ED4 52 45 40 40 				.db			$52, $45, $40, $40, $40, $40, $40, $40		; RE______
2633   0ED8 40 40 40 40 
2634   0EDC 59 4F 55 52 				.db			$59, $4F, $55, $52, $40, $53, $43, $4F		; YOUR_SCO
2634   0EE0 40 53 43 4F 
2635   0EE4 52 45       				.db			$52, $45																	; RE
2636   0EE6             
2637   0EE6             LTCOIN:																										; $0EE6
2638   0EE6 49 4E 53 45 				.db			$49, $4E, $53, $45, $52, $54, $40, $43		; INSERT_C
2638   0EEA 52 54 40 43 
2639   0EEE 4F 49 4E    				.db			$4F, $49, $4E															; OIN
2640   0EF1             
2641   0EF1             LTPUSH:																										; $0EF1 
2642   0EF1 50 55 53 48 				.db			$50, $55, $53, $48, $40, $42, $55, $54		; PUSH_BUT
2642   0EF5 40 42 55 54 
2643   0EF9 54 4F 4E    				.db			$54, $4F, $4E															; TON
2644   0EFC             
2645   0EFC             LTSEA:																									  ; $0EFC 
2646   0EFC 53 45 41 40 				.db			$53, $45, $41, $40, $57, $4F, $4C, $46		; SEA_WOLF
2646   0F00 57 4F 4C 46 
2647   0F04             
2648   0F04             				;; Water
2649   0F04             L0F04:
2650   0F04 3A 3B 3C 3B 				.db			$3A, $3B, $3C, $3B, $3C, $3A, $3B, $3C		; All
2650   0F08 3C 3A 3B 3C 
2651   0F0C 3A 3C 3B 3C 				.db			$3A, $3C, $3B, $3C, $3A, $3B, $3A, $3C		; Water
2651   0F10 3A 3B 3A 3C 
2652   0F14 3B 3A 3C 3A 				.db			$3B, $3A, $3C, $3A, $3B, $3C, $3A, $3C		; Codes
2652   0F18 3B 3C 3A 3C 
2653   0F1C 3B 3C 3A 3B 				.db			$3B, $3C, $3A, $3B, $3C, $3A, $3B, $3C		; Here
2653   0F20 3C 3A 3B 3C 
2654   0F24             
2655   0F24             LTBONUS:																									; $0F24 
2656   0F24 42 4F 4E 55 				.db			$42, $4F, $4E, $55, $53										; BONUS
2656   0F28 53 
2657   0F29             
2658   0F29             LTTIME:																										; $0F29
2659   0F29 54 49 4D 45 				.db			$54, $49, $4D, $45												; TIME
2660   0F2D 2D          				.db			$2D																				; <space>
2661   0F2E 53 43 4F 52 				.db			$53, $43, $4F, $52, $45										; SCORE
2661   0F32 45 
2662   0F33             
2663   0F33             LTEXT:																					; $0F33 
2664   0F33 45 58 54 45 				.db			$45, $58, $54, $45, $4E, $44, $45, $44		; EXTENDED
2664   0F37 4E 44 45 44 
2665   0F3B 16          				.db			$16																				; <space>
2666   0F3C 54 49 4D 45 				.db			$54, $49, $4D, $45     										; TIME
2667   0F40             
2668   0F40             
2669   0F40             				;; Addresses of mine hit data
2670   0F40             TEMINE:
2671   0F40 44 0F       				.dw			TZAP																			; ZAP
2672   0F42 4C 0F       				.dw			TWAM																			; WAM
2673   0F44             				
2674   0F44             				;; Table from $0F40	(For ZAP)
2675   0F44             TZAP:		
2676   0F44 01 41 04 3D 				.db			$01, $41, $04, $3D, $5A, $2F, $50, $3F		; *ZAP*
2676   0F48 5A 2F 50 3F 
2677   0F4C             
2678   0F4C             				;; Table from $0F42	(For WAM)
2679   0F4C             TWAM:
2680   0F4C 01 41 04 3D 				.db			$01, $41, $04, $3D, $57, $2F, $4D, $3F		; *WAM*
2680   0F50 57 2F 4D 3F 
2681   0F54             				
2682   0F54             				;; 4-byte table (time per credit)
2683   0F54             LDTIME:																					; $0F54 
2684   0F54 61 71 81 91 				.db			$61, $71, $81, $91												; (Seconds) 
2685   0F58             
2686   0F58             				;; $0F57 = 8-byte score table (0,7 not used)
2687   0F58             TSCORE:																										; $0F58
2688   0F58 03 03 03 01 				.db			$03, $03, $03, $01, $01, $07							; 
2688   0F5C 01 07 
2689   0F5E             
2690   0F5E             				;; Table for $05D2	(0x20 long)
2691   0F5E             				;; Grey code decode
2692   0F5E             TGREY:																										; $0F5E 
2693   0F5E 00 08 18 10 				.db			$00, $08, $18, $10, $38, $30, $20, $28		; 
2693   0F62 38 30 20 28 
2694   0F66 78 70 60 68 				.db			$78, $70, $60, $68, $40, $48, $58, $50		; 
2694   0F6A 40 48 58 50 
2695   0F6E F8 F0 E0 E8 				.db			$F8, $F0, $E0, $E8, $C0, $C8, $D8, $D0		; 
2695   0F72 C0 C8 D8 D0 
2696   0F76 80 88 98 90 				.db			$80, $88, $98, $90, $B8, $B0, $A0, $A8		; 
2696   0F7A B8 B0 A0 A8 
2697   0F7E             
2698   0F7E             
2699   0F7E             				;; Ship tables
2700   0F7E             				;; 00-01	= Sprite address
2701   0F7E             				;; 02			= $20 = Right to Left, $40 = Left to Right
2702   0F7E             				;; 03 		= Initial Y
2703   0F7E             				;; 04 		= Delta Y (Always 0 for ships)
2704   0F7E             				;; 05			= Final X
2705   0F7E             				;; 06			= Initial X
2706   0F7E             				;; 07			= Delta X
2707   0F7E             	
2708   0F7E             				;; Even ship table
2709   0F7E             L0F7E:
2710   0F7E 0D 3D       				.db			(SHIP0>>8), SHIP0&$ff
2711   0F80 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 0
2711   0F84 00 02 
2712   0F86 0D 7B       				.db			(SHIP1>>8), SHIP1&$ff
2713   0F88 20 14 00 E0 				.db			$20, $14, $00, $E0, $00, $02		; Ship 1
2713   0F8C 00 02 
2714   0F8E 0D AD       				.db			(SHIP2>>8), SHIP2&$ff
2715   0F90 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 2
2715   0F94 00 02 
2716   0F96 0D EB       				.db			(SHIP3>>8), SHIP3&$ff
2717   0F98 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 3
2717   0F9C 00 01 
2718   0F9E 0E 19       				.db			(SHIP4>>8), SHIP4&$ff
2719   0FA0 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 4
2719   0FA4 00 01 
2720   0FA6 0E 47       				.db			(SHIP5>>8), SHIP5&$ff
2721   0FA8 20 1A 00 F0 				.db			$20, $1A, $00, $F0, $00, $03		; Ship 5
2721   0FAC 00 03 
2722   0FAE             
2723   0FAE             				;; Odd ship table
2724   0FAE             L0FAE:
2725   0FAE 0D 3D       				.db			(SHIP0>>8), SHIP0&$ff
2726   0FB0 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 0
2726   0FB4 D8 FE 
2727   0FB6 0D 7B       				.db			(SHIP1>>8), SHIP1&$ff
2728   0FB8 40 34 00 E0 				.db			$40, $34, $00, $E0, $E0, $FE		; Ship 1
2728   0FBC E0 FE 
2729   0FBE 0D AD       				.db			(SHIP2>>8), SHIP2&$ff
2730   0FC0 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 2
2730   0FC4 D8 FE 
2731   0FC6 0D EB       				.db			(SHIP3>>8), SHIP3&$ff
2732   0FC8 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 3
2732   0FCC E0 FF 
2733   0FCE 0E 19       				.db			(SHIP4>>8), SHIP4&$ff
2734   0FD0 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 4
2734   0FD4 E0 FF 
2735   0FD6 0E 47       				.db			(SHIP5>>8), SHIP5&$ff
2736   0FD8 40 3A 00 F0 				.db			$40, $3A, $00, $F0, $F0, $FD		; Ship 5
2736   0FDC F0 FD 
2737   0FDE             
2738   0FDE             	
2739   0FDE             				;; Ship type table
2740   0FDE             L0FDE:
2741   0FDE 06          				.db			$06															; Small, fast
2742   0FDF 04          				.db			$04															; Mid, 2 towers
2743   0FE0 02          				.db			$02															; Cross in back
2744   0FE1 06          				.db			$06															; Small, fast
2745   0FE2 03          				.db			$03															; Big, flat top
2746   0FE3 05          				.db			$05															; Tower in back
2747   0FE4 01          				.db			$01															; Battleship
2748   0FE5             	
2749   0FFF             	.org $0fff
2750   0FFF FF          				.db			$ff
2751   1000             			
2752   1000             .end
2753   1000             			tasm: Number of errors = 0

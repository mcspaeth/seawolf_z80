0001   0000             				;; @2024 Mark Spaeth -- mspaeth@gmail.com
0002   0000             				;; Whitespace for emacs asm mode w/ tab width 2
0003   0000             
0004   0000             				;; Programmed for tasm z80 mode using only 8080 instructions
0005   0000             
0006   0000             				;; Config variables
0007   0000             				;; Original release: SC3DIG=0, OLDDIP=1, OLDINT=1, OLDTEST=1, GETMAC=0, MINEFIX=0, FANCY=0, SEAMISS=0
0008   0000             				;; 3 digit scoring:  SC3DIG=1, OLDDIP=1, OLDINT=0, OLDTEST=0, GETMAC=0, MINEFIX=0, FANCY=0, SEAMISS=0
0009   0000             
0010   0000             SC3DIG	= 1											; 3 digit scoring, simplified coinage
0011   0000             OLDDIP	= 0											; Table lookup vs calculated DIPs
0012   0000             OLDINT	= 0											; Exclude interpreter changes that save bytes
0013   0000             OLDTEST	= 0											; Use $0200 byte self test routine
0014   0000             GETMAC	= 0											; Use jsr for GETBC, GETDE (saves 1 byte per)
0015   0000             MOREEXP	= 1											; More mine explosion text
0016   0000             MINEFIX	= 1											; Fix the mines jumping on reload
0017   0000             FANCY		= 1											; Bidirectional / multi-speed mines
0018   0000             DOCOPY	= 1											; Add copyright to self test
0019   0000             HSSAVE	= 0											; Prevent HS from being cleared at reset
0020   0000             SEAMISS	= 1											; Count down misses instead of time
0021   0000             
0022   0000             				;; Graphics changes
0023   0000             OLDMINE	= 1-FANCY								; Use original mine gfx
0024   0000             SW2024	= 1											; Change Q to '24
0025   0000             
0026   0000             				;; Generic variables
0027   0000             SINC		= $000D									; Ship entry length
0028   0000             MINC		= $000D									; Mine entry length
0029   0000             RINC		= $0020									; Row increment
0030   0000             TINC		= $001E									; Torpedo entry length
0031   0000             
0032   0000             				;; Memory locations
0033   0000             PRGPTR	= $2000									; $2000-2001
0034   0000             
0035   0000             #IF SC3DIG
0036   0000             HSCORE	= $2002									; Was $2006
0037   0000             HSCOREH	= HSCORE+1							; High byte
0038   0000             GTIME		= $2004									; Was $2002
0039   0000             TIMER		= $2005									; Was $2003
0040   0000             CREDIT	= $2006									; Was $2005, half credit not used
0041   0000             MISSED	= $200E									; (Previously unused)
0042   0000             PSCORE	= $2012									; Was $202B
0043   0000             PSCOREH	= PSCORE+1							; High byte
0044   0000             TXTBUF	= $21E8									; Space for 1 more digit
0045   0000~            #ELSE
0046   0000~            GTIME		= $2002
0047   0000~            TIMER		= $2003
0048   0000~            HCREDIT	= $2004
0049   0000~            CREDIT	= $2005									; Was $2005, half credit not used
0050   0000~            HSCORE	= $2006
0051   0000~            PSCORE	= $202B									; Was $202B
0052   0000~            TXTBUF	= $21E9
0053   0000             #ENDIF
0054   0000             
0055   0000             
0056   0000             IN1			= $2007
0057   0000             IN0			= $2008
0058   0000             TIMER1	= $2010
0059   0000             TIMER2	= $2011
0060   0000             HMINE		= $2014									; Next mine to update
0061   0000             HTORP		= $2016									; Next torp to update
0062   0000             HSHIPA	= $2018									; SHIPA handle
0063   0000             HSHIPB	= $201A									; SHIPB handle
0064   0000             HSUNK		= $201C									; SUNK handle (?)
0065   0000             
0066   0000             ATIMER	= $2025									; Audio timer
0067   0000             
0068   0000             SHIPA0	= $2031									; Base address of ship A
0069   0000             SHIPA1	= SHIPA0+SINC						; $203E ($0d block)
0070   0000             SHIPA2	= SHIPA1+SINC						; $204B ($0d block)
0071   0000             SHIPAX	= SHIPA2+SINC						; Reset to $2031 if here
0072   0000             
0073   0000             SHIPB0	= $2058									; Base address of ship B
0074   0000             SHIPB1	= SHIPB0+SINC						; $2065 ($0d block)
0075   0000             SHIPB2	= SHIPB1+SINC						; $2072 ($0d block)
0076   0000             SHIPBX	= SHIPB2+SINC						; Reset to $2058 if here
0077   0000             
0078   0000             MINES		= $207F									; Base address of mines
0079   0000             MINEX		= MINES+(8*MINC)				; $20E7 (8x $0d blocks)
0080   0000             
0081   0000             TORPS		= $20E7									; Base address of torpedos
0082   0000             TORPX		= TORPS+(4*TINC)				; $215F (4x $1e blocks)
0083   0000             
0084   0000             HMISS		= $21F0
0085   0000             
0086   0000             
0087   0000             				;; Screen addresses for text
0088   0000             WAVLOC	= $27E0									; Loc for "Wave"
0089   0000             GOTLOC	= $2C0B									; Loc for GAME OVER text
0090   0000             SWLTOC	= $2C0C									; Loc for SEA WOLF text
0091   0000             ERRLOC	= $3008									; Loc for ROM errors
0092   0000             COPYLOC	= $3408									; Loc for Copyright
0093   0000             ICTLOC	= $3833									; Loc for Insert Coin / Press Start
0094   0000             HSTLOC	= $3C02									; Loc for HIGH SCORE text
0095   0000             TSTLOC	= $3C0E									; Loc for TIME/SCORE text
0096   0000             HSLOC		= $3E25									; Loc for high score
0097   0000             PSLOC		= $3E36									; Loc for player score
0098   0000             
0099   0000             				;; out 01    = Explosion matrix
0100   0000             				;; out 02    = Torpedo display
0101   0000             				;; out 03    = Shifter data
0102   0000             				;; out 04    = Shifter count
0103   0000             				;; out 05    = Sound triggers
0104   0000             				;; out 06    = watchdog (add this)
0105   0000             
0106   0000             
0107   0000             				;; Original memory addresses (modded for this)
0108   0000             				;; 2000-2001 = Pointer address for main game/attract loop
0109   0000             				;; 2002      = Game time?
0110   0000             				;; 2003      = Down counter ($1E to $00)
0111   0000             				;; 2004      = Partial credits
0112   0000             				;; 2005      = Credits
0113   0000             				;; 2006      = High score byte
0114   0000             				;; 2007      = Last IN1
0115   0000             				;; 2008      = Last IN0
0116   0000             				;; 2009-200a = End game hl pointer store (deprecated)
0117   0000             				;; 200e-200f = Unused?
0118   0000             				;; 2010      = Down counter (when $2003 == 0)
0119   0000             				;; 2011      = Down counter
0120   0000             				;; 2012-2013 = (Not used?)
0121   0000             				;; 2014-2015 = MINE table pointer (last updated)
0122   0000             				;; 2016-2017 = TORP table pointer (last updated)
0123   0000             				;; 2018-2019 = SHIPA table pointer
0124   0000             				;; 201a-201b = SHIPB Table pointer
0125   0000             				;; 201c      = Next sprite?
0126   0000             				;; 201e      = ??
0127   0000             				;; 201f      = Later interrupt called ($00 = rst $08, $FF = rst $10)
0128   0000             
0129   0000             				;; 2020      = Mask for subs to call at 04ce (when [[$2000]] == 00)
0130   0000             				;;             D7 = $2002, D6 = $2010, D5 = $2011, D4 = $2021
0131   0000             				;;             D3 = $2022, D2 = $2023, D1 = $2024, D0 = $2025
0132   0000             				;; 2021      = Down counter (non-zero inhibits fire)
0133   0000             				;; 2022      = Down counter
0134   0000             				;; 2023      = Down counter ($19 for small ship)
0135   0000             				;; 2024      = Timer (to show score / explosion)
0136   0000             				;; 2025      = Timer (audio)
0137   0000             				;; 2026      = Down counter ($0f for small ship)
0138   0000             				;; 2027-2028 = Wave state
0139   0000             				;; 2029      = Next ship type
0140   0000             				;; 202A      = Duplicate game time
0141   0000             				;; 202b      = Player score
0142   0000             				;; 202c      = ?? 
0143   0000             				;; 202d      = Torpedo status
0144   0000             				;; 202e      = 1 if extended time passed
0145   0000             				;; 202f      = Ship Launch direction?
0146   0000             				;; 2030      = Current sprite shift
0147   0000             				;; 2031-203D = Sprite ($0d block)
0148   0000             				;;		Byte 0   = X flags?
0149   0000             				;;		Byte 1   = Delta X
0150   0000             				;;		Byte 2   = X Pos  ((loc-$2400) & $1f)<<3 | (shift & $07)
0151   0000             				;;		Byte 3   = Y flags
0152   0000             				;;		Byte 4   = Delta Y
0153   0000             				;;		Byte 5   = Y Pos  loc-$2400)>>5
0154   0000             				;;		Byte 6   = ??
0155   0000             				;;		Byte 7-8 = Sprite tbl LSB,MSB
0156   0000             				;;		Byte 9-A = Calculated screen location
0157   0000             				;;		Byte C-D = Calculated sprite size
0158   0000             				;; 203E-204A = Sprite ($0d block)
0159   0000             				;; 204B-2057 = Sprite ($0d block)
0160   0000             				;; 2058-2064 = Ship data 0 (Attract?)
0161   0000             				;; 2065-2071 = Ship data 1
0162   0000             				;; 2072-207e = Ship data 2
0163   0000             
0164   0000             				;; 207f-208b = Mine data 0
0165   0000             				;; 208c-2098 = Mine data 1
0166   0000             				;; 2099-20a5 = Mine data 2
0167   0000             				;; 20a6-20b2 = Mine data 3
0168   0000             				;; 20b3-20bf = Mine data 4
0169   0000             				;; 20c0-20cc = Mine data 5
0170   0000             				;; 20cd-20d9 = Mine data 6
0171   0000             				;; 20da-20e6 = Mine data 7
0172   0000             
0173   0000             				;; 20c9-20e6
0174   0000             
0175   0000             				;; Torpedo control
0176   0000             				;; 20e7-2104 = $1e data block
0177   0000             				;; 2105-2122 = $1e data block
0178   0000             				;; 2123-2140 = $1e data block
0179   0000             				;; 2140-21r3 = $1e data block
0180   0000             
0181   0000             				;; 215f-21a3 = $44 data block, cleared at $0088
0182   0000             
0183   0000             				;; 21e8-21ef = 8 character buffer for time+score
0184   0000             				;; 21f0-21f1 = Address for $0A3F clear if non-zero
0185   0000             				;; 21f2-21f3 = Address for $0A3F clear if non-zero
0186   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0187   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0188   0000             
0189   0000             				;; RST $00 ($C7)
0190   0000             				.org		$0000
0191   0000             L0000:
0192   0000 00          				nop
0193   0001 00          				nop
0194   0002 31 00 24    				ld			sp,$2400				; Stack pointer
0195   0005 C3 48 04    				jp			L043A						; Startup jump
0196   0008             
0197   0008             				;; rst $08 ($cf interrupt vector)
0198   0008             RST08:
0199   0008 E5          				push		hl
0200   0009 D5          				push		de
0201   000A C5          				push		bc
0202   000B F5          				push		af
0203   000C C3 7E 00    				jp			L007E
0204   000F 00          				nop
0205   0010             
0206   0010             				;; rst $10 ($d7 interrupt vector)
0207   0010             RST10:
0208   0010 E5          				push		hl
0209   0011 D5          				push		de
0210   0012 C5          				push		bc
0211   0013 F5          				push		af
0212   0014 3A 1F 20    				ld			a,($201F)				; ??
0213   0017 A7          				and			a
0214   0018 C2 3E 00    				jp			nz,L003E
0215   001B             
0216   001B CD CE 03    				call		L03BC						; Update wave
0217   001E CD 2E 01    				call		L012E						; Update a sprite
0218   0021             
0219   0021 2A 16 20    				ld			hl,(HTORP)			; Torpedo handle
0220   0024 7E          				ld			a,(hl)
0221   0025 A7          				and			a
0222   0026 F2 36 00    				jp			p,L0036					; D7=0 = inactive
0223   0029 E6 20       				and			$20
0224   002B CA 36 00    				jp			z,L0036					; D5=0 = don't draw
0225   002E             
0226   002E CD 61 03    				call		L035B						; Load de, bc from ship data
0227   0031 0D          				dec			c
0228   0032 EB          				ex			de,hl
0229   0033 CD 24 0A    				call		L0A2A						; Draw b x c block from de at hl
0230   0036             
0231   0036             L0036:
0232   0036 3E FF       				ld			a,$FF
0233   0038 32 1F 20    				ld			($201F),a
0234   003B C3 69 00    				jp			L0069						; End of interrupt routine
0235   003E             
0236   003E             L003E:
0237   003E 2A 16 20    				ld			hl,(HTORP)			; Torpedo handle
0238   0041 7E          				ld			a,(hl)
0239   0042 A7          				and			a
0240   0043 F2 62 00    				jp			p,L0062					; D7=0 = inactive
0241   0046             
0242   0046 E6 40       				and			$40
0243   0048 C2 50 00    				jp			nz,L0050				; Jump if not set to clear
0244   004B 36 00       				ld			(hl),$00				; Clear sprite
0245   004D C3 62 00    				jp			L0062
0246   0050             
0247   0050             L0050:
0248   0050 7E          				ld			a,(hl)					; Flags
0249   0051 F6 20       				or			$20							; Set SUNK flag
0250   0053 77          				ld			(hl),a
0251   0054 CD 62 01    				call		L0165						; Update sprite
0252   0057 78          				ld			a,b
0253   0058 E5          				push		hl
0254   0059 2A 1C 20    				ld			hl,(HSUNK)			; (HSUNK) to bc
0255   005C 44          				ld			b,h
0256   005D 4D          				ld			c,l
0257   005E E1          				pop			hl
0258   005F CD 10 0A    				call		L0A16
0259   0062             
0260   0062             L0062:
0261   0062 CD 6E 03    				call		L0368						; Handle ($2020) flags
0262   0065 AF          				xor			a
0263   0066 32 1F 20    				ld			($201F),a
0264   0069             
0265   0069             				;; End of interrupt routine
0266   0069             L0069:
0267   0069 DB 02       				in			a,($02)					; IN1
0268   006B 47          				ld			b,a
0269   006C DB 02       				in			a,($02)					; IN1
0270   006E 21 07 20    				ld			hl,IN1					; Last IN1
0271   0071 11 C6 09    				ld			de,TBLIN1				; IN1 handler table
0272   0074 B8          				cp			b								; Poor man's debounce
0273   0075 CC 03 0B    				call		z,L0B05					; Call if stable
0274   0078             
0275   0078 F1          				pop			af
0276   0079 C1          				pop			bc
0277   007A D1          				pop			de
0278   007B E1          				pop			hl
0279   007C FB          				ei
0280   007D C9          				ret
0281   007E             
0282   007E             				;; Interrupt $08 vector continues...
0283   007E             L007E:
0284   007E 3A 1F 20    				ld			a,($201F)
0285   0081 A7          				and			a
0286   0082 C2 19 01    				jp			nz,L0119
0287   0085 CD CE 03    				call		L03BC						; Update wave
0288   0088             
0289   0088             				;; Clear $215f-$21a3
0290   0088 21 5F 21    				ld			hl,$215F
0291   008B 06 44       				ld			b,$44
0292   008D AF          				xor			a
0293   008E             L008E:
0294   008E 77          				ld			(hl),a
0295   008F 23          				inc			hl
0296   0090 05          				dec			b
0297   0091 C2 8E 00    				jp			nz,L008E
0298   0094             
0299   0094 2A 18 20    				ld			hl,(HSHIPA)			; SHIPA handle
0300   0097 3E 03       				ld			a,$03						; Loop counter 
0301   0099             L0099:
0302   0099 F5          				push		af
0303   009A 7D          				ld			a,l
0304   009B FE 58       				cp			SHIPAX&$FF			; Cycles $2031 / $203E / $204B
0305   009D C2 A3 00    				jp			nz,L00A3
0306   00A0             
0307   00A0             L00A0:
0308   00A0 21 31 20    				ld			hl,SHIPA0				; Resets to $2031
0309   00A3             L00A3:
0310   00A3 B4          				or			h
0311   00A4 CA A0 00    				jp			z,L00A0					; If was $0000, init as $2013
0312   00A7             
0313   00A7 E5          				push		hl
0314   00A8 CD DB 01    				call		L01DE						; Handle sprite
0315   00AB E1          				pop			hl
0316   00AC D2 B2 00    				jp			nc,L00B2
0317   00AF             
0318   00AF 22 18 20    				ld			(HSHIPA),hl			; SHIPA handle
0319   00B2             L00B2:
0320   00B2 11 0D 00    				ld			de,SINC					; Sprite increment
0321   00B5 19          				add			hl,de
0322   00B6 F1          				pop			af
0323   00B7 3D          				dec			a
0324   00B8 C2 99 00    				jp			nz,L0099				; Loop back
0325   00BB             
0326   00BB 2A 18 20    				ld			hl,(HSHIPA)			; SHIPA handle
0327   00BE CD 10 03    				call		L030C						; Erase if sunk
0328   00C1 2A 1A 20    				ld			hl,(HSHIPB)			; SHIPB handle
0329   00C4             
0330   00C4 3E 03       				ld			a,$03						; Loop counter
0331   00C6             L00C6:
0332   00C6 F5          				push		af
0333   00C7 7D          				ld			a,l
0334   00C8 FE 7F       				cp			SHIPBX&$FF			; Cycloes $2058 / $2065 / $2072
0335   00CA C2 D0 00    				jp			nz,L00D0
0336   00CD             L00CD:
0337   00CD 21 58 20    				ld			hl,SHIPB0				; Reset to $2058
0338   00D0             L00D0:
0339   00D0 B4          				or			h
0340   00D1 CA CD 00    				jp			z,L00CD					; If was $0000, init as $2058
0341   00D4             
0342   00D4 E5          				push		hl
0343   00D5 CD DB 01    				call		L01DE						; Handle sprite
0344   00D8 E1          				pop			hl
0345   00D9 D2 DF 00    				jp			nc,L00DF
0346   00DC             
0347   00DC 22 1A 20    				ld			(HSHIPB),hl			; SHIPB handle
0348   00DF             L00DF:
0349   00DF 11 0D 00    				ld			de,SINC					; Sprite increment
0350   00E2 19          				add			hl,de
0351   00E3 F1          				pop			af
0352   00E4 3D          				dec			a
0353   00E5 C2 C6 00    				jp			nz,L00C6				; Loop back
0354   00E8             
0355   00E8 AF          				xor			a
0356   00E9 32 30 20    				ld			($2030),a				; Clear sprite shift
0357   00EC             
0358   00EC 2A 16 20    				ld			hl,(HTORP)			; Torpedo handle
0359   00EF 3E 04       				ld			a,$04						; Loop counter
0360   00F1             L00F1:
0361   00F1 F5          				push		af
0362   00F2 7D          				ld			a,l
0363   00F3 FE 5F       				cp			TORPX&$FF				; Cycles $20E7 / $2105 / $2123 / $2140
0364   00F5 C2 FB 00    				jp			nz,L00FB
0365   00F8             
0366   00F8             L00F8:
0367   00F8 21 E7 20    				ld			hl,TORPS				; Reset to $20E7
0368   00FB             L00FB:
0369   00FB B4          				or			h
0370   00FC CA F8 00    				jp			z,L00F8					; If was $0000, init to $20E7
0371   00FF             
0372   00FF E5          				push		hl
0373   0100 CD 54 02    				call		L0250						; Handle torpedo
0374   0103 E1          				pop			hl
0375   0104 D2 0A 01    				jp			nc,L010A
0376   0107             
0377   0107 22 16 20    				ld			(HTORP),hl			; Torpedo handle
0378   010A             L010A:
0379   010A 11 1E 00    				ld			de,TINC					; Torp increment
0380   010D 19          				add			hl,de
0381   010E F1          				pop			af
0382   010F 3D          				dec			a
0383   0110 C2 F1 00    				jp			nz,L00F1				; Loop back
0384   0113             
0385   0113 CD 35 03    				call		L0331						; Update mines
0386   0116 C3 69 00    				jp			L0069						; End of interrupt routine
0387   0119             
0388   0119             
0389   0119             L0119:
0390   0119 2A 1A 20    				ld			hl,(HSHIPB)			; SHIPB handle
0391   011C CD 10 03    				call		L030C						; Erase if sunk
0392   011F             
0393   011F 2A 1A 20    				ld			hl,(HSHIPB)			; SHIPB handle
0394   0122 CD 37 01    				call		L013A
0395   0125             
0396   0125 2A 18 20    				ld			hl,(HSHIPA)			; SHIPA handle
0397   0128 CD 37 01    				call		L013A
0398   012B             
0399   012B C3 69 00    				jp			L0069						; End of interrupt routine
0400   012E             
0401   012E             				;; Called from rst $10
0402   012E             				;; Update and draw a single mine
0403   012E             L012E:
0404   012E 2A 14 20    				ld			hl,(HMINE)
0405   0131 7E          				ld			a,(hl)
0406   0132 A7          				and			a
0407   0133 F0          				ret			p								; D7 clear = inactive
0408   0134             
0409   0134             #IF MINEFIX
0410   0134 C3 46 01    				jp			DRAWOBJ
0411   0137~            #ELSE
0412   0137~            				call		L0165						; Update mine
0413   0137~            				jp			L0192						; Draw mine
0414   0137             #ENDIF
0415   0137             
0416   0137             				;; Handle SHIPA / SHIPB entries
0417   0137             L013A:
0418   0137 7E          				ld			a,(hl)
0419   0138 A7          				and			a
0420   0139 F0          				ret			p								; D7 clear = inactive
0421   013A             
0422   013A E6 40       				and			$40							; Check bit 6
0423   013C C2 42 01    				jp			nz,L0145				; D6 set = clear
0424   013F 36 00       				ld			(hl),$00				; Clear entry
0425   0141 C9          				ret
0426   0142             
0427   0142             L0145:
0428   0142 7E          				ld			a,(hl)
0429   0143 F6 20       				or			$20							; Set bit 5 
0430   0145 77          				ld			(hl),a
0431   0146             
0432   0146             DRAWOBJ:
0433   0146 F5          				push		af
0434   0147 CD 62 01    				call		L0165						; Update sprite params
0435   014A             				;; hl = screen loc, c=shift on return
0436   014A             
0437   014A F1          				pop			af
0438   014B E6 10       				and			$10							; Check bit 4
0439   014D CA 8F 01    				jp			z,L0192					; Draw sprite
0440   0150             
0441   0150 79          				ld			a,c
0442   0151 85          				add			a,l
0443   0152 6F          				ld			l,a
0444   0153 E5          				push		hl
0445   0154 21 30 20    				ld			hl,$2030
0446   0157 7E          				ld			a,(hl)
0447   0158 2F          				cpl
0448   0159 E6 07       				and			$07
0449   015B 77          				ld			(hl),a
0450   015C E1          				pop			hl
0451   015D D3 04       				out			($04),a					; Update shift count
0452   015F C3 B5 01    				jp			L01B8
0453   0162             
0454   0162             				;; Update/redraw sprite
0455   0162             L0165:
0456   0162 23          				inc			hl
0457   0163 23          				inc			hl
0458   0164 5E          				ld			e,(hl)					; LSB of loc + shift
0459   0165 23          				inc			hl
0460   0166 23          				inc			hl
0461   0167 23          				inc			hl
0462   0168 56          				ld			d,(hl)					; MSB of loc
0463   0169 23          				inc			hl
0464   016A 23          				inc			hl
0465   016B CD FA 09    				call		L0A00						; Get address for shifted data
0466   016E             
0467   016E 79          				ld			a,c							; (shift)
0468   016F 32 30 20    				ld			($2030),a				; Shift value
0469   0172 D3 04       				out			($04),a					; Shifter count
0470   0174 D5          				push		de							; Push screen loc
0471   0175             
0472   0175~            #IF GETMAC
0473   0175~            				call		GETDE
0474   0175             #ELSE
0475   0175 5E          				ld			e,(hl)					; Get spite data loc
0476   0176 23          				inc			hl
0477   0177 56          				ld			d,(hl)
0478   0178 23          				inc			hl
0479   0179             #ENDIF
0480   0179             
0481   0179 EB          				ex			de,hl						; rom loc -> hl
0482   017A             
0483   017A~            #IF GETMAC
0484   017A~            				call		GETBC
0485   017A             #ELSE
0486   017A 4E          				ld			c,(hl)					; Read sprite size
0487   017B 23          				inc			hl
0488   017C 46          				ld			b,(hl)
0489   017D 23          				inc			hl
0490   017E             #ENDIF
0491   017E             
0492   017E E3          				ex			(sp),hl					; hl = screen loc
0493   017F EB          				ex			de,hl						; hl Back to ram table
0494   0180             
0495   0180~            #IF GETMAC
0496   0180~            				call		GETDE
0497   0180             #ELSE
0498   0180 73          				ld			(hl),e
0499   0181 23          				inc			hl
0500   0182 72          				ld			(hl),d
0501   0183 23          				inc			hl
0502   0184             #ENDIF
0503   0184             
0504   0184 71          				ld			(hl),c					; Width
0505   0185 34          				inc			(hl)						; +1 wide for shifting?
0506   0186 23          				inc			hl
0507   0187 70          				ld			(hl),b					; Height
0508   0188 23          				inc			hl
0509   0189 22 1C 20    				ld			(HSUNK),hl			; Store next
0510   018C             
0511   018C EB          				ex			de,hl						; hl = screen loc
0512   018D D1          				pop			de							; de = sprite data in ROM
0513   018E C9          				ret
0514   018F             
0515   018F             
0516   018F             				;; Sprite draw, normal
0517   018F             L0192:
0518   018F C5          				push		bc							; bc = bytes wide, pix high
0519   0190 E5          				push		hl							; hl = screen loc
0520   0191             L0194:
0521   0191 1A          				ld			a,(de)					; Sprite byte
0522   0192 13          				inc			de
0523   0193 D3 03       				out			($03),a					; MB12421 data write
0524   0195 DB 03       				in			a,($03)					; MB12421 data read
0525   0197 77          				ld			(hl),a					; Write to screen
0526   0198 23          				inc			hl
0527   0199 0D          				dec			c
0528   019A C2 91 01    				jp			nz,L0194				; Loop for width
0529   019D             
0530   019D AF          				xor			a
0531   019E D3 03       				out			($03),a					; MB12421 data write
0532   01A0 DB 03       				in			a,($03)					; MB12421 data read
0533   01A2 77          				ld			(hl),a					; Final write
0534   01A3 01 20 00    				ld			bc,RINC					; Row increment
0535   01A6 E1          				pop			hl
0536   01A7 09          				add			hl,bc						; Next row
0537   01A8 C1          				pop			bc
0538   01A9 7D          				ld			a,l
0539   01AA E6 E0       				and			$E0
0540   01AC C2 8F 01    				jp			nz,L0192				; Not end of screen
0541   01AF 7C          				ld			a,h
0542   01B0 1F          				rra
0543   01B1 DA 8F 01    				jp			c,L0192					; Not end of screen
0544   01B4 C9          				ret
0545   01B5             
0546   01B5             				;; Sprite draw, flipped
0547   01B5             L01B8:
0548   01B5 C5          				push		bc
0549   01B6 E5          				push		hl
0550   01B7             L01BA:
0551   01B7 1A          				ld			a,(de)
0552   01B8 13          				inc			de
0553   01B9 D3 03       				out			($03),a					; Shifter input
0554   01BB DB 00       				in			a,($00)					; Shifter output
0555   01BD 77          				ld			(hl),a					; Write to screen
0556   01BE 2B          				dec			hl
0557   01BF 0D          				dec			c
0558   01C0 C2 B7 01    				jp			nz,L01BA				; Loop for width
0559   01C3             
0560   01C3 AF          				xor			a
0561   01C4 D3 03       				out			($03),a					; Shifter input 
0562   01C6 DB 00       				in			a,($00)					; Shifter output
0563   01C8 77          				ld			(hl),a					; Write to screen
0564   01C9 01 20 00    				ld			bc,RINC					; Row increment
0565   01CC E1          				pop			hl
0566   01CD 09          				add			hl,bc						; Next line
0567   01CE C1          				pop			bc
0568   01CF 7D          				ld			a,l
0569   01D0 E6 E0       				and			$E0
0570   01D2 C2 B5 01    				jp			nz,L01B8				; Not end of screen
0571   01D5             
0572   01D5 7C          				ld			a,h
0573   01D6 1F          				rra
0574   01D7 DA B5 01    				jp			c,L01B8					; Not end of screen
0575   01DA C9          				ret
0576   01DB             
0577   01DB             
0578   01DB             				;; 
0579   01DB             L01DE:
0580   01DB 7E          				ld			a,(hl)
0581   01DC A7          				and			a
0582   01DD F0          				ret			p								; High bit clear = inactive
0583   01DE             
0584   01DE E5          				push		hl
0585   01DF 23          				inc			hl							; hl now delta X
0586   01E0 E6 07       				and			$07							; Mask low 3 bits 
0587   01E2 C2 EA 01    				jp			nz,L01ED				; (is a ship)
0588   01E5             
0589   01E5             				;; This is a missle?
0590   01E5 23          				inc			hl
0591   01E6 23          				inc			hl
0592   01E7 C3 3B 02    				jp			L0237
0593   01EA             
0594   01EA             L01ED:
0595   01EA 7E          				ld			a,(hl)					; Delta X
0596   01EB 11 5F 21    				ld			de,$215F				; Table for +
0597   01EE A7          				and			a
0598   01EF F2 F5 01    				jp			p,L01F8
0599   01F2             
0600   01F2 11 81 21    				ld			de,$2181				; Table for -
0601   01F5             L01F8:
0602   01F5 47          				ld			b,a							; b = delta x
0603   01F6 23          				inc			hl							; (hl) = X
0604   01F7 86          				add			a,(hl)					; a = x + dx
0605   01F8 77          				ld			(hl),a					; store x
0606   01F9 78          				ld			a,b							; a = delta X
0607   01FA A7          				and			a
0608   01FB 7E          				ld			a,(hl)					; a = X
0609   01FC F2 14 02    				jp			p,L0210					; (left to right)
0610   01FF             
0611   01FF FE 01       				cp			$01
0612   0201 D2 1A 02    				jp			nc,L0216
0613   0204             
0614   0204             L0207:
0615   0204 E3          				ex			(sp),hl
0616   0205 7E          				ld			a,(hl)
0617   0206 E6 BF       				and			$BF							; Clear bit 5 (Ship done)
0618   0208 77          				ld			(hl),a
0619   0209 E3          				ex			(sp),hl
0620   020A             
0621   020A             #IF SEAMISS
0622   020A 3A 04 20    				ld			a,(GTIME)
0623   020D A7          				and			a
0624   020E CA 1A 02    				jp			z,L0216					; Game over
0625   0211             
0626   0211 32 0E 20    				ld			(MISSED),a			; Set to non-zero value
0627   0214~            #ELSE
0628   0214~            				jp			L0216
0629   0214             #ENDIF
0630   0214             
0631   0214             L0210:
0632   0214 23          				inc			hl
0633   0215 BE          				cp			(hl)						; End X
0634   0216 2B          				dec			hl
0635   0217 D2 04 02    				jp			nc,L0207
0636   021A             
0637   021A             L0216:
0638   021A 7E          				ld			a,(hl)
0639   021B 0F          				rrca
0640   021C 0F          				rrca
0641   021D 0F          				rrca
0642   021E E6 1F       				and			$1F							; High 5 bits of (hl)
0643   0220 83          				add			a,e
0644   0221 5F          				ld			e,a
0645   0222 E3          				ex			(sp),hl
0646   0223 7E          				ld			a,(hl)
0647   0224 E3          				ex			(sp),hl
0648   0225 E6 07       				and			$07
0649   0227 47          				ld			b,a
0650   0228 23          				inc			hl
0651   0229 7E          				ld			a,(hl)
0652   022A 2F          				cpl
0653   022B 3C          				inc			a
0654   022C 0F          				rrca
0655   022D 0F          				rrca
0656   022E 0F          				rrca
0657   022F E6 07       				and			$07
0658   0231 C6 03       				add			a,$03
0659   0233 EB          				ex			de,hl
0660   0234             
0661   0234             L0230:
0662   0234 70          				ld			(hl),b
0663   0235 23          				inc			hl
0664   0236 3D          				dec			a
0665   0237 C2 34 02    				jp			nz,L0230
0666   023A             
0667   023A EB          				ex			de,hl
0668   023B             
0669   023B             				;; Handle missiles?
0670   023B             L0237:
0671   023B 11 2F 20    				ld			de,$202F				; Ship launch dir?
0672   023E 1A          				ld			a,(de)
0673   023F 2F          				cpl											; Invert it
0674   0240 12          				ld			(de),a
0675   0241 C2 4B 02    				jp			nz,L0247
0676   0244             
0677   0244 23          				inc			hl
0678   0245 7E          				ld			a,(hl)					; Delta X
0679   0246 23          				inc			hl
0680   0247 86          				add			a,(hl)					; X Pos
0681   0248 77          				ld			(hl),a					; X Pos
0682   0249 23          				inc			hl
0683   024A BE          				cp			(hl)						; End X?
0684   024B             L0247:
0685   024B E1          				pop  hl
0686   024C 37          				scf
0687   024D C0          				ret  nz
0688   024E             
0689   024E 7E          				ld			a,(hl)					; Flags
0690   024F E6 BF       				and			$BF							; Clear bit 5
0691   0251 77          				ld			(hl),a					; Flags
0692   0252 37          				scf
0693   0253 C9          				ret
0694   0254             
0695   0254             
0696   0254             				;; Handle torpedo
0697   0254             L0250:
0698   0254 7E          				ld			a,(hl)
0699   0255 A7          				and			a
0700   0256 F0          				ret			p								; D7 clear = inactive
0701   0257             
0702   0257 E5          				push		hl
0703   0258 23          				inc			hl
0704   0259 23          				inc			hl
0705   025A 4E          				ld			c,(hl)					; +2
0706   025B 23          				inc			hl
0707   025C 23          				inc			hl
0708   025D 7E          				ld			a,(hl)					; +4 dx?
0709   025E 23          				inc			hl
0710   025F 46          				ld			b,(hl)					; +5 y?
0711   0260 80          				add			a,b
0712   0261 77          				ld			(hl),a					; +5
0713   0262 78          				ld			a,b
0714   0263 FE C0       				cp			$C0
0715   0265 D2 0D 03    				jp			nc,L0309				; Bigger
0716   0268             
0717   0268 FE 30       				cp			$30
0718   026A D2 79 02    				jp			nc,L0275
0719   026D             
0720   026D 3A 24 20    				ld			a,($2024)				; Explosion timer?
0721   0270 A7          				and			a
0722   0271 CA 79 02    				jp			z,L0275
0723   0274             
0724   0274 3C          				inc			a
0725   0275 3C          				inc			a
0726   0276 32 24 20    				ld			($2024),a				; Explosion timer?
0727   0279             
0728   0279             L0275:
0729   0279 7E          				ld			a,(hl)					; +5
0730   027A 23          				inc			hl
0731   027B BE          				cp			(hl)						; +6
0732   027C D2 A0 02    				jp			nc,L029C
0733   027F             
0734   027F 3E C0       				ld			a,$C0
0735   0281 86          				add			a,(hl)					; +6
0736   0282 77          				ld			(hl),a					; +6
0737   0283 2B          				dec			hl
0738   0284 2B          				dec			hl
0739   0285 34          				inc			(hl)						; +4
0740   0286 34          				inc			(hl)						; +4
0741   0287 7E          				ld			a,(hl)					; +4
0742   0288 23          				inc			hl
0743   0289 23          				inc			hl
0744   028A 23          				inc			hl
0745   028B CA 9A 02    				jp			z,L0296					; +7
0746   028E             
0747   028E 36 86       				ld			(hl),SHOT1&$ff	; Change missile to SHOT1
0748   0290 FE FC       				cp			$FC
0749   0292 CA A0 02    				jp			z,L029C
0750   0295             
0751   0295 36 96       				ld			(hl),SHOT2&$ff	; Change missile to SHOT2
0752   0297 C3 A0 02    				jp			L029C
0753   029A             
0754   029A             L0296:
0755   029A E3          				ex			(sp),hl
0756   029B 7E          				ld			a,(hl)					; Flags 
0757   029C E6 BF       				and			$BF							; Clear bit 5 
0758   029E 77          				ld			(hl),a
0759   029F E3          				ex			(sp),hl
0760   02A0             
0761   02A0             L029C:
0762   02A0 11 30 20    				ld			de,$2030				; Sprite shift
0763   02A3 1A          				ld			a,(de)
0764   02A4 A7          				and			a
0765   02A5 C2 0D 03    				jp			nz,L0309				; Shifted
0766   02A8             
0767   02A8 3C          				inc			a
0768   02A9 12          				ld			(de),a					; Sprite shift
0769   02AA 78          				ld			a,b							; What is b?
0770   02AB E6 10       				and			$10
0771   02AD CA 0D 03    				jp			z,L0309
0772   02B0             
0773   02B0 11 07 00    				ld			de,$0007				; ?? Increment
0774   02B3 19          				add			hl,de
0775   02B4 7E          				ld			a,(hl)
0776   02B5 A7          				and			a
0777   02B6 C2 C7 02    				jp			nz,L02C3
0778   02B9             
0779   02B9 19          				add			hl,de
0780   02BA 78          				ld			a,b
0781   02BB 83          				add			a,e
0782   02BC 47          				ld			b,a
0783   02BD E6 10       				and			$10
0784   02BF CA 0D 03    				jp			z,L0309
0785   02C2             
0786   02C2 7E          				ld			a,(hl)
0787   02C3 A7          				and			a
0788   02C4 CA 0D 03    				jp			z,L0309
0789   02C7             
0790   02C7             L02C3:
0791   02C7 E3          				ex			(sp),hl
0792   02C8 7E          				ld			a,(hl)					; Flags
0793   02C9 E6 BF       				and			$BF							; Clear bit 5
0794   02CB 77          				ld			(hl),a					; Flags
0795   02CC E3          				ex			(sp),hl
0796   02CD 78          				ld			a,b
0797   02CE D6 40       				sub			$40
0798   02D0 47          				ld			b,a
0799   02D1 DA E4 02    				jp			c,L02E0
0800   02D4             
0801   02D4 21 A1 21    				ld			hl,$21A1				; ??
0802   02D7             L02D3:
0803   02D7 23          				inc			hl
0804   02D8 23          				inc			hl
0805   02D9 7E          				ld			a,(hl)
0806   02DA A7          				and			a
0807   02DB C2 D7 02    				jp			nz,L02D3
0808   02DE             
0809   02DE 70          				ld			(hl),b
0810   02DF 23          				inc			hl
0811   02E0 71          				ld			(hl),c
0812   02E1 C3 0D 03    				jp			L0309
0813   02E4             
0814   02E4             L02E0:
0815   02E4 21 BE 21    				ld			hl,$21BE				; ??
0816   02E7             L02E3:
0817   02E7 23          				inc			hl
0818   02E8 23          				inc			hl
0819   02E9 23          				inc			hl
0820   02EA 7E          				ld			a,(hl)
0821   02EB A7          				and			a
0822   02EC C2 E7 02    				jp			nz,L02E3
0823   02EF             
0824   02EF 78          				ld			a,b
0825   02F0 C6 20       				add			a,$20
0826   02F2 11 60 21    				ld			de,$2160
0827   02F5 FA FB 02    				jp			m,L02F7
0828   02F8             
0829   02F8 11 82 21    				ld			de,$2182
0830   02FB             L02F7:
0831   02FB 79          				ld			a,c
0832   02FC 0F          				rrca
0833   02FD 0F          				rrca
0834   02FE 0F          				rrca
0835   02FF E6 1F       				and			$1F
0836   0301 83          				add			a,e
0837   0302 5F          				ld			e,a
0838   0303 1A          				ld			a,(de)
0839   0304 A7          				and			a
0840   0305 CA 0D 03    				jp			z,L0309
0841   0308 77          				ld			(hl),a
0842   0309 23          				inc			hl
0843   030A 71          				ld			(hl),c
0844   030B 23          				inc			hl
0845   030C 70          				ld			(hl),b
0846   030D             L0309:
0847   030D 37          				scf
0848   030E E1          				pop			hl
0849   030F C9          				ret
0850   0310             
0851   0310             
0852   0310             				;; Erase ship from hl if sunk
0853   0310             L030C:
0854   0310 7E          				ld			a,(hl)					; Sprite flags
0855   0311 A7          				and			a
0856   0312 F0          				ret			p								; D7 clear = inactive
0857   0313             
0858   0313 E6 20       				and			$20
0859   0315 C8          				ret			z								; D5 clear = not sunk
0860   0316             
0861   0316 CD 61 03    				call		L035B						; Get de, bc from bytes 9-d
0862   0319 EB          				ex			de,hl						; hl = read de
0863   031A 41          				ld			b,c
0864   031B             
0865   031B             L0317:
0866   031B AF          				xor			a
0867   031C E5          				push		hl							; Store loc
0868   031D             
0869   031D             				;; Clear c bytes at hl
0870   031D             L0319:
0871   031D 77          				ld			(hl),a
0872   031E 23          				inc			hl
0873   031F 0D          				dec			c
0874   0320 C2 1D 03    				jp			nz,L0319
0875   0323             
0876   0323 11 20 00    				ld			de,RINC					; Row increment
0877   0326 E1          				pop			hl							; Get loc
0878   0327 19          				add			hl,de						; Next line
0879   0328 48          				ld			c,b
0880   0329 7D          				ld			a,l
0881   032A E6 E0       				and			$E0
0882   032C C2 1B 03    				jp			nz,L0317				; Loop if not end of screen
0883   032F             
0884   032F 7C          				ld			a,h
0885   0330 1F          				rra
0886   0331 DA 1B 03    				jp			c,L0317					; Loop if not end of screen
0887   0334             
0888   0334 C9          				ret
0889   0335             
0890   0335             				;; Update mines
0891   0335             L0331:
0892   0335 2A 14 20    				ld			hl,(HMINE)
0893   0338             ;				ld			b,$0A						; Loop counter = 10 mines
0894   0338 06 08       				ld			b,$08						; Loop counter =  8 mines
0895   033A 7D          				ld			a,l
0896   033B B4          				or			h
0897   033C C2 42 03    				jp			nz,L033E
0898   033F             
0899   033F 21 72 20    				ld			hl,MINES-MINC		; If 0 reset to $2072
0900   0342             L033E:
0901   0342 11 0D 00    				ld			de,MINC					; Mine increment
0902   0345             L0341:
0903   0345 19          				add			hl,de						; $207F / $207C / $2099 / $20A6 / $20B3 / $20C0 / $20CD / $20DA
0904   0346 05          				dec			b
0905   0347 C8          				ret			z								; End of loop
0906   0348             
0907   0348 7D          				ld			a,l
0908   0349 FE E7       				cp			MINEX&$FFF			; hl == $20E7?
0909   034B C2 51 03    				jp			nz,L034D
0910   034E             
0911   034E 21 7F 20    				ld			hl,MINES				; Reset to $207F
0912   0351             L034D:
0913   0351             				;; Check logic here
0914   0351~            #IF 1-MINEFIX
0915   0351~            				ld			a,(hl)					; X flags
0916   0351~            				and			a
0917   0351~            				jp			p,L0341					; D7 clear = not active
0918   0351             #ENDIF
0919   0351             
0920   0351 22 14 20    				ld			(HMINE),hl
0921   0354 23          				inc			hl
0922   0355 7E          				ld			a,(hl)					; Delta X
0923   0356 23          				inc			hl
0924   0357 86          				add			a,(hl)					; Add to X
0925   0358 77          				ld			(hl),a					; Store X
0926   0359             
0927   0359             #IF MINEFIX
0928   0359 2B          				dec			hl
0929   035A 2B          				dec			hl
0930   035B 7E          				ld			a,(hl)
0931   035C A7          				and			a
0932   035D F2 45 03    				jp			p,L0341					; Loop until we get an active mine
0933   0360             #ENDIF
0934   0360             
0935   0360 C9          				ret
0936   0361             
0937   0361             				;; Load de, bc from ship data
0938   0361             L035B:
0939   0361 11 09 00    				ld			de,$0009
0940   0364 19          				add			hl,de
0941   0365             
0942   0365~            #IF GETMAC
0943   0365~            				call		GETDE
0944   0365             #ELSE
0945   0365 5E          				ld			e,(hl)
0946   0366 23          				inc			hl
0947   0367 56          				ld			d,(hl)
0948   0368 23          				inc			hl
0949   0369             #ENDIF
0950   0369             
0951   0369             GETBC:
0952   0369 4E          				ld			c,(hl)
0953   036A 23          				inc			hl
0954   036B 46          				ld			b,(hl)
0955   036C 23          				inc			hl
0956   036D C9          				ret
0957   036E             
0958   036E             				;; Called from ISR
0959   036E             L0368:
0960   036E 3A 20 20    				ld			a,($2020)				; ISR flags
0961   0371 A7          				and			a
0962   0372 C0          				ret			nz
0963   0373             
0964   0373 47          				ld			b,a							; No ret, so a=0, b=0
0965   0374 21 05 20    				ld			hl,TIMER				; Counter address
0966   0377 35          				dec			(hl)						; Decrement counter
0967   0378 C2 A0 03    				jp			nz,L038E
0968   037B             
0969   037B             				;; $2003 Counter zero
0970   037B 36 1E       				ld			(hl),$1E				; Reset counter
0971   037D             
0972   037D             #IF SEAMISS
0973   037D             				;; Handle MISSED flag
0974   037D 3A 0E 20    				ld			a,(MISSED)
0975   0380 A7          				and			a
0976   0381 CA 9A 03    				jp			z,L0388					; No miss
0977   0384             
0978   0384 AF          				xor			a
0979   0385 32 0E 20    				ld			(MISSED),a
0980   0388             #ENDIF
0981   0388             
0982   0388 21 04 20    				ld			hl,GTIME				; Game timer
0983   038B 7E          				ld			a,(hl)
0984   038C A7          				and			a
0985   038D CA 9A 03    				jp			z,L0388					; Game over
0986   0390             
0987   0390 C6 99       				add			a,$99						; BCD derement
0988   0392 27          				daa
0989   0393 77          				ld			(hl),a					; Store timer
0990   0394 A7          				and			a								; Z should be set by daa (!)
0991   0395 C2 9A 03    				jp			nz,L0388
0992   0398             
0993   0398 06 01       				ld			b,$01						; set d7 (eventually) = Game over
0994   039A             L0388:
0995   039A 21 10 20    				ld			hl,TIMER1
0996   039D CD C0 03    				call		L03AE						; Handle $2010 timer d6
0997   03A0             
0998   03A0             				;; Counter non-zero
0999   03A0             L038E:
1000   03A0 21 11 20    				ld			hl,TIMER2
1001   03A3 CD C0 03    				call		L03AE						; Handle $2011 timer d5
1002   03A6 21 21 20    				ld			hl,$2021
1003   03A9 CD C0 03    				call		L03AE						; Handle $2021 timer d4
1004   03AC 23          				inc			hl
1005   03AD CD C0 03    				call		L03AE						; Handle $2022 timer d3
1006   03B0 23          				inc			hl
1007   03B1 CD C0 03    				call		L03AE						; Handle $2023 timer d2
1008   03B4 23          				inc			hl
1009   03B5 CD C0 03    				call		L03AE 					; Handle $2024 timer d1
1010   03B8 23          				inc			hl
1011   03B9 CD C0 03    				call		L03AE						; Handle $2025 timer d0
1012   03BC 32 20 20    				ld			($2020),a
1013   03BF C9          				ret
1014   03C0             
1015   03C0             				;; Decrement timer, set bit if 0
1016   03C0             L03AE:
1017   03C0 7E          				ld			a,(hl)
1018   03C1 A7          				and			a
1019   03C2 CA CA 03    				jp			z,L03B8
1020   03C5             
1021   03C5 35          				dec			(hl)
1022   03C6 C2 CA 03    				jp			nz,L03B8				; Carry clear since (hl) != 0
1023   03C9             
1024   03C9 37          				scf											; Set carry
1025   03CA             L03B8:
1026   03CA 78          				ld			a,b
1027   03CB 17          				rla											; Shift 0 into b unless carry set above
1028   03CC 47          				ld			b,a
1029   03CD C9          				ret
1030   03CE             
1031   03CE             				;; Called from both interrupt routines
1032   03CE             				;; Updates and redraw "wave"
1033   03CE             L03BC:
1034   03CE 01 27 20    				ld			bc,$2027				; Wave state
1035   03D1 0A          				ld			a,(bc)
1036   03D2 C6 0A       				add			a,$0A						; $00 -> $0A -> $14 -> $1E = $00
1037   03D4 FE 1E       				cp			$1E
1038   03D6 C2 DA 03    				jp			nz,L03C8
1039   03D9             
1040   03D9 AF          				xor			a								; a=0
1041   03DA             L03C8:
1042   03DA 02          				ld			(bc),a					; Store state
1043   03DB 03          				inc			bc							; $2028
1044   03DC 5F          				ld			e,a
1045   03DD 16 00       				ld			d,$00
1046   03DF 21 F1 0B    				ld			hl,WATER0				; Start of waves
1047   03E2 19          				add			hl,de
1048   03E3 EB          				ex			de,hl						; de = wave table entry
1049   03E4 0A          				ld			a,(bc)					; Get state
1050   03E5 3C          				inc			a
1051   03E6 E6 1F       				and			$1F							; Loops $00 to $1F
1052   03E8 02          				ld			(bc),a					; Save state
1053   03E9             
1054   03E9             				;; Screen location
1055   03E9 21 E0 27    				ld			hl,WAVLOC
1056   03EC 85          				add			a,l
1057   03ED 6F          				ld			l,a
1058   03EE 01 20 00    				ld			bc,RINC					; Row increment
1059   03F1             L03DF:
1060   03F1 1A          				ld			a,(de)					; Get byte
1061   03F2 13          				inc			de
1062   03F3 77          				ld			(hl),a					; Write byte
1063   03F4 09          				add			hl,bc						; Next row
1064   03F5 7D          				ld			a,l
1065   03F6 E6 E0       				and			$E0
1066   03F8 FE 60       				cp			$60							; Only 4 rows used?
1067   03FA C2 F1 03    				jp			nz,L03DF				; Loop
1068   03FD             
1069   03FD C9          				ret
1070   03FE             
1071   03FE             				;; Test mode
1072   03FE             L03EC:
1073   03FE             #IF DOCOPY
1074   03FE 21 E7 0F    				ld			hl,COPYRGHT
1075   0401 11 08 34    				ld			de,COPYLOC
1076   0404 3E 0C       				ld			a,$0C						; Length
1077   0406 CD 2E 0B    				call		L0B30						; Draw string
1078   0409             #ENDIF
1079   0409             
1080   0409 21 00 00    				ld			hl,L0000				; Start address
1081   040C 11 00 00    				ld			de,$0000				; Offset 0
1082   040F~            #IF OLDTEST
1083   040F~            				ld			c,$02						; 2 pages
1084   040F             #ELSE
1085   040F 0E 04       				ld			c,$04						; 4 pages
1086   0411             #ENDIF
1087   0411             
1088   0411             L03F4:
1089   0411 AF          				xor			a								; Clear checksum
1090   0412             L03F5:
1091   0412 86          				add			a,(hl)
1092   0413 23          				inc			hl
1093   0414 47          				ld			b,a
1094   0415 79          				ld			a,c
1095   0416 BC          				cp			h
1096   0417 78          				ld			a,b
1097   0418 C2 12 04    				jp			nz,L03F5				; Loop
1098   041B             
1099   041B E5          				push		hl							; Push address
1100   041C 21 F8 0F    				ld			hl,CHKS					; Checksum table
1101   041F 19          				add			hl,de
1102   0420 BE          				cp			(hl)						; Compare checksum
1103   0421 3E 40       				ld			a,$40						; (Space)
1104   0423 CA 2B 04    				jp			z,L040E					; Checksum good!
1105   0426             
1106   0426 21 FC 0F    				ld			hl,ERRS					; Bad checksum table
1107   0429 19          				add			hl,de
1108   042A 7E          				ld			a,(hl)
1109   042B             
1110   042B             L040E:
1111   042B 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1112   042E 19          				add			hl,de
1113   042F 77          				ld			(hl),a					; Store char
1114   0430             
1115   0430 E1          				pop			hl							; Get address back
1116   0431 13          				inc			de							; Next rom
1117   0432 0C          				inc			c								; $02 more pages
1118   0433 0C          				inc			c
1119   0434~            #IF OLDTEST
1120   0434~            				ld			a,$12
1121   0434             #ELSE
1122   0434 0C          				inc			c								; $02 more pages
1123   0435 0C          				inc			c
1124   0436 3E 14       				ld			a,$14
1125   0438             #ENDIF
1126   0438 B9          				cp			c
1127   0439 C2 11 04    				jp			nz,L03F4				; Loop if not done
1128   043C             
1129   043C 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1130   043F 11 08 30    				ld			de,ERRLOC				; Location
1131   0442~            #IF OLDTEST
1132   0442~            				ld			a,$08						; Length
1133   0442             #ELSE
1134   0442 3E 04       				ld			a,$04						; Length
1135   0444             #ENDIF
1136   0444 CD 2E 0B    				call		L0B30						; Draw string hl @ de, length a
1137   0447 76          				halt										; Stop!
1138   0448             
1139   0448~            #IF OLDTEST
1140   0448~            				;; $200 block checksums
1141   0448~            L0429:
1142   0448~            CHKS:
1143   0448~            				.db			$8D, $79, $00, $1F, $58, $6D, $EA, $C5	; Checksums
1144   0448~            
1145   0448~            				.db			$2A							; Patch byte for $400 checksum
1146   0448~            
1147   0448~            				;; Error locations
1148   0448~            L0432:
1149   0448~            ERRS:
1150   0448~            				.db			$48, $48, $47, $47, $46, $46, $45, $45	; HHGGFFEE
1151   0448             #ENDIF
1152   0448             
1153   0448             				;; Initial jump
1154   0448             L043A:
1155   0448 CD 68 08    				call		L08A2						; (End of game routine)
1156   044B DB 02       				in			a,($02)					; IN2
1157   044D             
1158   044D~            #IF OLDDIP
1159   044D~            				and			$E0							; Test mode bits
1160   044D~            				cp			$E0
1161   044D             #ELSE
1162   044D E6 08       				and			$08							; Dip 4 = Test
1163   044F FE 08       				cp			$08
1164   0451             #ENDIF
1165   0451             
1166   0451 CC FE 03    				call		z,L03EC					; Go to test mode
1167   0454             
1168   0454             				;; Clear $2002-$200a
1169   0454             				;; Change this for HS Save?
1170   0454             
1171   0454             #IF SC3DIG
1172   0454~            #IF HSSAVE
1173   0454~            				ld			hl,GTIME				; $2004
1174   0454~            				ld			a,$07						; $2004-$200a
1175   0454             #ELSE
1176   0454 21 02 20    				ld			hl,HSCORE				; $2002
1177   0457 3E 09       				ld			a,$09						; $2002-$200a
1178   0459             #ENDIF
1179   0459~            #ELSE
1180   0459~            				ld			hl,GTIME				; $2002
1181   0459~            				ld			a,$09						; $2002-$200a
1182   0459             #ENDIF
1183   0459             
1184   0459 06 00       				ld			b,$00
1185   045B             L044D:
1186   045B 70          				ld			(hl),b
1187   045C 23          				inc			hl
1188   045D 3D          				dec			a
1189   045E C2 5B 04    				jp			nz,L044D
1190   0461             
1191   0461             #IF SC3DIG
1192   0461 CD E4 08    				call		CHKFP
1193   0464             #ENDIF
1194   0464             
1195   0464 21 2B 09    				ld			hl,L0929				; Attract mode loop
1196   0467 22 00 20    				ld			(PRGPTR),hl
1197   046A             
1198   046A             L0459:
1199   046A FB          				ei											; Enable interrupts
1200   046B 21 6A 04    				ld			hl,L0459				; Return address
1201   046E E5          				push		hl
1202   046F 2A 00 20    				ld			hl,(PRGPTR)
1203   0472 7E          				ld			a,(hl)					; Get command
1204   0473 A7          				and			a
1205   0474 C2 8E 04    				jp			nz,L047D				; Non-zero command
1206   0477             
1207   0477             				;; a=(($2000)) == 0
1208   0477             				;; Command 0
1209   0477 CD B8 06    				call		L06A4
1210   047A CD D0 04    				call		L04CE
1211   047D CD C1 04    				call		L04BF						; Start game
1212   0480 3A 04 20    				ld			a,(GTIME)				; Game timer
1213   0483 A7          				and			a
1214   0484 C8          				ret			z								; Skip rest if game over
1215   0485             
1216   0485 CD 63 07    				call		L074C
1217   0488 CD D4 08    				call		L08B8
1218   048B C3 9D 04    				jp			L048C
1219   048E             
1220   048E             
1221   048E             				;; Do command from jump table
1222   048E             				;; a=(($2000)) != 0
1223   048E             L047D:
1224   048E 23          				inc			hl
1225   048F EB          				ex			de,hl						; ($2000+1) --> de
1226   0490 21 E4 09    				ld			hl,TBLJMP-2			; Jump table
1227   0493 07          				rlca										; a = ($2000)<<1
1228   0494 4F          				ld			c,a							; c = ($2000)<<1
1229   0495 06 00       				ld			b,$00
1230   0497 09          				add			hl,bc						; hl = L09e8 + ($2000)<<1
1231   0498 7E          				ld			a,(hl)
1232   0499 23          				inc			hl
1233   049A 66          				ld			h,(hl)
1234   049B 6F          				ld			l,a
1235   049C E9          				jp			(hl)
1236   049D             
1237   049D             L048C:
1238   049D 3A 05 20    				ld			a,(TIMER)
1239   04A0 FE 1D       				cp			$1D
1240   04A2 F8          				ret			m								; Only update once per loop
1241   04A3             
1242   04A3             				;; Update game time
1243   04A3 01 04 20    				ld			bc,GTIME				; Game time
1244   04A6 11 E8 21    				ld			de,TXTBUF				; Text buffer
1245   04A9             
1246   04A9             #IF SC3DIG
1247   04A9 CD 8E 0A    				call		BCD2_0					; BCD to buffer
1248   04AC             
1249   04AC 3E 2B       				ld			a,$2B						; Space
1250   04AE 12          				ld			(de),a					; Store
1251   04AF 13          				inc			de
1252   04B0             
1253   04B0 01 12 20    				ld			bc,PSCORE				; Player score
1254   04B3 CD AC 0A    				call		BCD300					; 3 nybble BCD+00 to string
1255   04B6~            #ELSE
1256   04B6~            				call		L0A82						; BCD to buffer
1257   04B6~            				ex			de,hl
1258   04B6~            				call		L0A7A
1259   04B6~            
1260   04B6~            				inc			hl
1261   04B6~            				ld			(hl),$2C				; Space
1262   04B6~            				inc			hl
1263   04B6~            				ex			de,hl
1264   04B6~            				ld			bc,PSCORE				; Player score
1265   04B6~            
1266   04B6~            				call		L0A82						; BCD to buffer
1267   04B6~            				ex			de,hl
1268   04B6~            				call		L0A7A
1269   04B6~            				inc			hl
1270   04B6~            				ld			(hl),$30				; Postpend zero
1271   04B6~            				inc			hl
1272   04B6~            				ld			(hl),$30				; Postpend zero
1273   04B6             #ENDIF
1274   04B6             
1275   04B6 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1276   04B9 11 2F 3E    				ld			de,$3E2F				; Screen location
1277   04BC             #IF SC3DIG
1278   04BC 3E 07       				ld			a,$07						; Length
1279   04BE~            #ELSE
1280   04BE~            				ld			a,$06						; Length
1281   04BE             #ENDIF
1282   04BE C3 2E 0B    				jp			L0B30						; Draw string hl @ de, length a
1283   04C1             
1284   04C1             L04BF:
1285   04C1 21 2A 20    				ld			hl,$202A				; Duplicate game time
1286   04C4 7E          				ld			a,(hl)
1287   04C5 A7          				and			a
1288   04C6 C8          				ret			z								; Already zero
1289   04C7             
1290   04C7 36 00       				ld			(hl),$00				; Clear
1291   04C9 21 A2 09    				ld			hl,L09A6				; Game over mode
1292   04CC 22 00 20    				ld			(PRGPTR),hl			; Write mode
1293   04CF C9          				ret
1294   04D0             
1295   04D0             				;; Choose subroutine based on $2020 bits
1296   04D0             L04CE:
1297   04D0 21 20 20    				ld			hl,$2020
1298   04D3 7E          				ld			a,(hl)
1299   04D4 A7          				and			a
1300   04D5 C8          				ret			z								; Nothing to do
1301   04D6 36 00       				ld			(hl),$00				; Clear all bits
1302   04D8             
1303   04D8 1F          				rra
1304   04D9 DC 15 06    				call		c,L0601					; Bit 0 set = Clear explosion lights
1305   04DC             
1306   04DC 1F          				rra
1307   04DD DC 22 06    				call		c,L060E					; Bit 1 set = Clear explosion on screen
1308   04E0             
1309   04E0 1F          				rra
1310   04E1 DC F9 04    				call		c,L04F7					; Bit 2 set = Trigger bit 2 sound
1311   04E4             
1312   04E4 1F          				rra
1313   04E5 DC 48 06    				call		c,L0634					; Bit 3 set = Launch new ship
1314   04E8             
1315   04E8 1F          				rra
1316   04E9 DC FD 05    				call		c,L05E9					; Bit 4 set = Reload torpedos
1317   04EC             
1318   04EC 1F          				rra
1319   04ED DC 87 05    				call		c,L0573					; Bit 5 set = Increment $2000 address
1320   04F0             
1321   04F0 1F          				rra
1322   04F1 DC 80 05    				call		c,L056C					; Bit 6 set = Initialize $2000 address
1323   04F4             
1324   04F4 1F          				rra
1325   04F5 DC 13 05    				call		c,L0511					; Bit 7 set = Game time over
1326   04F8 C9          				ret
1327   04F9             
1328   04F9             
1329   04F9             				;; Bit 2 set on $2020
1330   04F9             				;; Trigger bit 2 sound and set timers
1331   04F9             L04F7:
1332   04F9 F5          				push		af
1333   04FA 21 26 20    				ld			hl,$2026
1334   04FD 7E          				ld			a,(hl)
1335   04FE A7          				and			a
1336   04FF CA 11 05    				jp			z,L050F					; Do nothing
1337   0502             
1338   0502 35          				dec			(hl)
1339   0503 3E 04       				ld			a,$04						; Sound bit 2
1340   0505 D3 05       				out			($05),a					; Audio outputs
1341   0507 3E 19       				ld			a,$19
1342   0509 32 23 20    				ld			($2023),a				; Set timer
1343   050C 3E 0F       				ld			a,$0F
1344   050E 32 25 20    				ld			(ATIMER),a			; Set timer
1345   0511             L050F:
1346   0511 F1          				pop  af
1347   0512 C9          				ret
1348   0513             
1349   0513             
1350   0513             				;; Bit 7 set on $2020
1351   0513             L0511:
1352   0513 21 2E 20    				ld			hl,$202E
1353   0516 7E          				ld			a,(hl)
1354   0517 A7          				and			a
1355   0518 C2 45 05    				jp			nz,NOEXT				; Jump if already extended time
1356   051B             
1357   051B 36 01       				ld			(hl),$01				; Only 1 extend
1358   051D 3A 07 20    				ld			a,(IN1)					; Last IN1
1359   0520 0F          				rrca
1360   0521 E6 70       				and			$70							; Base score for extended time (00 = none)
1361   0523 CA 45 05    				jp			z,NOEXT					; Jump if no extended time
1362   0526             
1363   0526 C6 09       				add			a,$09						; $20 dip = $19(00) score
1364   0528 21 12 20    				ld			hl,PSCORE				; Player score
1365   052B BE          				cp			(hl)
1366   052C             
1367   052C             #IF SC3DIG
1368   052C DA 35 05    				jp			c,DOEXT					; Jump if score higher than metric
1369   052F             
1370   052F             				;; Extended score if >10k
1371   052F 23          				inc			hl							; Player score hi
1372   0530 7E          				ld			a,(hl)
1373   0531 A7          				and			a
1374   0532 CA 45 05    				jp			z,NOEXT
1375   0535~            #ELSE
1376   0535~            				jp			nc,NOEXT				; Jump if score lower than metric
1377   0535             #ENDIF
1378   0535             
1379   0535             DOEXT:
1380   0535             #IF SEAMISS
1381   0535 3E 04       				ld			a,$04						; 4 extra misses
1382   0537~            #ELSE
1383   0537~            				ld			a,$20						; 20 extra seconds
1384   0537             #ENDIF
1385   0537 32 04 20    				ld			(GTIME),a				; Set game time
1386   053A 21 2D 0F    				ld			hl,LTEXT				; EXTENDED_TIME
1387   053D 11 03 3C    				ld			de,$3C03				; Location
1388   0540 3E 0C       				ld			a,$0C						; Length
1389   0542 C3 2E 0B    				jp			L0B30						; Draw string hl @ de, length a
1390   0545             
1391   0545             L053D:
1392   0545             NOEXT:
1393   0545 21 C9 20    				ld			hl,TORPS-TINC		; (Offset) Torp base
1394   0548 01 1E 00    				ld			bc,TINC					; Torp increment
1395   054B             L0543:
1396   054B 09          				add			hl,bc
1397   054C 7D          				ld			a,l
1398   054D FE 5F       				cp			$5F							; LSB past end of torps
1399   054F CA 64 05    				jp			z,L055C					; Done with torps
1400   0552             
1401   0552 7E          				ld			a,(hl)					; Load flags
1402   0553 A7          				and			a
1403   0554 F2 4B 05    				jp			p,L0543					; Loop if not active
1404   0557             
1405   0557 AF          				xor			a
1406   0558 32 21 20    				ld			($2021),a
1407   055B 32 2D 20    				ld			($202D),a				; Torpedo status
1408   055E 3E 01       				ld			a,$01
1409   0560 32 04 20    				ld			(GTIME),a				; Let torps finish
1410   0563 C9          				ret
1411   0564             
1412   0564             				;; Check if new high score
1413   0564             L055C:
1414   0564 21 2B 09    				ld			hl,L0929				; Attract mode
1415   0567 22 00 20    				ld			(PRGPTR),hl			; Next command
1416   056A             
1417   056A             #IF SC3DIG
1418   056A 3A 13 20    				ld			a,(PSCORE+1)		; Score hi byte
1419   056D 21 03 20    				ld			hl,HSCORE+1			; High  hi byte
1420   0570 BE          				cp			(hl)
1421   0571 D8          				ret			c								; Score lower
1422   0572             
1423   0572 77          				ld			(hl),a					; Write new hi byte
1424   0573             #ENDIF
1425   0573             
1426   0573 3A 12 20    				ld			a,(PSCORE)			; Player score
1427   0576 21 02 20    				ld			hl,HSCORE				; High score
1428   0579             
1429   0579             #IF SC3DIG
1430   0579 C2 7E 05    				jp			nz,HSDOLO				; Higher hi byte -> write low
1431   057C             #ENDIF
1432   057C BE          				cp			(hl)
1433   057D D8          				ret			c
1434   057E             
1435   057E             HSDOLO:
1436   057E 77          				ld			(hl),a					; Write new score
1437   057F C9          				ret
1438   0580             
1439   0580             
1440   0580             				;; Bit 6 set on $2020
1441   0580             				;; Initialize $2000 address
1442   0580             L056C:
1443   0580 21 61 09    				ld			hl,L0963				; Game over
1444   0583 22 00 20    				ld			(PRGPTR),hl
1445   0586 C9          				ret
1446   0587             
1447   0587             				;; Bit 5 set on $2020
1448   0587             				;; Increment $2000 address
1449   0587             L0573:
1450   0587 2A 00 20    				ld			hl,(PRGPTR)			; After 2011 timer?
1451   058A 23          				inc			hl
1452   058B 22 00 20    				ld			(PRGPTR),hl
1453   058E C9          				ret
1454   058F             
1455   058F             
1456   058F             				;; Handle change in fire button
1457   058F             HFIRE:
1458   058F C8          				ret			z								; Not pressed
1459   0590             
1460   0590 3A 04 20    				ld			a,(GTIME)				; Game timer
1461   0593 A7          				and			a
1462   0594 C8          				ret			z								; Not in game mode
1463   0595             
1464   0595 3A 21 20    				ld			a,($2021)				; Timer between torps
1465   0598 A7          				and			a
1466   0599 C0          				ret			nz							; Missile already active? 
1467   059A             
1468   059A 21 2D 20    				ld			hl,$202D				; Torpedo status
1469   059D 7E          				ld			a,(hl)
1470   059E E6 1F       				and			$1F
1471   05A0 C8          				ret			z								; Reloading...
1472   05A1             
1473   05A1 7E          				ld			a,(hl)					; Torpedo status
1474   05A2 E6 0F       				and			$0F							; Mask torp bits
1475   05A4 1F          				rra
1476   05A5 06 20       				ld			b,$20						; Bit 5 = Reload
1477   05A7 A7          				and			a
1478   05A8 CA AD 05    				jp			z,L0599
1479   05AB             
1480   05AB 06 10       				ld			b,$10						; Bit 4 = Ready
1481   05AD             L0599:
1482   05AD B0          				or			b
1483   05AE 77          				ld			(hl),a
1484   05AF D3 02       				out			($02),a					; Torpedo display
1485   05B1 21 21 20    				ld			hl,$2021				; Timer between torps
1486   05B4 36 08       				ld			(hl),$08				; Short timer between shots
1487   05B6 E6 10       				and			$10
1488   05B8 C2 BD 05    				jp			nz,L05A9
1489   05BB             
1490   05BB 36 3C       				ld			(hl),$3C				; Long timer to reload
1491   05BD             L05A9:
1492   05BD 3E 02       				ld			a,$02						; Sound bit 1 
1493   05BF D3 05       				out			($05),a					; Audio outputs
1494   05C1 3E 0F       				ld			a,$0F
1495   05C3 32 25 20    				ld			(ATIMER),a			; Set timer
1496   05C6             
1497   05C6             				;; Find empty slot
1498   05C6 21 C9 20    				ld			hl,TORPS-TINC 	; (Offset) Torp base
1499   05C9 11 1E 00    				ld			de,TINC 				; Torpedo increment
1500   05CC             L05B8:
1501   05CC 19          				add			hl,de
1502   05CD 7E          				ld			a,(hl)
1503   05CE A7          				and			a
1504   05CF FA CC 05    				jp			m,L05B8					; D7 high = used, try again
1505   05D2             
1506   05D2             				;; New torpedo
1507   05D2 11 08 00    				ld			de,$0008
1508   05D5 19          				add			hl,de						; Move ahead in sprite table
1509   05D6 36 0E       				ld			(hl),SHOT0>>8		; SHOT0 MSB
1510   05D8 2B          				dec			 hl
1511   05D9 36 73       				ld			(hl),SHOT0&$FF	; SHOT0 LSB
1512   05DB 2B          				dec			hl
1513   05DC 36 9C       				ld			(hl),$9C				; ??
1514   05DE 2B          				dec			hl
1515   05DF 36 E0       				ld			(hl),$E0				; Y pos
1516   05E1 2B          				dec			hl
1517   05E2 36 FA       				ld			(hl),$FA				; Delta y
1518   05E4 2B          				dec			hl
1519   05E5 2B          				dec			hl
1520   05E6             
1521   05E6             				;; Caculate shot X location
1522   05E6 11 60 0F    				ld			de,TGREY				; Grey code table?
1523   05E9 EB          				ex			de,hl
1524   05EA 3A 08 20    				ld			a,(IN0)					; Last IN0
1525   05ED E6 1F       				and			$1F							; Mask periscope bits
1526   05EF 4F          				ld			c,a
1527   05F0 06 00       				ld			b,$00
1528   05F2 09          				add			hl,bc
1529   05F3 7E          				ld			a,(hl)					; Location from grey code
1530   05F4 EB          				ex			de,hl
1531   05F5             
1532   05F5 77          				ld			(hl),a					; X Pos
1533   05F6 2B          				dec			hl
1534   05F7 36 00       				ld			(hl),$00				; Delta X
1535   05F9 2B          				dec			hl
1536   05FA 36 C0       				ld			(hl),$C0				; Set active
1537   05FC C9          				ret
1538   05FD             
1539   05FD             
1540   05FD             				;; Bit 4 set on $2020
1541   05FD             				;; Reset torpedo status after reload
1542   05FD             L05E9:
1543   05FD F5          				push		af
1544   05FE 21 2D 20    				ld			hl,$202D				; Torpedo status
1545   0601 7E          				ld			a,(hl)
1546   0602 E6 10       				and			$10							; Check ready
1547   0604 C2 13 06    				jp			nz,L05FF
1548   0607             
1549   0607 3E 1F       				ld			a,$1F						; Reset torpedo status
1550   0609 D3 02       				out			($02),a					; Torpedo lamps
1551   060B 77          				ld			(hl),a
1552   060C 3E 08       				ld			a,$08						; Sound bit 3
1553   060E D3 05       				out			($05),a					; Audio outputs
1554   0610 CD 01 08    				call		L07EA						; Redraw mines
1555   0613             
1556   0613             L05FF:
1557   0613 F1          				pop			af
1558   0614 C9          				ret
1559   0615             
1560   0615             				;; Bit 0 set on $2020
1561   0615             				;; Clear explosions
1562   0615             L0601:
1563   0615 F5          				push		af
1564   0616 AF          				xor			a								; Clear sounds
1565   0617 D3 05       				out			($05),a					; Audio outputs
1566   0619 D3 01       				out			($01),a					; Explosion lamp
1567   061B 3A 2D 20    				ld			a,($202D)				; Torpedo status
1568   061E D3 02       				out			($02),a					; Periscope lamp
1569   0620 F1          				pop			af
1570   0621 C9          				ret
1571   0622             
1572   0622             
1573   0622             				;; Bit 1 set on $2020
1574   0622             				;; Clear sprites?
1575   0622             L060E:
1576   0622 F5          				push		af
1577   0623 21 F0 21    				ld			hl,HMISS
1578   0626             L0612:
1579   0626 7E          				ld			a,(hl)
1580   0627 A7          				and			a
1581   0628 CA 46 06    				jp			z,L0632					; Already cleared
1582   062B             
1583   062B             				;; (hl) -> de, clear (hl)
1584   062B 36 00       				ld			(hl),$00
1585   062D 23          				inc			hl
1586   062E 57          				ld			d,a
1587   062F 5E          				ld			e,(hl)
1588   0630 36 00       				ld			(hl),$00
1589   0632 23          				inc			hl
1590   0633             
1591   0633 FE 2C       				cp			$2C
1592   0635 01 03 0A    				ld			bc,$0A03				; 10 x 3 byte area  (after ship hit)
1593   0638 DA 3E 06    				jp			c,L062A
1594   063B             
1595   063B 01 05 20    				ld			bc,$2005				; 32 x 5 byte area  (after mine hit)
1596   063E             L062A:
1597   063E EB          				ex			de,hl
1598   063F CD 39 0A    				call		L0A3F						; Clear area at hl
1599   0642 EB          				ex			de,hl
1600   0643 C3 26 06    				jp			L0612						; Loop
1601   0646             L0632:
1602   0646 F1          				pop			af
1603   0647 C9          				ret
1604   0648             
1605   0648             				;; Bit 3 set on $2020
1606   0648             				;; Launch new ship
1607   0648             L0634:
1608   0648 F5          				push		af
1609   0649 3A 05 20    				ld			a,(TIMER)
1610   064C E6 0F       				and			$0F							; Mask low 4 bits
1611   064E F6 50       				or			$50							; Set bits 6,4
1612   0650 32 22 20    				ld			($2022),a				; Set counter
1613   0653             
1614   0653 01 29 20    				ld			bc,$2029				; Ship type loc
1615   0656 0A          				ld			a,(bc)					; Get ship index
1616   0657 3C          				inc			a								; Increment
1617   0658 FE 07       				cp			$07							; Max = 6
1618   065A C2 5E 06    				jp			nz,L064A
1619   065D             
1620   065D AF          				xor			a								; Set to 0
1621   065E             L064A:
1622   065E 02          				ld			(bc),a					; Store ship index
1623   065F             
1624   065F 21 E0 0F    				ld			hl,L0FDE				; Ship type table
1625   0662 85          				add			a,l
1626   0663 6F          				ld			l,a
1627   0664 7E          				ld			a,(hl)					; Get ship type
1628   0665 47          				ld			b,a							; Stash in b
1629   0666 FE 06       				cp			$06							; Is small / fast?
1630   0668 C2 7F 06    				jp			nz,L066B				; No = jump
1631   066B             
1632   066B 3E 04       				ld			a,$04						; Sound bit 2
1633   066D D3 05       				out			($05),a					; Audio outputs
1634   066F 3E 19       				ld			a,$19
1635   0671 32 23 20    				ld			($2023),a				; Set timer
1636   0674 3E 02       				ld			a,$02
1637   0676 32 26 20    				ld			($2026),a				; Set timer
1638   0679 3E 0F       				ld			a,$0F
1639   067B 32 25 20    				ld			(ATIMER),a			; Set timer
1640   067E 78          				ld			a,b							; Ship type
1641   067F             
1642   067F             				;; hl = $2031 - $0d + $08 + $0d * a 
1643   067F             L066B:
1644   067F 21 2C 20    				ld			hl,SHIPA0-SINC+$08			; ROM loc in sprite table
1645   0682 11 0D 00    				ld			de,SINC					; Sprite increment
1646   0685             L0671:
1647   0685 19          				add			hl,de
1648   0686 3D          				dec			a
1649   0687 C2 85 06    				jp			nz,L0671
1650   068A             
1651   068A 78          				ld			a,b
1652   068B EB          				ex			de,hl
1653   068C             
1654   068C 21 1E 20    				ld			hl,$201E				; Current ship move index
1655   068F 7E          				ld			a,(hl)					; Read ship move index
1656   0690 34          				inc			(hl)						; Increment ship move index
1657   0691 21 80 0F    				ld			hl,L0F7E				; Even ship move table?
1658   0694 1F          				rra
1659   0695 D2 9F 06    				jp			nc,L068B
1660   0698             
1661   0698 21 B0 0F    				ld			hl,L0FAE				; Odd ship move table?
1662   069B 78          				ld			a,b
1663   069C F6 10       				or			$10							; Set direction bit
1664   069E 47          				ld			b,a
1665   069F             
1666   069F             L068B:
1667   069F 78          				ld			a,b
1668   06A0             
1669   06A0             				;; Index into ship type table
1670   06A0 3D          				dec  a									; a = 0-5 / 10-15
1671   06A1 07          				rlca
1672   06A2 07          				rlca
1673   06A3 07          				rlca
1674   06A4 E6 38       				and			$38							; Clear low bits
1675   06A6 85          				add			a,l
1676   06A7 6F          				ld			l,a
1677   06A8             
1678   06A8             				;; Copy ship table data to sprite block
1679   06A8 0E 08       				ld   c,$08
1680   06AA             L0696:
1681   06AA 7E          				ld			a,(hl)
1682   06AB 23          				inc			hl
1683   06AC 12          				ld			(de),a
1684   06AD 1B          				dec			de
1685   06AE 0D          				dec			c
1686   06AF C2 AA 06    				jp			nz,L0696
1687   06B2             
1688   06B2 78          				ld			a,b
1689   06B3 F6 C0       				or			$C0							; B7 = moving, B6 = don't clear, B5 = ??
1690   06B5 12          				ld			(de),a					; Store ship type?
1691   06B6 F1          				pop			af
1692   06B7 C9          				ret
1693   06B8             
1694   06B8             				;; Called when (($2000)) == 0
1695   06B8             L06A4:
1696   06B8 21 C1 21    				ld			hl,$21C1				; Start of sprite index list
1697   06BB             L06A7:
1698   06BB 7E          				ld			a,(hl)
1699   06BC A7          				and			a
1700   06BD C8          				ret			z								; Done if this sprite inactive
1701   06BE             
1702   06BE 36 00       				ld			(hl),$00				; Clear active flag
1703   06C0 23          				inc			hl
1704   06C1 56          				ld			d,(hl)					; Get index into sprite table
1705   06C2 E5          				push		hl
1706   06C3             
1707   06C3             				;; hl = $2024 + $d * a
1708   06C3 21 24 20    				ld			hl,SHIPA0-SINC	; No 0 element
1709   06C6 01 0D 00    				ld			bc,SINC					; Sprite entry length
1710   06C9             L06B5:
1711   06C9 09          				add			hl,bc
1712   06CA 3D          				dec			a
1713   06CB C2 C9 06    				jp			nz,L06B5
1714   06CE             
1715   06CE 01 08 00    				ld			bc,$0008				; Middle of sprite table and work back
1716   06D1 09          				add			hl,bc
1717   06D2             
1718   06D2             				;; Change sprite to sinking ship
1719   06D2 36 0E       				ld			(hl),SINK>>8		; SINK MSB
1720   06D4 2B          				dec			hl
1721   06D5 36 53       				ld			(hl),SINK&$FF		; SINK LSB
1722   06D7 2B          				dec			hl
1723   06D8 2B          				dec			hl							; hl = Y pos
1724   06D9 2B          				dec			hl
1725   06DA 36 01       				ld			(hl),$01				; Delta y (?)
1726   06DC 2B          				dec			hl							; hl = Y flags
1727   06DD 2B          				dec			hl
1728   06DE 72          				ld			(hl),d					; X position
1729   06DF 2B          				dec			hl
1730   06E0 36 00       				ld			(hl),$00				; Delta x (?)
1731   06E2 2B          				dec			hl
1732   06E3 46          				ld			b,(hl)					; Get flags + ship type
1733   06E4 36 E0       				ld			(hl),$E0				; Flags
1734   06E6             
1735   06E6 3A 04 20    				ld			a,(GTIME)				; Game time
1736   06E9 A7          				and			a
1737   06EA C2 EF 06    				jp			nz,L06DB				; Add score if time is left
1738   06ED E1          				pop			hl
1739   06EE C9          				ret
1740   06EF             
1741   06EF             
1742   06EF             				;; Score sunk ship
1743   06EF             L06DB:
1744   06EF 78          				ld			a,b
1745   06F0             
1746   06F0             				;; Draw sunk ship score
1747   06F0 01 59 0F    				ld			bc,TSCORE-1			; Ship hit score table
1748   06F3 E6 07       				and			$07
1749   06F5 81          				add			a,c
1750   06F6 4F          				ld			c,a							; bc = index into table
1751   06F7             
1752   06F7 11 E8 21    				ld			de,TXTBUF				; Text buffer
1753   06FA             
1754   06FA             #IF SC3DIG
1755   06FA CD 85 0A    				call		BCD2__					; BCD to string
1756   06FD CD AF 0A    				call		ADD00						; Append 00
1757   0700~            #ELSE
1758   0700~            				call		L0A82						; BCD to buffer
1759   0700~            				ld			a,$30
1760   0700~            				ld			(de),a					; Append 0
1761   0700~            				inc			de
1762   0700~            				ld			(de),a					; Append 0
1763   0700             #ENDIF
1764   0700             
1765   0700 0A          				ld			a,(bc)
1766   0701 21 12 20    				ld			hl,PSCORE				; Player score
1767   0704 86          				add			a,(hl)					; Add a
1768   0705 27          				daa
1769   0706 77          				ld			(hl),a					; Store
1770   0707             
1771   0707             #IF SC3DIG
1772   0707 D2 0C 07    				jp			nc,NOCARRY
1773   070A 23          				inc			hl							; Store MSB
1774   070B 34          				inc			(hl)						; Increment
1775   070C             
1776   070C             NOCARRY:
1777   070C             #ENDIF
1778   070C E1          				pop			hl
1779   070D             
1780   070D~            #IF GETMAC
1781   070D~            				call		GETBC
1782   070D             #ELSE
1783   070D 4E          				ld			c,(hl)					; Get bc from table
1784   070E 23          				inc			hl
1785   070F 46          				ld			b,(hl)
1786   0710 23          				inc			hl
1787   0711             #ENDIF
1788   0711             
1789   0711 E5          				push		hl
1790   0712 78          				ld			a,b
1791   0713 C6 20       				add			a,$20
1792   0715 21 BE 09    				ld			hl,L09C2				; Explosion lamp 0-7 table
1793   0718 DA 1E 07    				jp			c,L0707
1794   071B             
1795   071B 21 B6 09    				ld			hl,L09BA				; Explosion lamp 8-F table
1796   071E             L0707:
1797   071E             				;; Use 3 MSBs of c to index into table
1798   071E 79          				ld			a,c
1799   071F 07          				rlca
1800   0720 07          				rlca
1801   0721 07          				rlca
1802   0722 E6 07       				and			$07
1803   0724 85          				add			a,l
1804   0725 6F          				ld			l,a
1805   0726 7E          				ld			a,(hl)
1806   0727 D3 01       				out			($01),a					; Explosion lamp
1807   0729 3E 01       				ld			a,$01						; Sound bit 0
1808   072B D3 05       				out			($05),a					; Audio write
1809   072D 3E 1E       				ld			a,$1E
1810   072F 32 25 20    				ld			(ATIMER),a			; Set audio timer
1811   0732             
1812   0732             				;; Calculate score draw location
1813   0732 78          				ld			a,b
1814   0733 16 24       				ld			d,$24
1815   0735 C6 20       				add			a,$20
1816   0737 FA 3C 07    				jp			m,L0725
1817   073A 16 28       				ld			d,$28
1818   073C             L0725:
1819   073C 79          				ld			a,c
1820   073D 0F          				rrca
1821   073E 0F          				rrca
1822   073F 0F          				rrca
1823   0740 E6 1F       				and			$1F
1824   0742 CA 46 07    				jp			z,L072F
1825   0745 3D          				dec			a
1826   0746             L072F:
1827   0746 FE 1E       				cp			$1E
1828   0748 C2 4C 07    				jp			nz,L0735
1829   074B 3D          				dec			a
1830   074C             L0735:
1831   074C F6 A0       				or			$A0							; Set bits 7,5 
1832   074E 5F          				ld			e,a
1833   074F             
1834   074F CD F2 07    				call		L07DB						; de to first empty missle slot
1835   0752             
1836   0752 3E 2D       				ld			a,$2D
1837   0754 32 24 20    				ld			($2024),a				; Set timer (for showing score)
1838   0757 21 E9 21    				ld			hl,TXTBUF+1			; Buffer?
1839   075A 3E 03       				ld			a,$03						; Length
1840   075C CD 2E 0B    				call		L0B30						; Draw string hl @ de, length a
1841   075F             
1842   075F E1          				pop			hl
1843   0760 C3 BB 06    				jp			L06A7
1844   0763             
1845   0763             
1846   0763             				;; Mine collision detection?
1847   0763             L074C:
1848   0763 21 A3 21    				ld			hl,$21A3				; $44 long data block
1849   0766             L074F:
1850   0766 7E          				ld			a,(hl)
1851   0767 A7          				and			a
1852   0768 C8          				ret			z								; Skip if zero
1853   0769             
1854   0769 23          				inc			hl							; $21A4
1855   076A C6 10       				add			a,$10
1856   076C 07          				rlca										; 65432107
1857   076D 07          				rlca										; 54321076
1858   076E 07          				rlca										; 43210765
1859   076F E6 07       				and			$07							; Mines to to 7
1860   0771             
1861   0771             				;; hl= X position of mine
1862   0771 11 67 20    				ld			de,MINES - (2*MINC) + $02	; ($2067 = XPOS)
1863   0774 01 0D 00    				ld			bc,MINC					; Mine increment
1864   0777 EB          				ex			de,hl
1865   0778             L0761:
1866   0778 09          				add			hl,bc
1867   0779 09          				add			hl,bc
1868   077A 3D          				dec			a
1869   077B C2 78 07    				jp			nz,L0761
1870   077E             
1871   077E 1A          				ld			a,(de)					; $21A4
1872   077F D6 08       				sub			$08
1873   0781 96          				sub			(hl)
1874   0782 FE EC       				cp			$EC
1875   0784 D2 88 07    				jp			nc,L0771
1876   0787             
1877   0787 09          				add			hl,bc
1878   0788             L0771:
1879   0788 2B          				dec			hl
1880   0789 2B          				dec			hl
1881   078A             
1882   078A             #IF MINEFIX
1883   078A 7E          				ld			a,(hl)
1884   078B E6 7F       				and			$7F							; Clear active bit
1885   078D 77          				ld			(hl),a
1886   078E~            #ELSE
1887   078E~            				ld			(hl),$00
1888   078E             #ENDIF
1889   078E             
1890   078E EB          				ex			de,hl
1891   078F 2B          				dec			hl
1892   0790 7E          				ld			a,(hl)
1893   0791 C6 30       				add			a,$30
1894   0793 E6 F0       				and			$F0
1895   0795 57          				ld			d,a
1896   0796 36 00       				ld			(hl),$00
1897   0798 23          				inc			hl
1898   0799 5E          				ld			e,(hl)
1899   079A 23          				inc			hl
1900   079B E5          				push		hl
1901   079C CD FA 09    				call		L0A00						; Get address for shifted data
1902   079F             
1903   079F             				;; Make sure explosion fits on screen
1904   079F             				;; 0-11   -> 0
1905   079F             				;; 1D-1F -> 1C
1906   079F 7B          				ld			a,e
1907   07A0 E6 1F       				and			$1F
1908   07A2 CA AF 07    				jp			z,L0796					; e=$00
1909   07A5             
1910   07A5 3D          				dec			a
1911   07A6 CA AF 07    				jp			z,L0796					; e=$01
1912   07A9             
1913   07A9             L0790:
1914   07A9 3D          				dec			a
1915   07AA FE 1C       				cp			$1C
1916   07AC F2 A9 07    				jp			p,L0790					; Loop
1917   07AF             
1918   07AF             				;; Draw mine explosion
1919   07AF             L0796:
1920   07AF 5F          				ld			e,a
1921   07B0 CD F2 07    				call		L07DB						; de to first empty missile slot
1922   07B3             
1923   07B3 42          				ld			b,d
1924   07B4 04          				inc			b
1925   07B5 04          				inc			b
1926   07B6 4B          				ld			c,e
1927   07B7 0C          				inc			c
1928   07B8 C5          				push		bc
1929   07B9             
1930   07B9             				;; 3 rows up for middle char?
1931   07B9 7B          				ld			a,e
1932   07BA C6 60       				add			a,$60
1933   07BC 5F          				ld			e,a
1934   07BD D5          				push		de
1935   07BE             
1936   07BE 42          				ld			b,d
1937   07BF 0C          				inc			c
1938   07C0 C5          				push		bc
1939   07C1             
1940   07C1 3E 1E       				ld			a,$1E
1941   07C3 32 25 20    				ld			(ATIMER),a			; Set timer (audio)
1942   07C6 3E 0F       				ld			a,$0F
1943   07C8 32 24 20    				ld			($2024),a				; Set timer (show explosion)
1944   07CB 3E 10       				ld			a,$10						; Sound bit 4
1945   07CD D3 05       				out			($05),a					; Sound write
1946   07CF             
1947   07CF 7B          				ld			a,e							; No idea what e is here, but used as PRNG
1948   07D0             
1949   07D0~            #IF OLDINT
1950   07D0~            				and			$02							; Mask bit (a=0 or 2)
1951   07D0~            				ld			hl,TEMINE
1952   07D0~            				add			a,l
1953   07D0~            				ld			l,a							; hl = ZAP or WAM
1954   07D0~            
1955   07D0~            				;; Get address from table -> hl
1956   07D0~            				ld			e,(hl)
1957   07D0~            				inc			hl
1958   07D0~            				ld			d,(hl)
1959   07D0~            				ex			de,hl						; hl = Table entry
1960   07D0             #ELSE
1961   07D0             #IF MOREEXP
1962   07D0 E6 18       				and			$18							; Mask bit (a=0/8/10/18)
1963   07D2~            #ELSE
1964   07D2~            				and			$08							; Mask bit (a=0/8)
1965   07D2             #ENDIF
1966   07D2 21 3A 0F    				ld			hl,TZAP					; First mine explosion entry
1967   07D5 16 00       				ld			d,$00
1968   07D7 5F          				ld			e,a							; Use de in case we cross a page boundry
1969   07D8 19          				add			hl,de						; hl = Table entry
1970   07D9             #ENDIF
1971   07D9             
1972   07D9             				;; "Middle" letter or ZAP/WAM
1973   07D9 D1          				pop			de
1974   07DA 7E          				ld			a,(hl)
1975   07DB 23          				inc			hl
1976   07DC CD 2E 0B    				call		L0B30						; Draw string hl @ de, length a
1977   07DF             
1978   07DF             				;; Rest of ZAP/WAM
1979   07DF D1          				pop			de
1980   07E0 7E          				ld			a,(hl)
1981   07E1 23          				inc			hl
1982   07E2 CD 2E 0B    				call		L0B30						; Draw string hl @ de, length a
1983   07E5             
1984   07E5             				;; Bottom of mine explosion
1985   07E5 D1          				pop			de
1986   07E6 21 B3 0E    				ld			hl,MINEEXP
1987   07E9 3E 03       				ld			a,$03
1988   07EB CD 2E 0B    				call		L0B30						; Draw string hl @ de, length a
1989   07EE             
1990   07EE E1          				pop			hl
1991   07EF C3 66 07    				jp			L074F
1992   07F2             
1993   07F2             
1994   07F2             				;; Write de to first empty missile slot
1995   07F2             L07DB:
1996   07F2 21 F0 21    				ld			hl,HMISS				; Missile table
1997   07F5             L07DE:
1998   07F5 7E          				ld			a,(hl)
1999   07F6 23          				inc			hl
2000   07F7 B6          				or			(hl)
2001   07F8 23          				inc			hl
2002   07F9 C2 F5 07    				jp			nz,L07DE
2003   07FC             
2004   07FC 2B          				dec			hl
2005   07FD 73          				ld			(hl),e
2006   07FE 2B          				dec			hl
2007   07FF 72          				ld			(hl),d
2008   0800 C9          				ret
2009   0801             
2010   0801             				;; Draw mines after reload
2011   0801             L07EA:
2012   0801             #IF SC3DIG
2013   0801 21 13 20    				ld			hl,PSCORE+1			; Score MSB
2014   0804 7E          				ld			a,(hl)
2015   0805 A7          				and			a
2016   0806 C2 10 08    				jp			nz,MAXMINE			; >10k points
2017   0809             
2018   0809 2B          				dec			hl							; Score LSB
2019   080A 7E          				ld			a,(hl)
2020   080B~            #ELSE
2021   080B~            				ld			a,(PSCORE)			; Player score
2022   080B             #ENDIF
2023   080B             
2024   080B FE 40       				cp			$40
2025   080D             
2026   080D             #IF MINEFIX
2027   080D DA 12 08    				jp			c,LT40
2028   0810             
2029   0810             MAXMINE:
2030   0810 3E 30       				ld			a,$30						; Min of score or $30
2031   0812             LT40:
2032   0812 E6 30       				and			$30							; Clear LSBs
2033   0814 C6 10       				add			a,$10
2034   0816 21 7F 20    				ld			hl,MINES
2035   0819 01 0D 00    				ld			bc,MINC
2036   081C             
2037   081C             NEWMINE:
2038   081C 5F          				ld			e,a							; Stash a
2039   081D 7E          				ld			a,(hl)					; Mine status
2040   081E A7          				and			a
2041   081F FA 2D 08    				jp			m,NMEND					; Already active
2042   0822             
2043   0822 F6 80       				or			$80							; Activate mine
2044   0824 77          				ld			(hl),a					; Mine status
2045   0825 23          				inc			hl
2046   0826 23          				inc			hl
2047   0827 7E          				ld			a,(hl)					; Mine X pos
2048   0828 C6 80       				add			a,$80						; Reposition
2049   082A 77          				ld			(hl),a					; Mine X pos
2050   082B 2B          				dec			hl
2051   082C 2B          				dec			hl
2052   082D             
2053   082D             NMEND:
2054   082D 09          				add			hl,bc						; Next mine
2055   082E 7B          				ld			a,e							; Restore a
2056   082F D6 08       				sub			$08
2057   0831 C2 1C 08    				jp			nz,NEWMINE			; Loop
2058   0834 C9          				ret
2059   0835             
2060   0835~            #ELSE
2061   0835~            				jp			c,L07F4					; <$40
2062   0835~            
2063   0835~            MAXMINE:
2064   0835~            				ld			a,$39						; Min of score or $39
2065   0835~            L07F4:
2066   0835~            				ld			($202C),a				; Mine counter
2067   0835~            
2068   0835~            				ld			hl,MINES				; 1st mine sprite
2069   0835~            				ld			de,$5050				; Initial Mine X,Y
2070   0835~            
2071   0835~            L07FD:
2072   0835~            				ld			a,(hl)
2073   0835~            				and			a
2074   0835~            				jp			m,L0835					; Mine needs to be erased
2075   0835~            
2076   0835~            				;; Launch mine
2077   0835~            NEWMINE:
2078   0835~            L0802:
2079   0835~            				ld			bc,$0008
2080   0835~            				add			hl,bc						; Advance in sprite entry
2081   0835~            				ld			(hl),MINE>>8		; Mine MSB (+8)
2082   0835~            				dec			hl
2083   0835~            				ld			(hl),MINE&$FF 	; Mine LSB (+7)
2084   0835~            				dec			hl
2085   0835~            				dec			hl
2086   0835~            				ld			(hl),e					; Y Pos (+5)
2087   0835~            				dec			hl
2088   0835~            				ld			(hl),b					; Delta Y (+4)
2089   0835~            				dec			hl
2090   0835~            				dec			hl
2091   0835~            				ld			(hl),d					; X Pos (+2)
2092   0835~            				dec			hl
2093   0835~            				ld			(hl),$01				; Delta X (+1)
2094   0835~            				dec			hl
2095   0835~            				ld			(hl),$80				; Flags
2096   0835~            
2097   0835~            NOMINE:
2098   0835~            				ld			a,d
2099   0835~            				add			a,$51
2100   0835~            				ld			d,a
2101   0835~            				rra
2102   0835~            				jp			c,L082E
2103   0835~            
2104   0835~            				ld			a,($202C)				; Mine counter
2105   0835~            				sub			$10
2106   0835~            				ret			m								; Don't add more mines
2107   0835~            
2108   0835~            				ld			($202C),a				; Store count
2109   0835~            				ld			a,e
2110   0835~            				add			a,$20
2111   0835~            				ld			e,a
2112   0835~            
2113   0835~            L082E:
2114   0835~            				ld			bc,SINC					; Sprite table increment
2115   0835~            				add			hl,bc						; Next mine
2116   0835~            				jp			L07FD						; More mines!
2117   0835~            
2118   0835~            				;; Erase mine area before launch
2119   0835~            L0835:
2120   0835~            				push		hl
2121   0835~            				push		de
2122   0835~            				inc			hl
2123   0835~            				inc			hl
2124   0835~            				ld			e,(hl)
2125   0835~            				inc			hl
2126   0835~            				inc			hl
2127   0835~            				inc			hl
2128   0835~            				ld			d,(hl)
2129   0835~            				call		L0A00						; Get address for shifted data
2130   0835~            				ex			de,hl
2131   0835~            				ld			bc,$1002				; 16 x 2 byte area
2132   0835~            				call		L0A3F						; Clear area at hl
2133   0835~            				pop			de
2134   0835~            				pop			hl
2135   0835~            				jp			L0802
2136   0835             #ENDIF
2137   0835             
2138   0835             				;; Handle high score erase
2139   0835             HERASE:
2140   0835 C8          				ret			z
2141   0836 AF          				xor			a								; a=0
2142   0837             
2143   0837             #IF SC3DIG
2144   0837 21 02 20    				ld			hl,HSCORE
2145   083A 77          				ld			(hl),a					; High score LSB
2146   083B 23          				inc			hl
2147   083C 77          				ld			(hl),a					; High score MSB
2148   083D~            #ELSE
2149   083D~            				ld			(HSCORE),a			; Clear high score
2150   083D             #ENDIF
2151   083D             
2152   083D 3A 10 20    				ld			a,(TIMER1)
2153   0840 A7          				and			a
2154   0841 C8          				ret			z
2155   0842             
2156   0842             #IF SC3DIG
2157   0842 01 02 20    				ld			bc,HSCORE
2158   0845 11 E8 21    				ld			de,TXTBUF
2159   0848 D5          				push		de
2160   0849 CD AC 0A    				call		BCD300
2161   084C~            #ELSE
2162   084C~            				ld			hl,TXTBUF				; Text buffer
2163   084C~            				push		hl
2164   084C~            
2165   084C~            				;; Write 4x '0' to buffer
2166   084C~            				ld			bc,$0430				; b=loop counter, c=data
2167   084C~            L085E:
2168   084C~            				ld			(hl),c
2169   084C~            				inc			hl
2170   084C~            				dec			b
2171   084C~            				jp			nz,L085E				; Loop
2172   084C             #ENDIF
2173   084C             
2174   084C E1          				pop			hl
2175   084D 11 25 3E    				ld			de,$3E25				; Screen location
2176   0850             
2177   0850             #IF SC3DIG
2178   0850 3E 05       				ld			a,$05						; Length = 5
2179   0852~            #ELSE
2180   0852~            				ld			a,$04						; Length = 4
2181   0852             #ENDIF
2182   0852             
2183   0852 C3 2E 0B    				jp			L0B30						; Draw string hl @ de, length a
2184   0855             
2185   0855             				;; $09E8 Entry B = Write low 3 bits of $2003 to $2029?
2186   0855             JTBLB:													; $086D
2187   0855 EB          				ex			de,hl						; Sequence back to hl
2188   0856 22 00 20    				ld			(PRGPTR),hl			; Store
2189   0859             
2190   0859 3A 05 20    				ld			a,(TIMER)				; 
2191   085C E6 07       				and			$07							; Mask low 3 bits
2192   085E FE 07       				cp			$07							; == $07?
2193   0860 C2 64 08    				jp			nz,L087C
2194   0863             
2195   0863 AF          				xor			a								; Clear
2196   0864             L087C:
2197   0864 32 29 20    				ld			($2029),a				; Write
2198   0867 C9          				ret
2199   0868             
2200   0868~            #IF OLDINT
2201   0868~            				;; End of game clears
2202   0868~            L0880:
2203   0868~            				di
2204   0868~            				ex			de,hl						; Stash hl in de
2205   0868~            				ld			(PRGPTR),hl
2206   0868~            				xor			a
2207   0868~            				out			($02),a					; Clear periscope lamp
2208   0868~            				out			($05),a					; Clear audio latches
2209   0868~            				out			($01),a					; Clear explosion lamp
2210   0868~            				pop			hl							; (Return address)
2211   0868~            				ld			bc,$0000
2212   0868~            				ld			de,$0000
2213   0868~            				ld			a,$10
2214   0868~            				ld			sp,$4010				; Clear $4010 down to $2011
2215   0868~            L0898:
2216   0868~            				push		bc
2217   0868~            				inc			de
2218   0868~            				cp			d
2219   0868~            				jp			nz,L0898									; Loop
2220   0868~            				ld			sp,$2400
2221   0868~            				jp			(hl)
2222   0868             #ENDIF
2223   0868             
2224   0868             				;; $09E8 Entry 3 (End game)
2225   0868             JTBL3:
2226   0868             L08A2:
2227   0868 E1          				pop			hl							; Return address (SP trashed)
2228   0869~            #IF OLDINT
2229   0869~            				ld			($2009),hl			; Stash in ($2009-200a)
2230   0869~            				call		L0880						; End of game clears
2231   0869~            				ld			hl,($2009)			; Get return address back
2232   0869             #ELSE
2233   0869             				;; Embedded end of game clears
2234   0869 F3          				di
2235   086A EB          				ex			de,hl						; hl = program stack
2236   086B 22 00 20    				ld			(PRGPTR),hl			; Next command
2237   086E EB          				ex			de,hl						; hl = return address  REDO THIS
2238   086F AF          				xor			a
2239   0870 D3 02       				out			($02),a					; Clear periscope lamp
2240   0872 D3 05       				out			($05),a					; Clear audio latches
2241   0874 D3 01       				out			($01),a					; Clear explosion lamp
2242   0876             
2243   0876             				;; Clear $400F down to $2010
2244   0876 01 00 00    				ld			bc,$0000
2245   0879 11 00 00    				ld			de,$0000
2246   087C 3E 10       				ld			a,$10
2247   087E 31 10 40    				ld			sp,$4010				; Push it real good
2248   0881             CLRLOOP:
2249   0881 C5          				push		bc
2250   0882 13          				inc			de
2251   0883 BA          				cp			d
2252   0884 C2 81 08    				jp			nz,CLRLOOP			; Loop
2253   0887             
2254   0887 31 00 24    				ld			sp,$2400				; Reset stack pointer
2255   088A             #ENDIF
2256   088A E5          				push		hl							; Restore return address
2257   088B             
2258   088B             #IF MINEFIX
2259   088B             				;; Initial X,Y = d,e = $50,$50
2260   088B             				;; For Mine fix:
2261   088B             				;; $00, $20:		Y=$50, dX= 1, Flags=$00
2262   088B             				;; $40, $60:		Y=$70, dx= 1, Flags=$00
2263   088B             				;; $80, $A0:		Y=$90, dX= 1, Flags=$00
2264   088B             				;; $C0, $E0:		Y=$B0, dx= 1, Flags=$00
2265   088B             				
2266   088B             				;; For Seawolf '24:
2267   088B             				;; $00, $20:		Y=$50, dX= 1, Flags=$00
2268   088B             				;; $40, $60:		Y=$70, dx=-1, Flags=$40
2269   088B             				;; $80, $A0:		Y=$90, dX= 2, Flags=$00
2270   088B             				;; $C0, $E0:		Y=$B0, dx=-2, Flags=$40
2271   088B             
2272   088B             SETMINES:
2273   088B 3E 00       				ld			a,$00						; Loop counter
2274   088D 21 7F 20    				ld			hl,MINES				; First mine
2275   0890 16 50       				ld			d,$50						; Initial mine x
2276   0892             SMLOOP:
2277   0892 5F          				ld			e,a							; Stash counter
2278   0893 23          				inc			hl							; +1 = Delta X
2279   0894 34          				inc			(hl)						; +/-1
2280   0895             
2281   0895             #IF FANCY
2282   0895 A7          				and			a								; High bit set = +/2
2283   0896 F2 9A 08    				jp			p,SMROW01				; Rows 0 and 1
2284   0899             
2285   0899             SMROW23:
2286   0899 34          				inc			(hl)						; +/-2
2287   089A             SMROW01:
2288   089A E6 40       				and			$40
2289   089C             
2290   089C CA A6 08    				jp			z,SMROW02				; Rows 0 and 2
2291   089F             SMROW13:
2292   089F 2B          				dec			hl							; +0 = Flags
2293   08A0 36 10       				ld			(hl),$10				; Direction flag
2294   08A2 23          				inc			hl							; +1 = Delta X
2295   08A3 AF          				xor			a								; a=0
2296   08A4 96          				sub			(hl)						; Invert
2297   08A5 77          				ld			(hl),a
2298   08A6             SMROW02:
2299   08A6             #ENDIF
2300   08A6             
2301   08A6 23          				inc			hl							; +2 = X Pos
2302   08A7 72          				ld			(hl),d
2303   08A8 23          				inc			hl							; +3 = Y flags
2304   08A9 23          				inc			hl							; +4 = Delta Y
2305   08AA 23          				inc			hl							; +5 = Y Pos
2306   08AB 7B          				ld			a,e
2307   08AC E6 DF       				and			$DF							; $00/$00/$40/$40/$80/$80/$C0/$C0
2308   08AE 1F          				rra											; $00/$00/$20/$20/$40/$40/$60/$60
2309   08AF C6 50       				add			a,$50						; $50/$50/$70/$70/$90/$90/$B0/$B0
2310   08B1 77          				ld			(hl),a
2311   08B2 23          				inc			hl							; +6 = ???
2312   08B3 23          				inc			hl							; +7 = ROM LSB
2313   08B4 36 A1       				ld			(hl),MINE&$FF
2314   08B6 23          				inc			hl							; +8 = ROM MSB
2315   08B7 36 0E       				ld			(hl),MINE>>8
2316   08B9             
2317   08B9 79          				ld			a,c							; Restore a
2318   08BA 01 05 00    				ld			bc,MINC-$08			; At $08, advance to $0d
2319   08BD 09          				add			hl,bc
2320   08BE 4F          				ld			c,a							; Stash a
2321   08BF             
2322   08BF 7A          				ld			a,d							; X Pos
2323   08C0 C6 50       				add			a,$50						; +$50
2324   08C2 57          				ld			d,a
2325   08C3             
2326   08C3 7B          				ld			a,e
2327   08C4 C6 20       				add			a,$20						; Next mine
2328   08C6 C2 92 08    				jp			nz,SMLOOP
2329   08C9             #ENDIF
2330   08C9             
2331   08C9             				;; Fresh water
2332   08C9 21 03 0F    				ld			hl,L0F04				; Water
2333   08CC 11 E0 27    				ld			de,WAVLOC				; Screen location
2334   08CF 3E 20       				ld			a,$20						; Length
2335   08D1 C3 2E 0B    				jp			L0B30						; Draw string hl @ de, length a
2336   08D4             
2337   08D4             L08B8:
2338   08D4 DB 01       				in			a,($01)					; IN0
2339   08D6 47          				ld			b,a
2340   08D7 DB 01       				in			a,($01)					; IN0
2341   08D9 21 08 20    				ld			hl,IN0 					; Last IN0
2342   08DC 11 D6 09    				ld			de,TBLIN0				; Jump table for IN0
2343   08DF B8          				cp			b								; Inputs stable?
2344   08E0 CC 03 0B    				call		z,L0B05					; Handle inputs
2345   08E3             
2346   08E3             				;; Jump table do nothing "routine"
2347   08E3             				;; (and end of this one)
2348   08E3             HRET:
2349   08E3 C9          				ret
2350   08E4             
2351   08E4             #IF SC3DIG
2352   08E4             				;; Check free play
2353   08E4             CHKFP:
2354   08E4 DB 02       				in			a,($02)					; IN1 (DIPs)
2355   08E6 E6 04       				and			$04
2356   08E8 C8          				ret			z
2357   08E9             
2358   08E9 32 06 20    				ld			(CREDIT),a			; 4 credits
2359   08EC C9          				ret
2360   08ED             #ENDIF
2361   08ED             
2362   08ED             				;; Handle coin
2363   08ED             HCOIN:
2364   08ED C8          				ret			z								; No coin
2365   08EE 3E 20       				ld			a,$20						; Sound bit 5
2366   08F0 D3 05       				out			($05),a					; Audio outputs
2367   08F2 3E 0F       				ld			a,$0F
2368   08F4 32 25 20    				ld			(ATIMER),a			; Set timer
2369   08F7             
2370   08F7             #IF SC3DIG
2371   08F7 21 06 20    				ld			hl,CREDIT				; Credits
2372   08FA 34          				inc			(hl)						; Add credit
2373   08FB             
2374   08FB 11 33 38    				ld			de,$3833				; Screen location
2375   08FE 21 F0 0E    				ld			hl,LTPUSH				; PRESS START
2376   0901 3E 0B       				ld			a,$0B						; Length
2377   0903 C3 2E 0B    				jp			L0B30						; Draw string hl @ de, length a
2378   0906 C9          				ret
2379   0907~            #ELSE
2380   0907~            				ld			a,(IN1)					; Last IN1
2381   0907~            				ld			b,a
2382   0907~            				ld			hl,HCREDIT			; Half credits
2383   0907~            				inc			(hl)						; Increment
2384   0907~            				and			$04							; DSW2 = coinage
2385   0907~            				jp			z,L08E2
2386   0907~            
2387   0907~            				ld			a,(hl)
2388   0907~            				rrca
2389   0907~            				ret			c								; Only 1 half credit
2390   0907~            
2391   0907~            L08E2:
2392   0907~            				ld			(hl),$00				; Clear half credit
2393   0907~            				inc			hl
2394   0907~            				inc			(hl)						; Add credit
2395   0907~            
2396   0907~            				ld			a,b							; Last IN1
2397   0907~            				and			$08							; DSW3 = coinage
2398   0907~            				jp			z,L08F4
2399   0907~            
2400   0907~            				inc			(hl)						; Add credit
2401   0907~            				ld			a,b							; Last IN1
2402   0907~            				and			$04							; DSW2 = coinage
2403   0907~            				jp			z,L08F4
2404   0907~            
2405   0907~            				inc			(hl)						; Add credit (2C, 3C)
2406   0907~            
2407   0907~            L08F4:
2408   0907~            				ld			a,(hl)					; Get credits
2409   0907~            				and			$0F							; Useless
2410   0907~            				ld			(hl),a					; Store credits
2411   0907~            
2412   0907~            				;; Falls through to start game when credits added
2413   0907             #ENDIF
2414   0907             
2415   0907             
2416   0907             HPUSH:
2417   0907 C8          				ret			z
2418   0908 3A 04 20    				ld			a,(GTIME)				; Game time
2419   090B A7          				and			a
2420   090C C0          				ret			nz							; Skip if game active
2421   090D             
2422   090D             #IF SC3DIG
2423   090D CD E4 08    				call		CHKFP
2424   0910             #ENDIF
2425   0910 21 06 20    				ld			hl,CREDIT				; Credits?
2426   0913 7E          				ld			a,(hl)
2427   0914 A7          				and			a
2428   0915             
2429   0915             #IF SC3DIG
2430   0915 C8          				ret			z
2431   0916~            #ELSE
2432   0916~            				jp			z,L091A					; No credits, ignore start
2433   0916             #ENDIF
2434   0916             
2435   0916             L0906:
2436   0916 35          				dec			(hl)
2437   0917 DB 01       				in			a,($01)					; IN1
2438   0919             
2439   0919~            #IF OLDDIP
2440   0919~            				rlca										; 65432107
2441   0919~            				rlca										; 54321076
2442   0919~            				and			$03							; Game time dips =
2443   0919~            				ld			de,LDTIME				; $0F54 
2444   0919~            				add			a,e							; Index into table
2445   0919~            				ld			e,a
2446   0919~            				ld			a,(de)
2447   0919             #ELSE
2448   0919             #IF SEAMISS
2449   0919 07          				rlca										; 65432107
2450   091A 07          				rlca										; 54321076
2451   091B 07          				rlca										; 43210765
2452   091C E6 06       				and			$06							; Miss DIPs
2453   091E C6 10       				add			a,$10						; $10/$12/$14/$16
2454   0920~            #ELSE
2455   0920~            				rrca										; 076543210
2456   0920~            				rrca										; 107654321
2457   0920~            				and			$30							; Game time DIPs
2458   0920~            				add			a,$61						; $61/$71/$81/$91
2459   0920             #ENDIF
2460   0920             #ENDIF
2461   0920             
2462   0920 32 04 20    				ld			(GTIME),a				; Store time
2463   0923 32 2A 20    				ld			($202A),a				; Store time
2464   0926             
2465   0926             #IF SEAMISS
2466   0926 AF          				xor			a
2467   0927 32 0E 20    				ld			(MISSED),a			; Clear missed flag
2468   092A             #ENDIF
2469   092A             
2470   092A C9          				ret
2471   092B             
2472   092B~            #IF 1-SC3DIG
2473   092B~            				;; 	(original code, not used for 3 dig)?
2474   092B~            L091A:
2475   092B~            				ld			a,(IN1)					; Last IN1
2476   092B~            				and			$0C							; Mask coinage
2477   092B~            				cp			$0C							; 2C / 3Credit?
2478   092B~            				ret			nz
2479   092B~            
2480   092B~            				dec			hl
2481   092B~            				ld			a,(hl)					; Half credits
2482   092B~            				and			a
2483   092B~            				ret			z
2484   092B~            				jp			L0906
2485   092B             #ENDIF
2486   092B             
2487   092B             
2488   092B             				;; $2000 at reset
2489   092B             				;; Attract mode loop
2490   092B             
2491   092B             				;; Clear 1 char for unknown reason
2492   092B             L0929:
2493   092B 04          				.db			$04							; Command 4 = String
2494   092C 01          				.db			$01							; Length
2495   092D B6 0E       				.dw			LTBLANK					; String src address
2496   092F 30 3E       				.dw			$3E30						; Screen dst address
2497   0931             
2498   0931             				;; INSERT COIN or PUSH BUTTOM
2499   0931 09          				.db			$09							; Commnad 9
2500   0932 06 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2501   0934 33 38       				.dw			$3833						; Location
2502   0936 E5 0E       				.dw			LTCOIN					; "Insert Coin"
2503   0938 F0 0E       				.dw			LTPUSH					; "Push Button"
2504   093A             
2505   093A             				;; HIGH SCORE / YOUR SCORE
2506   093A 04          				.db			$04							; Command 4 = String
2507   093B             #IF SC3DIG
2508   093B 1B          				.db			$1B							; Length
2509   093C~            #ELSE
2510   093C~            				.db			$1A							; Length
2511   093C             #ENDIF
2512   093C CA 0E       				.dw			LTHIGH					; String src address
2513   093E 02 3C       				.dw			$3C02						; Screen dst address
2514   0940             
2515   0940             				;; Draw high score
2516   0940 0A          				.db			$0A							; Command A = BCD @ loc
2517   0941 02 20       				.dw			HSCORE					; bc = 2006 = high score
2518   0943~            #IF OLDINT
2519   0943~            				.dw			TXTBUF					; Buffer loc
2520   0943             #ENDIF
2521   0943 25 3E       				.dw			$3E25						; Screen loc
2522   0945             
2523   0945             				;; Draw player score
2524   0945 0A          				.db			$0A							; Command A = BCD @ loc
2525   0946 12 20       				.dw			PSCORE					; bc = 202b = score
2526   0948~            #IF OLDINT
2527   0948~            				.dw			TXTBUF					; Buffer loc
2528   0948             #ENDIF
2529   0948             #IF SC3DIG
2530   0948 36 3E       				.dw			$3E36						; Screen loc
2531   094A~            #ELSE
2532   094A~            				.dw			$3E35						; Screen loc
2533   094A             #ENDIF
2534   094A             
2535   094A             				;; Delay
2536   094A 02          				.db			$02							; Command 2 = arg to 2010
2537   094B 0F          				.db			$0F							; arg
2538   094C             
2539   094C             				;; GAME OVER
2540   094C             L094E:
2541   094C 04          				.db			$04							; Command 4 = String
2542   094D 09          				.db			$09							; Length
2543   094E C1 0E       				.dw			LTOVER					; String src address
2544   0950 0B 2C       				.dw			$2C0B						; Screen dst address
2545   0952             
2546   0952             				;; Delay timer
2547   0952 01          				.db			$01							; Command 1 = arg to 2011
2548   0953 1E          				.db			$1E							; arg
2549   0954             
2550   0954 00          				.db			$00							; Command 0 = Wait for $2011 timer
2551   0955             
2552   0955             				;; Clear GAME OVER
2553   0955 04          				.db			$04							; Command 4 = String
2554   0956 09          				.db			$09							; Length
2555   0957 B6 0E       				.dw			LTBLANK					; String src address
2556   0959 0B 2C       				.dw			$2C0B						; Screen dst address
2557   095B             
2558   095B             				;; Delay timer
2559   095B 01          				.db			$01							; Command 1 = arg to 2011
2560   095C 1E          				.db			$1E							; arg
2561   095D             
2562   095D 00          				.db			$00							; Command 0 = Wait for $2011 timer
2563   095E             
2564   095E             				;; Loop
2565   095E 06          				.db			$06							; Command 6 = Set ($2000)
2566   095F 4C 09       				.dw			L094E						; Next command address
2567   0961             
2568   0961             				;; End of game
2569   0961             L0963:
2570   0961 03          				.db			$03							; Do end of game sequence
2571   0962             
2572   0962             				;; SEA WOLF
2573   0962 04          				.db			$04							; Command 4 = String
2574   0963 08          				.db			$08							; Length
2575   0964 FB 0E       				.dw			LTSEA						; String src address (SEA WOLF)
2576   0966 0C 2C       				.dw			$2C0C						; Screen dst address
2577   0968             
2578   0968             				;; HIGH SCORE / YOUR SCORE
2579   0968 04          				.db			$04							; Command 4 = String
2580   0969 0A          				.db			$0A							; Length
2581   096A CA 0E       				.dw			LTHIGH					; String src address (HIGH SCORE)
2582   096C 02 3C       				.dw			$3C02						; Screen dst address
2583   096E             
2584   096E             				;; Draw high score
2585   096E 0A          				.db			$0A							; Command A = BCD @ loc
2586   096F 02 20       				.dw			HSCORE					; bc = 2006 = high score
2587   0971~            #IF OLDINT
2588   0971~            				.dw			TXTBUF					; Buffer loc
2589   0971             #ENDIF
2590   0971 25 3E       				.dw			$3E25						; Screen loc
2591   0973             
2592   0973             				;; INSERT COIN / PUSH BUTTOM
2593   0973 09          				.db			$09							; Commnad 9
2594   0974 06 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2595   0976 33 38       				.dw			$3833						; Location
2596   0978 E5 0E       				.dw			LTCOIN					; "Insert Coin"
2597   097A F0 0E       				.dw			LTPUSH					; "Push Button"
2598   097C             
2599   097C             				;; Delay timer
2600   097C 01          				.db			$01							; Command 1 = arg to 2011
2601   097D 5A          				.db			$5A							; arg
2602   097E             
2603   097E 00          				.db			$00							; Command 0 = Wait for $2011 timer
2604   097F             
2605   097F             				;; Launch ship in attract
2606   097F 08          				.db			$08							; Command 8 (Data backwards to loc)
2607   0980 09          				.db			$09							; Count
2608   0981 60 20       				.dw			$2060						; de = $2060
2609   0983 E9 0D       				.dw			SHIP3						; $0DBE = Ship address
2610   0985 20          				.db			$20							; $20 = ???
2611   0986 15          				.db			$15							; $15 = Y Pos
2612   0987 00          				.db			$00							; $00 = Delta y
2613   0988 E0          				.db			$E0							; $E0 = Y flags
2614   0989 00          				.db			$00							; $00 = X pos
2615   098A 01          				.db			$01							; $01 = Delta x
2616   098B C4          				.db			$C4							; $C4 = Flags (Ship 4, active)
2617   098C             
2618   098C             				;; Delay
2619   098C 01          				.db			$01							; Command 1 = arg to 2011
2620   098D 5A          				.db			$5A							; arg
2621   098E             
2622   098E 00          				.db			$00							; Command 0 = Wait for $2011 timer
2623   098F             
2624   098F             				;; Launch missile in attract
2625   098F 08          				.db			$08							; Command 8 (Data backwards to loc)
2626   0990 09          				.db			$09							; Count
2627   0991 EF 20       				.dw			$20EF						; de = $20EF
2628   0993 73 0E       				.dw			SHOT0						; $0E75 = Shot address
2629   0995 9C          				.db			$9C							; $9C = ???
2630   0996 E0          				.db			$E0							; $E0 = Y Pos
2631   0997 FA          				.db			$FA							; $FA = Delta y
2632   0998 00          				.db			$00							; $00 = Y flags
2633   0999 A8          				.db			$A8							; $A8 = X pos
2634   099A 00          				.db			$00							; $00 = Delta X
2635   099B C0          				.db			$C0							; $C0 = Flags (Non-ship, active)
2636   099C             
2637   099C             				;; Delay
2638   099C 01          				.db			$01							; Command 1 = arg to 2011
2639   099D B4          				.db			$B4							; arg
2640   099E             
2641   099E 00          				.db			$00							; Command 0 = Wait for $2011 timer
2642   099F             
2643   099F             				;; Loop
2644   099F 06          				.db			$06							; Command 6 = Set ($2000)
2645   09A0 61 09       				.dw			L0963						; Next command address
2646   09A2             
2647   09A2             
2648   09A2             				;; Game play control loop
2649   09A2             L09A6:
2650   09A2             				;; Delay timer
2651   09A2 01          				.db			$01							; Command 1 = arg to 2011
2652   09A3 0F          				.db			$0F							; arg
2653   09A4             
2654   09A4 00          				.db			$00							; Command 0 = Wait for $2011 timer
2655   09A5             
2656   09A5 03          				.db			$03							; Command 3 = End game
2657   09A6             
2658   09A6             				;; TIME / SCORE
2659   09A6 04          				.db			$04							; Command 4 = String
2660   09A7 09          				.db			$09							; Length
2661   09A8 23 0F       				.dw			LTTIME					; String src address (TIME/SCORE)
2662   09AA 0E 3C       				.dw			$3C0E						; Screen dst address
2663   09AC             
2664   09AC 07          				.db			$07							; Command 7 = Store a to bc
2665   09AD 28          				.db			$28							; a
2666   09AE 22 20       				.dw			$2022						; bc
2667   09B0             
2668   09B0 07          				.db			$07							; Command 7 = Store a to bc
2669   09B1 0A          				.db			$0A							; a
2670   09B2 21 20       				.dw			$2021						; bc
2671   09B4             
2672   09B4~            #IF OLDINT
2673   09B4~            				.db			$0B							; Command B = Write $2029
2674   09B4             #ELSE
2675   09B4 05          				.db			$05							; Command 5 = Write $2029
2676   09B5             #ENDIF
2677   09B5             
2678   09B5 00          				.db			$00							; Command 0 = Wait for $2011 timer
2679   09B6             
2680   09B6             
2681   09B6             				;; Explosion lamp tables!
2682   09B6             L09BA:
2683   09B6 48 44 42 41 				.db			$48, $44, $42, $41, $88, $84, $82, $81		; 
2683   09BA 88 84 82 81 
2684   09BE             L09C2:
2685   09BE 18 14 12 11 				.db			$18, $14, $12, $11, $28, $24, $22, $21		; 
2685   09C2 28 24 22 21 
2686   09C6             
2687   09C6             
2688   09C6             				;; Jump table for IN1 changes (8 entries)
2689   09C6             TBLIN1:
2690   09C6 ED 08       				.dw			HCOIN						; 0 = 08C8 = Coin
2691   09C8 07 09       				.dw			HPUSH						; 1 = 08F8 = Start
2692   09CA E3 08       				.dw			HRET						; 2 = 08C7 = (ret) Coinage
2693   09CC E3 08       				.dw			HRET						; 3 = 08C7 = (ret) Coinage
2694   09CE 35 08       				.dw			HERASE					; 4 = 084D = Erase highs
2695   09D0 E3 08       				.dw			HRET						; 5 = 08C7 = (ret) Extended time
2696   09D2 E3 08       				.dw			HRET						; 6 = 08C7 = (ret) Extended time
2697   09D4 E3 08       				.dw			HRET						; 7 = 08C7 = (ret) Extended time
2698   09D6             
2699   09D6             				;; Jump table for IN0 changes (8 entries)
2700   09D6             TBLIN0:
2701   09D6 E3 08       				.dw			HRET						; 0 = 08C7 = (ret) Turret
2702   09D8 E3 08       				.dw			HRET						; 1 = 08C7 = (ret) Turret
2703   09DA E3 08       				.dw			HRET						; 2 = 08C7 = (ret) Turret
2704   09DC E3 08       				.dw			HRET						; 3 = 08C7 = (ret) Turret
2705   09DE E3 08       				.dw			HRET						; 4 = 08C7 = (ret) Turret
2706   09E0 8F 05       				.dw			HFIRE						; 5 = 057B = Fire button
2707   09E2 E3 08       				.dw			HRET						; 6 = 08C7 = (ret) Time
2708   09E4 E3 08       				.dw			HRET						; 7 = 08C7 = (ret) Time
2709   09E6             
2710   09E6             				;; Jump table for $047F (0 entry not used)
2711   09E6             				;; Used for attract mode sequence
2712   09E6             TBLJMP:
2713   09E6 7A 0B       				.dw			JTBL1						; 1 = 0B7C = Arg to 2011
2714   09E8 70 0B       				.dw			JTBL2						; 2 = 0B72 = Arg to 2010
2715   09EA 68 08       				.dw			JTBL3						; 3 = 08A2 = End of game + reset
2716   09EC 20 0B       				.dw			JTBL4						; 4 = 0B22 = String
2717   09EE~            #IF OLDINT
2718   09EE~            				.dw			JTBL5						; 5 = 0AED = (Not used)
2719   09EE             #ELSE
2720   09EE 55 08       				.dw			JTBLB						; 5 = 086D = LSBs of $2003 to $2029 (?)
2721   09F0             #ENDIF
2722   09F0 84 0B       				.dw			JTBL6						; 6 = 0B86 = (de) -> $2000 
2723   09F2 F7 0A       				.dw			JTBL7						; 7 = 0AE1 = val -> addr
2724   09F4 B5 0A       				.dw			JTBL8						; 8 = 0A9F = Arg to loc
2725   09F6 D2 0A       				.dw			JTBL9						; 9 = 0ABC = Select String
2726   09F8 4D 0A       				.dw			JTBLA						; A = 0A53 = BCD @ location
2727   09FA~            #IF OLDINT
2728   09FA~            				.dw			JTBLB						; B = 086D = LSBs of $2003 to $2029 (?)
2729   09FA             #ENDIF
2730   09FA             
2731   09FA             				;; e&$07 -> c,  de = de >> 3 + $2400,
2732   09FA             				;; Get address for shifted data
2733   09FA             L0A00:
2734   09FA 7B          				ld			a,e							; Mask e
2735   09FB E6 07       				and			$07
2736   09FD 4F          				ld			c,a							; Stash in c
2737   09FE             
2738   09FE             				;; de>>3
2739   09FE 06 03       				ld			b,$03						; Loop counter
2740   0A00             L0A06:
2741   0A00 AF          				xor			a								; CLC
2742   0A01 7A          				ld			a,d							; LSB of d to carry
2743   0A02 1F          				rra
2744   0A03 57          				ld			d,a
2745   0A04 7B          				ld			a,e
2746   0A05 1F          				rra
2747   0A06 5F          				ld			e,a
2748   0A07 05          				dec			b
2749   0A08 C2 00 0A    				jp			nz,L0A06				; Loop
2750   0A0B             
2751   0A0B 7A          				ld			a,d
2752   0A0C C6 24       				add			a,$24
2753   0A0E 57          				ld			d,a
2754   0A0F C9          				ret
2755   0A10             
2756   0A10             
2757   0A10             				;; a = loop counter
2758   0A10             				;; Copy a bytes from (hl) to (bc)
2759   0A10             				;; OR   a bytes from (hl) to 
2760   0A10             L0A16:
2761   0A10 F5          				push		af							; Store count
2762   0A11 7E          				ld			a,(hl)					; Get value
2763   0A12 02          				ld			(bc),a					; Store value
2764   0A13 03          				inc			bc
2765   0A14 EB          				ex			de,hl
2766   0A15 B6          				or			(hl)
2767   0A16 23          				inc			hl
2768   0A17 12          				ld			(de),a
2769   0A18 F1          				pop			af							; Restore count
2770   0A19 E5          				push		hl
2771   0A1A 21 20 00    				ld			hl,RINC					; Row increment
2772   0A1D 19          				add			hl,de						; hl = de+$0020
2773   0A1E D1          				pop			de							; de = old hl
2774   0A1F 3D          				dec			a
2775   0A20 C2 10 0A    				jp			nz,L0A16				; loop
2776   0A23 C9          				ret
2777   0A24             
2778   0A24             
2779   0A24             				;; Draw b x c block from de to screen at hl
2780   0A24             L0A2A:
2781   0A24 C5          				push		bc
2782   0A25 E5          				push		hl
2783   0A26             L0A2C:
2784   0A26 1A          				ld			a,(de)
2785   0A27 13          				inc			de
2786   0A28 77          				ld			(hl),a
2787   0A29 23          				inc			hl
2788   0A2A 0D          				dec			c
2789   0A2B C2 26 0A    				jp			nz,L0A2C				; Loop for col
2790   0A2E             
2791   0A2E E1          				pop			hl
2792   0A2F 01 20 00    				ld			bc,RINC					; Row increment
2793   0A32 09          				add			hl,bc
2794   0A33 C1          				pop			bc
2795   0A34 05          				dec			b
2796   0A35 C2 24 0A    				jp			nz,L0A2A				; Loop for row
2797   0A38 C9          				ret
2798   0A39             
2799   0A39             
2800   0A39             				;; Clear (hl - hl+c-1)  b times with row offsets
2801   0A39             L0A3F:
2802   0A39 AF          				xor			a
2803   0A3A             L0A40:
2804   0A3A C5          				push		bc
2805   0A3B E5          				push		hl
2806   0A3C             L0A42:
2807   0A3C 77          				ld			(hl),a
2808   0A3D 23          				inc			hl
2809   0A3E 0D          				dec			c
2810   0A3F C2 3C 0A    				jp			nz,L0A42				; Loop for col
2811   0A42             
2812   0A42 E1          				pop			hl
2813   0A43 01 20 00    				ld			bc,RINC					; Row increment
2814   0A46 09          				add			hl,bc
2815   0A47 C1          				pop			bc
2816   0A48 05          				dec			b
2817   0A49 C2 3A 0A    				jp			nz,L0A40				; Loop for row
2818   0A4C             
2819   0A4C C9          				ret
2820   0A4D             
2821   0A4D             
2822   0A4D             				;; $09E8 Entry A
2823   0A4D             				;; Print high score / player score
2824   0A4D             JTBLA:													; $0A53
2825   0A4D EB          				ex			de,hl
2826   0A4E             
2827   0A4E~            #IF GETMAC
2828   0A4E~            				call		GETBC
2829   0A4E             #ELSE
2830   0A4E 4E          				ld			c,(hl)					; Read bc (address of score)
2831   0A4F 23          				inc			hl
2832   0A50 46          				ld			b,(hl)
2833   0A51 23          				inc			hl
2834   0A52             #ENDIF
2835   0A52             
2836   0A52~            #IF OLDINT
2837   0A52~            				ld			e,(hl)					; Read de
2838   0A52~            				inc			hl
2839   0A52~            				ld			d,(hl)
2840   0A52~            				dec			hl							; Back up to use de again
2841   0A52             #ELSE
2842   0A52 11 E8 21    				ld			de,TXTBUF				; This was a constant
2843   0A55 D5          				push		de							; Store TXTBUF
2844   0A56             #ENDIF
2845   0A56             
2846   0A56             #IF SC3DIG
2847   0A56 CD AC 0A    				call		BCD300					; 3 nybble BCD+00 to string
2848   0A59 CD F2 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2849   0A5C~            #ELSE
2850   0A5C~            				call		L0A82						; Draw BCD from bc at buffer at de
2851   0A5C~            				ex			de,hl						; Last address now in hl
2852   0A5C~            				call		L0A7A						; Replace space with zero
2853   0A5C~            				inc			hl
2854   0A5C~            				ex			de,hl						; Last address now in de
2855   0A5C~            				ld			a,$30
2856   0A5C~            				ld			(de),a					; Append zero
2857   0A5C~            				inc			de
2858   0A5C~            				ld			(de),a					; Append zero
2859   0A5C~            
2860   0A5C~            				;; #ENDIF
2861   0A5C~            				;; #IF OLDINT*(1-SC3DIG)
2862   0A5C~            #IF OLDINT
2863   0A5C~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
2864   0A5C~            				push		de
2865   0A5C~            #ENDIF
2866   0A5C~            
2867   0A5C~            				;; #IF (1-SC3DIG)
2868   0A5C~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
2869   0A5C             #ENDIF
2870   0A5C             
2871   0A5C 22 00 20    				ld			(PRGPTR),hl			; Next command 
2872   0A5F E1          				pop			hl
2873   0A60             #IF SC3DIG
2874   0A60 3E 05       				ld			a,$05						; Length for 5 digit
2875   0A62~            #ELSE
2876   0A62~            				ld			a,$04						; Length
2877   0A62             #ENDIF
2878   0A62 C3 2E 0B    				jp			L0B30						; Draw string hl @ de, length a
2879   0A65             
2880   0A65             
2881   0A65             #IF SC3DIG
2882   0A65             				;; 3 digit BCD from bc to de
2883   0A65             				;; #?? -> #00
2884   0A65             				;; 0#? -> _#0
2885   0A65             				;; 00# -> __#
2886   0A65             				;; 000 -> ___
2887   0A65             BCD3:
2888   0A65 03          				inc			bc							; To high byte
2889   0A66 0A          				ld			a,(bc)
2890   0A67 E6 0F       				and			$0F
2891   0A69 C2 7A 0A    				jp			nz,BCD3NZ
2892   0A6C             
2893   0A6C 3E 40       				ld			a,$40						; Space
2894   0A6E 12          				ld			(de),a					; Store
2895   0A6F 13          				inc			de
2896   0A70 0B          				dec			bc							; To Low byte
2897   0A71             
2898   0A71 0A          				ld			a,(bc)
2899   0A72 E6 F0       				and			$F0
2900   0A74 C2 8E 0A    				jp			nz,BCD2_0				; High byte non-zero
2901   0A77 C3 85 0A    				jp			BCD2__					; High byte zero
2902   0A7A             
2903   0A7A             BCD3NZ:
2904   0A7A C6 30       				add			a,$30						; To ASCII
2905   0A7C 12          				ld			(de),a					; Store digit
2906   0A7D 13          				inc			de
2907   0A7E 0B          				dec			bc							; To Low byte
2908   0A7F             				;; Continue with 2 leading zeros
2909   0A7F             
2910   0A7F             				;; 2 digit BCD with 2 leading zeros
2911   0A7F             BCD200:
2912   0A7F EB          				ex			de,hl
2913   0A80 36 30       				ld			(hl),$30				; 0
2914   0A82 C3 91 0A    				jp			BCD2_0X
2915   0A85             
2916   0A85             				;; 2 digit BCD with no leading zeros
2917   0A85             BCD2__:
2918   0A85 EB          				ex			de,hl
2919   0A86 36 40       				ld			(hl),$40				; Space
2920   0A88 23          				inc			hl
2921   0A89 36 40       				ld			(hl),$40				; Space
2922   0A8B C3 97 0A    				jp			BCD2
2923   0A8E             
2924   0A8E             				;; 2 digit BCD with 1 leading zero
2925   0A8E             BCD2_0:
2926   0A8E EB          				ex			de,hl
2927   0A8F 36 40       				ld			(hl),$40				; Space
2928   0A91             BCD2_0X:
2929   0A91 23          				inc			hl
2930   0A92 36 30       				ld			(hl),$30				; 0
2931   0A94 C3 97 0A    				jp			BCD2
2932   0A97             
2933   0A97             				;; Common routine
2934   0A97             BCD2:
2935   0A97 2B          				dec			hl
2936   0A98 EB          				ex			de,hl						; Undo swap
2937   0A99             
2938   0A99             				;; Do MSB
2939   0A99 0A          				ld			a,(bc)					; Get BCD
2940   0A9A 1F          				rra
2941   0A9B 1F          				rra
2942   0A9C 1F          				rra
2943   0A9D 1F          				rra
2944   0A9E CD A2 0A    				call		BCDDIG
2945   0AA1             
2946   0AA1             				;; Do LSB
2947   0AA1 0A          				ld			a,(bc)					; Get BCD
2948   0AA2             BCDDIG:
2949   0AA2 E6 0F       				and			$0F							; Mask high nybble
2950   0AA4 CA AA 0A    				jp			z,BCDDONE
2951   0AA7             
2952   0AA7 C6 30       				add			a,$30						; Decimal to ascii
2953   0AA9 12          				ld			(de),a					; Store digit
2954   0AAA             
2955   0AAA             BCDDONE:
2956   0AAA 13          				inc			de
2957   0AAB C9          				ret
2958   0AAC             
2959   0AAC             
2960   0AAC             				;; 3 nybble BCD with trailing zeros
2961   0AAC             BCD300:
2962   0AAC CD 65 0A    				call		BCD3
2963   0AAF             
2964   0AAF             				;; Append zeros
2965   0AAF             ADD00:
2966   0AAF 3E 30       				ld			a,$30
2967   0AB1 12          				ld			(de),a					; Append 0
2968   0AB2 13          				inc			de
2969   0AB3 12          				ld			(de),a					; Append 0
2970   0AB4 C9          				ret
2971   0AB5             
2972   0AB5~            #ELSE
2973   0AB5~            				;; Replace space with a zero
2974   0AB5~            L0A7A:
2975   0AB5~            				dec			hl
2976   0AB5~            				ld			a,(hl)
2977   0AB5~            				and			$40
2978   0AB5~            				ret			z
2979   0AB5~            				ld			(hl),$30
2980   0AB5~            				ret
2981   0AB5~            
2982   0AB5~            				;; BCD at (bc) to string at (de)
2983   0AB5~            L0A82:
2984   0AB5~            				ld			a,(bc)
2985   0AB5~            				rra
2986   0AB5~            				rra
2987   0AB5~            				rra
2988   0AB5~            				rra
2989   0AB5~            				and			$0F							; Mask high nybble
2990   0AB5~            				jp			nz,L0A8E
2991   0AB5~            				ld			a,$10						; $40 -> blank
2992   0AB5~            L0A8E:
2993   0AB5~            				add			a,$30						; Decimal to ascii
2994   0AB5~            				ld			(de),a					; Store digit
2995   0AB5~            				inc			de							; Inc buffer pointer
2996   0AB5~            				ld			a,(bc)
2997   0AB5~            				and			$0F							; Mask low nybble
2998   0AB5~            				jp			nz,L0A9A
2999   0AB5~            				ld			a,$10						; $40 -> blank
3000   0AB5~            L0A9A:
3001   0AB5~            				add			a,$30						; Decimal to ascii
3002   0AB5~            				ld			(de),a					; Store digit
3003   0AB5~            				inc			de							; Inc buffer pointer
3004   0AB5~            				ret
3005   0AB5             #ENDIF
3006   0AB5             
3007   0AB5             
3008   0AB5             				;; $09E8 Entry 8 -- Copy data from sequence to address (backwards)
3009   0AB5             JTBL8:													; $0A9F
3010   0AB5 EB          				ex			de,hl						; Sequence address back to hl
3011   0AB6 46          				ld			b,(hl)					; Get count
3012   0AB7 23          				inc			hl
3013   0AB8 05          				dec			b
3014   0AB9 05          				dec			b
3015   0ABA CD F2 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2  (address)
3016   0ABD 4E          				ld			c,(hl)					; Read first byte
3017   0ABE 23          				inc			hl
3018   0ABF 7E          				ld			a,(hl)					; Read second byte
3019   0AC0 23          				inc			hl
3020   0AC1 12          				ld			(de),a					; Write first byte
3021   0AC2 1B          				dec			de
3022   0AC3 79          				ld			a,c
3023   0AC4 12          				ld			(de),a					; Write second byte
3024   0AC5 1B          				dec			de
3025   0AC6             
3026   0AC6             L0AB0:
3027   0AC6 7E          				ld			a,(hl)					; Loop for rest of count
3028   0AC7 23          				inc			hl
3029   0AC8 12          				ld			(de),a
3030   0AC9 1B          				dec			de
3031   0ACA 05          				dec			b
3032   0ACB C2 C6 0A    				jp			nz,L0AB0
3033   0ACE 22 00 20    				ld			(PRGPTR),hl			; Next command
3034   0AD1 C9          				ret
3035   0AD2             
3036   0AD2             				;; $09E8 Entry 9 -- Draw INSERT COIN or PUSH BUTTON
3037   0AD2             JTBL9:													; $0ABC
3038   0AD2 EB          				ex			de,hl
3039   0AD3 CD F2 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
3040   0AD6 1A          				ld			a,(de)
3041   0AD7 CD F2 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
3042   0ADA D5          				push		de							; Screen loc to stack
3043   0ADB CD F2 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
3044   0ADE D5          				push		de							; 1st string pointer to stack
3045   0ADF CD F2 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
3046   0AE2 22 00 20    				ld			(PRGPTR),hl			; Next command
3047   0AE5             
3048   0AE5 EB          				ex			de,hl
3049   0AE6 A7          				and			a
3050   0AE7 CA EB 0A    				jp			z,L0AD5					; Draw first string?
3051   0AEA E3          				ex			(sp),hl					; Swap 2nd pointer w/ 1st
3052   0AEB             
3053   0AEB             L0AD5:
3054   0AEB E1          				pop			hl							; String pointer
3055   0AEC D1          				pop			de							; Screen location
3056   0AED 3E 0B       				ld			a,$0B						; Length
3057   0AEF C3 2E 0B    				jp			L0B30						; Draw string hl @ de, length a
3058   0AF2             
3059   0AF2             				;; (hl, hl+1) -> de, hl+=2
3060   0AF2             GETDE:
3061   0AF2             L0ADC:
3062   0AF2 5E          				ld			e,(hl)					; LSB from table
3063   0AF3 23          				inc			hl
3064   0AF4 56          				ld			d,(hl)					; MSB from table
3065   0AF5 23          				inc			hl
3066   0AF6 C9          				ret
3067   0AF7             
3068   0AF7             				;; $9EA8 Entry 7 -- arg -> addr
3069   0AF7             JTBL7:													; $0AE1
3070   0AF7 1A          				ld			a,(de)					; Next entry
3071   0AF8 13          				inc			de
3072   0AF9 EB          				ex			de,hl
3073   0AFA             
3074   0AFA~            #IF GETMAC
3075   0AFA~            				call		GETBC
3076   0AFA             #ELSE
3077   0AFA 4E          				ld			c,(hl)					; Next entry
3078   0AFB 23          				inc			hl
3079   0AFC 46          				ld			b,(hl)					; Next entry
3080   0AFD 23          				inc			hl
3081   0AFE             #ENDIF
3082   0AFE             
3083   0AFE 22 00 20    				ld			(PRGPTR),hl			; Store command
3084   0B01 02          				ld			(bc),a					; a -> (bc)
3085   0B02 C9          				ret
3086   0B03             
3087   0B03             
3088   0B03~            #IF OLDINT
3089   0B03~            				;; $09E8 Entry 5
3090   0B03~            				;; This is apparently never called
3091   0B03~            				;; Read from de table into b, c, a, e, d
3092   0B03~            JTBL5:													; $0AED
3093   0B03~            				ex			de,hl
3094   0B03~            				ld			b,(hl)					; get b,c,a from (hl) [was (de)]
3095   0B03~            				inc			hl
3096   0B03~            				ld			c,(hl)
3097   0B03~            				inc			hl
3098   0B03~            				ld			a,(hl)
3099   0B03~            				inc			hl
3100   0B03~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
3101   0B03~            				ld			(PRGPTR),hl			; Store command
3102   0B03~            
3103   0B03~            				ex			de,hl
3104   0B03~            				ld			(hl),$DB				; ?? constant?
3105   0B03~            				inc			hl
3106   0B03~            				ld			(hl),c
3107   0B03~            				inc			hl
3108   0B03~            				ld			(hl),$C9				; ?? constant?
3109   0B03~            				dec			hl
3110   0B03~            				dec			hl
3111   0B03~            				jp			(hl)						; Jump
3112   0B03             #ENDIF
3113   0B03             
3114   0B03             				;; Deal with inputs (when stable)
3115   0B03             L0B05:
3116   0B03 AE          				xor			(hl)						; XOR with stored value
3117   0B04 C8          				ret			z								; No changes
3118   0B05             
3119   0B05 4F          				ld			c,a							; Stash changed bits
3120   0B06 06 01       				ld			b,$01						; Bit being checked
3121   0B08             
3122   0B08             L0B0A:
3123   0B08 79          				ld			a,c							; Restore changed bits
3124   0B09 0F          				rrca
3125   0B0A DA 16 0B    				jp			c,L0B18					; Bit is high
3126   0B0D             
3127   0B0D 4F          				ld			c,a							; Stash changed bits
3128   0B0E 78          				ld			a,b							; Shift check bit
3129   0B0F 07          				rlca
3130   0B10 47          				ld			b,a
3131   0B11 13          				inc			de							; Advance jump table
3132   0B12 13          				inc			de
3133   0B13 C3 08 0B    				jp			L0B0A						; Loop
3134   0B16             
3135   0B16             L0B18:
3136   0B16 78          				ld			a,b							; Bit found to a
3137   0B17 AE          				xor			(hl)						; Clear bit
3138   0B18 77          				ld			(hl),a					; Store back
3139   0B19 A0          				and			b								; Value of changed bit
3140   0B1A             
3141   0B1A             				;; Get jump address from table
3142   0B1A EB          				ex			de,hl
3143   0B1B 4E          				ld			c,(hl)
3144   0B1C 23          				inc			hl
3145   0B1D 66          				ld			h,(hl)
3146   0B1E 69          				ld			l,c
3147   0B1F E9          				jp			(hl)						; Jump to handler
3148   0B20             
3149   0B20             				;; $09E8 Entry 4 (Draw string)
3150   0B20             JTBL4:													; $0E22
3151   0B20 EB          				ex			de,hl						; 
3152   0B21 7E          				ld			a,(hl)					; Length
3153   0B22 23          				inc			hl
3154   0B23 CD F2 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
3155   0B26 D5          				push		de
3156   0B27 CD F2 0A    				call		GETDE						; (hl, hl,1) -> de, hl+=2
3157   0B2A 22 00 20    				ld			(PRGPTR),hl			; Next command
3158   0B2D E1          				pop			hl							; String src address
3159   0B2E             
3160   0B2E             				;; Write string length a from hl to de
3161   0B2E             L0B30:
3162   0B2E F5          				push		af
3163   0B2F             L0B31:
3164   0B2F 7E          				ld			a,(hl)					; Get byte
3165   0B30 23          				inc			hl
3166   0B31 D6 30       				sub			$30							; Ascii -> tbl
3167   0B33 F2 47 0B    				jp			p,L0B49					; Jump if >=$30
3168   0B36             
3169   0B36             				;; Blank space = $30-a (?)
3170   0B36 47          				ld			b,a
3171   0B37             L0B39:
3172   0B37 1C          				inc			e
3173   0B38 7B          				ld			a,e
3174   0B39 E6 1F       				and			$1F
3175   0B3B C2 40 0B    				jp			nz,L0B42				; No wrap
3176   0B3E 14          				inc			d
3177   0B3F 14          				inc			d
3178   0B40             L0B42:
3179   0B40 04          				inc			b
3180   0B41 C2 37 0B    				jp			nz,L0B39				; Loop for space
3181   0B44             
3182   0B44 C3 2F 0B    				jp			L0B31						; Loop for chars
3183   0B47             
3184   0B47             				;; ASCII
3185   0B47             L0B49:
3186   0B47 E5          				push		hl
3187   0B48 D5          				push		de
3188   0B49             				;; hl = CHARS + a * $0A
3189   0B49 21 8D 0B    				ld			hl,CHARS				; Start of char table
3190   0B4C CA 57 0B    				jp			z,L0B59					; (no need to add)
3191   0B4F 01 0A 00    				ld			bc,$000A				; Add a*$0a
3192   0B52             L0B54:
3193   0B52 09          				add			hl,bc
3194   0B53 3D          				dec			a
3195   0B54 C2 52 0B    				jp			nz,L0B54
3196   0B57             
3197   0B57             L0B59:
3198   0B57 EB          				ex			de,hl
3199   0B58 01 20 00    				ld			bc,RINC					; Row increment
3200   0B5B 3E 0A       				ld			a,$0A						; Loop $a times
3201   0B5D             
3202   0B5D             L0B5F:
3203   0B5D F5          				push		af
3204   0B5E 1A          				ld			a,(de)					; Load byte
3205   0B5F 13          				inc			de							; Inc index
3206   0B60 77          				ld			(hl),a					; Store to screen
3207   0B61 09          				add			hl,bc						; Next row
3208   0B62 F1          				pop			af
3209   0B63 3D          				dec			a
3210   0B64 C2 5D 0B    				jp			nz,L0B5F				; Loop for this char
3211   0B67             
3212   0B67 D1          				pop			de
3213   0B68 E1          				pop			hl
3214   0B69 13          				inc			de							; Next screen loc
3215   0B6A F1          				pop			af
3216   0B6B 3D          				dec			a
3217   0B6C C2 2E 0B    				jp			nz,L0B30				; Next char
3218   0B6F             
3219   0B6F C9          				ret
3220   0B70             
3221   0B70             				;; $09E8 Entry 2  (set TIMER1)
3222   0B70             JTBL2:													; $0B72
3223   0B70 EB          				ex			de,hl
3224   0B71 7E          				ld			a,(hl)					; Argument
3225   0B72 23          				inc			hl
3226   0B73 22 00 20    				ld			(PRGPTR),hl			; Next command
3227   0B76 32 10 20    				ld			(TIMER1),a			; Store arg
3228   0B79 C9          				ret
3229   0B7A             
3230   0B7A             				;; $09E8 Entry 1 (set TIMER2)
3231   0B7A             JTBL1:													; $0B7C
3232   0B7A EB          				ex			de,hl
3233   0B7B 7E          				ld			a,(hl)					; Argument
3234   0B7C 23          				inc			hl
3235   0B7D 22 00 20    				ld			(PRGPTR),hl			; Next command
3236   0B80 32 11 20    				ld			(TIMER2),a			; Store arg
3237   0B83 C9          				ret
3238   0B84             
3239   0B84             				;; $09E8 Entry 6 (de) -> $2000
3240   0B84             JTBL6:													; $0B86
3241   0B84 EB          				ex			de,hl
3242   0B85 5E          				ld			e,(hl)
3243   0B86 23          				inc			hl
3244   0B87 56          				ld			d,(hl)
3245   0B88 EB          				ex			de,hl
3246   0B89 22 00 20    				ld			(PRGPTR),hl			; Store command
3247   0B8C C9          				ret
3248   0B8D             
3249   0B8D             				;; Character table
3250   0B8D             CHARS:													; $0B8F
3251   0B8D             #INCLUDE "swfont.asm"
0001+  0B8D             	;;	.org	$0b8f 
0002+  0B8D             
0003+  0B8D             CHARTBL:
0004+  0B8D 3C          	.db	$3c		; ....########.... $30
0005+  0B8E 7E          	.db	$7e		; ..############.. 
0006+  0B8F 66          	.db	$66		; ..####....####.. 
0007+  0B90 66          	.db	$66		; ..####....####.. 
0008+  0B91 66          	.db	$66		; ..####....####.. 
0009+  0B92 66          	.db	$66		; ..####....####.. 
0010+  0B93 66          	.db	$66		; ..####....####.. 
0011+  0B94 66          	.db	$66		; ..####....####.. 
0012+  0B95 7E          	.db	$7e		; ..############.. 
0013+  0B96 3C          	.db	$3c		; ....########.... 
0014+  0B97             
0015+  0B97 18          	.db	$18		; ......####...... $31
0016+  0B98 1C          	.db	$1c		; ....######...... 
0017+  0B99 18          	.db	$18		; ......####...... 
0018+  0B9A 18          	.db	$18		; ......####...... 
0019+  0B9B 18          	.db	$18		; ......####...... 
0020+  0B9C 18          	.db	$18		; ......####...... 
0021+  0B9D 18          	.db	$18		; ......####...... 
0022+  0B9E 18          	.db	$18		; ......####...... 
0023+  0B9F 3C          	.db	$3c		; ....########.... 
0024+  0BA0 3C          	.db	$3c		; ....########.... 
0025+  0BA1             
0026+  0BA1 3C          	.db	$3c		; ....########.... $32
0027+  0BA2 7E          	.db	$7e		; ..############.. 
0028+  0BA3 66          	.db	$66		; ..####....####.. 
0029+  0BA4 60          	.db	$60		; ..........####.. 
0030+  0BA5 7C          	.db	$7c		; ....##########.. 
0031+  0BA6 3E          	.db	$3e		; ..##########.... 
0032+  0BA7 06          	.db	$06		; ..####.......... 
0033+  0BA8 06          	.db	$06		; ..####.......... 
0034+  0BA9 7E          	.db	$7e		; ..############.. 
0035+  0BAA 7E          	.db	$7e		; ..############.. 
0036+  0BAB             
0037+  0BAB 3C          	.db	$3c		; ....########.... $33
0038+  0BAC 7E          	.db	$7e		; ..############.. 
0039+  0BAD 66          	.db	$66		; ..####....####.. 
0040+  0BAE 60          	.db	$60		; ..........####.. 
0041+  0BAF 38          	.db	$38		; ......######.... 
0042+  0BB0 78          	.db	$78		; ......########.. 
0043+  0BB1 60          	.db	$60		; ..........####.. 
0044+  0BB2 66          	.db	$66		; ..####....####.. 
0045+  0BB3 7E          	.db	$7e		; ..############.. 
0046+  0BB4 3C          	.db	$3c		; ....########.... 
0047+  0BB5             
0048+  0BB5 66          	.db	$66		; ..####....####.. $34
0049+  0BB6 66          	.db	$66		; ..####....####.. 
0050+  0BB7 66          	.db	$66		; ..####....####.. 
0051+  0BB8 66          	.db	$66		; ..####....####.. 
0052+  0BB9 7E          	.db	$7e		; ..############.. 
0053+  0BBA 7E          	.db	$7e		; ..############.. 
0054+  0BBB 60          	.db	$60		; ..........####.. 
0055+  0BBC 60          	.db	$60		; ..........####.. 
0056+  0BBD 60          	.db	$60		; ..........####.. 
0057+  0BBE 60          	.db	$60		; ..........####.. 
0058+  0BBF             
0059+  0BBF 3E          	.db	$3e		; ..##########.... $35
0060+  0BC0 3E          	.db	$3e		; ..##########.... 
0061+  0BC1 06          	.db	$06		; ..####.......... 
0062+  0BC2 06          	.db	$06		; ..####.......... 
0063+  0BC3 3E          	.db	$3e		; ..##########.... 
0064+  0BC4 7E          	.db	$7e		; ..############.. 
0065+  0BC5 60          	.db	$60		; ..........####.. 
0066+  0BC6 66          	.db	$66		; ..####....####.. 
0067+  0BC7 7E          	.db	$7e		; ..############.. 
0068+  0BC8 3C          	.db	$3c		; ....########.... 
0069+  0BC9             
0070+  0BC9 3C          	.db	$3c		; ....########.... $36
0071+  0BCA 3E          	.db	$3e		; ..##########.... 
0072+  0BCB 06          	.db	$06		; ..####.......... 
0073+  0BCC 06          	.db	$06		; ..####.......... 
0074+  0BCD 3E          	.db	$3e		; ..##########.... 
0075+  0BCE 7E          	.db	$7e		; ..############.. 
0076+  0BCF 66          	.db	$66		; ..####....####.. 
0077+  0BD0 66          	.db	$66		; ..####....####.. 
0078+  0BD1 7E          	.db	$7e		; ..############.. 
0079+  0BD2 3C          	.db	$3c		; ....########.... 
0080+  0BD3             
0081+  0BD3 7E          	.db	$7e		; ..############.. $37
0082+  0BD4 7E          	.db	$7e		; ..############.. 
0083+  0BD5 60          	.db	$60		; ..........####.. 
0084+  0BD6 70          	.db	$70		; ........######.. 
0085+  0BD7 30          	.db	$30		; ........####.... 
0086+  0BD8 38          	.db	$38		; ......######.... 
0087+  0BD9 18          	.db	$18		; ......####...... 
0088+  0BDA 1C          	.db	$1c		; ....######...... 
0089+  0BDB 0C          	.db	$0c		; ....####........ 
0090+  0BDC 0C          	.db	$0c		; ....####........ 
0091+  0BDD             
0092+  0BDD 3C          	.db	$3c		; ....########.... $38
0093+  0BDE 7E          	.db	$7e		; ..############.. 
0094+  0BDF 66          	.db	$66		; ..####....####.. 
0095+  0BE0 66          	.db	$66		; ..####....####.. 
0096+  0BE1 3C          	.db	$3c		; ....########.... 
0097+  0BE2 7E          	.db	$7e		; ..############.. 
0098+  0BE3 66          	.db	$66		; ..####....####.. 
0099+  0BE4 66          	.db	$66		; ..####....####.. 
0100+  0BE5 7E          	.db	$7e		; ..############.. 
0101+  0BE6 3C          	.db	$3c		; ....########.... 
0102+  0BE7             
0103+  0BE7 3C          	.db	$3c		; ....########.... $39
0104+  0BE8 7E          	.db	$7e		; ..############.. 
0105+  0BE9 66          	.db	$66		; ..####....####.. 
0106+  0BEA 66          	.db	$66		; ..####....####.. 
0107+  0BEB 7E          	.db	$7e		; ..############.. 
0108+  0BEC 7C          	.db	$7c		; ....##########.. 
0109+  0BED 60          	.db	$60		; ..........####.. 
0110+  0BEE 60          	.db	$60		; ..........####.. 
0111+  0BEF 7C          	.db	$7c		; ....##########.. 
0112+  0BF0 3C          	.db	$3c		; ....########.... 
0113+  0BF1             
0114+  0BF1             WATER0: 
0115+  0BF1 0C          	.db	$0c		; ....####........ $3A
0116+  0BF2 93          	.db	$93		; ####....##....## 
0117+  0BF3 60          	.db	$60		; ..........####.. 
0118+  0BF4 00          	.db	$00		; ................ 
0119+  0BF5 00          	.db	$00		; ................ 
0120+  0BF6 00          	.db	$00		; ................ 
0121+  0BF7 00          	.db	$00		; ................ 
0122+  0BF8 00          	.db	$00		; ................ 
0123+  0BF9 00          	.db	$00		; ................ 
0124+  0BFA 00          	.db	$00		; ................ 
0125+  0BFB             
0126+  0BFB 60          	.db	$60		; ..........####.. $3B
0127+  0BFC 99          	.db	$99		; ##....####....## 
0128+  0BFD 06          	.db	$06		; ..####.......... 
0129+  0BFE 00          	.db	$00		; ................ 
0130+  0BFF 00          	.db	$00		; ................ 
0131+  0C00 00          	.db	$00		; ................ 
0132+  0C01 00          	.db	$00		; ................ 
0133+  0C02 00          	.db	$00		; ................ 
0134+  0C03 00          	.db	$00		; ................ 
0135+  0C04 00          	.db	$00		; ................ 
0136+  0C05             
0137+  0C05 30          	.db	$30		; ........####.... $3C
0138+  0C06 CD          	.db	$cd		; ##..####....#### 
0139+  0C07 02          	.db	$02		; ..##............ 
0140+  0C08 00          	.db	$00		; ................ 
0141+  0C09 00          	.db	$00		; ................ 
0142+  0C0A 00          	.db	$00		; ................ 
0143+  0C0B 00          	.db	$00		; ................ 
0144+  0C0C 00          	.db	$00		; ................ 
0145+  0C0D 00          	.db	$00		; ................ 
0146+  0C0E 00          	.db	$00		; ................ 
0147+  0C0F             
0148+  0C0F 02          	.db	$02		; ..##............ $3D
0149+  0C10 C0          	.db	$c0		; ............#### 
0150+  0C11 78          	.db	$78		; ......########.. 
0151+  0C12 E0          	.db	$e0		; ..........###### 
0152+  0C13 80          	.db	$80		; ..............## 
0153+  0C14 F0          	.db	$f0		; ........######## 
0154+  0C15 01          	.db	$01		; ##.............. 
0155+  0C16 C0          	.db	$c0		; ............#### 
0156+  0C17 F0          	.db	$f0		; ........######## 
0157+  0C18 7C          	.db	$7c		; ....##########.. 
0158+  0C19             
0159+  0C19 08          	.db	$08		; ......##........ $3E
0160+  0C1A 1C          	.db	$1c		; ....######...... 
0161+  0C1B 3E          	.db	$3e		; ..##########.... 
0162+  0C1C 7F          	.db	$7f		; ##############.. 
0163+  0C1D FF          	.db	$ff		; ################ 
0164+  0C1E FF          	.db	$ff		; ################ 
0165+  0C1F BF          	.db	$bf		; ############..## 
0166+  0C20 1F          	.db	$1f		; ##########...... 
0167+  0C21 02          	.db	$02		; ..##............ 
0168+  0C22 40          	.db	$40		; ............##.. 
0169+  0C23             
0170+  0C23 02          	.db	$02		; ..##............ $3F
0171+  0C24 80          	.db	$80		; ..............## 
0172+  0C25 78          	.db	$78		; ......########.. 
0173+  0C26 1E          	.db	$1e		; ..########...... 
0174+  0C27 07          	.db	$07		; ######.......... 
0175+  0C28 01          	.db	$01		; ##.............. 
0176+  0C29 7C          	.db	$7c		; ....##########.. 
0177+  0C2A F8          	.db	$f8		; ......########## 
0178+  0C2B 0C          	.db	$0c		; ....####........ 
0179+  0C2C 10          	.db	$10		; ........##...... 
0180+  0C2D             
0181+  0C2D 00          	.db	$00		; ................ $40
0182+  0C2E 00          	.db	$00		; ..######..###### 
0183+  0C2F 00          	.db	$00		; ....####..##..## 
0184+  0C30 00          	.db	$00		; ..##......##..## 
0185+  0C31 00          	.db	$00		; ..######..###### 
0186+  0C32 00          	.db	$00		; ................ 
0187+  0C33 00          	.db	$00		; ..######..##..## 
0188+  0C34 00          	.db	$00		; ....####..###### 
0189+  0C35 00          	.db	$00		; ..##..........## 
0190+  0C36 00          	.db	$00		; ..######......## 
0191+  0C37             
0192+  0C37 18          	.db	$18		; ......####...... $41
0193+  0C38 3C          	.db	$3c		; ....########.... 
0194+  0C39 7E          	.db	$7e		; ..############.. 
0195+  0C3A 66          	.db	$66		; ..####....####.. 
0196+  0C3B 66          	.db	$66		; ..####....####.. 
0197+  0C3C 66          	.db	$66		; ..####....####.. 
0198+  0C3D 7E          	.db	$7e		; ..############.. 
0199+  0C3E 7E          	.db	$7e		; ..############.. 
0200+  0C3F 66          	.db	$66		; ..####....####.. 
0201+  0C40 66          	.db	$66		; ..####....####.. 
0202+  0C41             
0203+  0C41 3E          	.db	$3e		; ..##########.... $42
0204+  0C42 7E          	.db	$7e		; ..############.. 
0205+  0C43 66          	.db	$66		; ..####....####.. 
0206+  0C44 66          	.db	$66		; ..####....####.. 
0207+  0C45 3E          	.db	$3e		; ..##########.... 
0208+  0C46 7E          	.db	$7e		; ..############.. 
0209+  0C47 66          	.db	$66		; ..####....####.. 
0210+  0C48 66          	.db	$66		; ..####....####.. 
0211+  0C49 7E          	.db	$7e		; ..############.. 
0212+  0C4A 3E          	.db	$3e		; ..##########.... 
0213+  0C4B             
0214+  0C4B 3C          	.db	$3c		; ....########.... $43
0215+  0C4C 7E          	.db	$7e		; ..############.. 
0216+  0C4D 66          	.db	$66		; ..####....####.. 
0217+  0C4E 06          	.db	$06		; ..####.......... 
0218+  0C4F 06          	.db	$06		; ..####.......... 
0219+  0C50 06          	.db	$06		; ..####.......... 
0220+  0C51 06          	.db	$06		; ..####.......... 
0221+  0C52 66          	.db	$66		; ..####....####.. 
0222+  0C53 7E          	.db	$7e		; ..############.. 
0223+  0C54 3C          	.db	$3c		; ....########.... 
0224+  0C55             
0225+  0C55 3E          	.db	$3e		; ..##########.... $44
0226+  0C56 7E          	.db	$7e		; ..############.. 
0227+  0C57 66          	.db	$66		; ..####....####.. 
0228+  0C58 66          	.db	$66		; ..####....####.. 
0229+  0C59 66          	.db	$66		; ..####....####.. 
0230+  0C5A 66          	.db	$66		; ..####....####.. 
0231+  0C5B 66          	.db	$66		; ..####....####.. 
0232+  0C5C 66          	.db	$66		; ..####....####.. 
0233+  0C5D 7E          	.db	$7e		; ..############.. 
0234+  0C5E 3E          	.db	$3e		; ..##########.... 
0235+  0C5F             
0236+  0C5F 7E          	.db	$7e		; ..############.. $45
0237+  0C60 7E          	.db	$7e		; ..############.. 
0238+  0C61 06          	.db	$06		; ..####.......... 
0239+  0C62 06          	.db	$06		; ..####.......... 
0240+  0C63 3E          	.db	$3e		; ..##########.... 
0241+  0C64 3E          	.db	$3e		; ..##########.... 
0242+  0C65 06          	.db	$06		; ..####.......... 
0243+  0C66 06          	.db	$06		; ..####.......... 
0244+  0C67 7E          	.db	$7e		; ..############.. 
0245+  0C68 7E          	.db	$7e		; ..############.. 
0246+  0C69             
0247+  0C69 7E          	.db	$7e		; ..############.. $46
0248+  0C6A 7E          	.db	$7e		; ..############.. 
0249+  0C6B 06          	.db	$06		; ..####.......... 
0250+  0C6C 06          	.db	$06		; ..####.......... 
0251+  0C6D 3E          	.db	$3e		; ..##########.... 
0252+  0C6E 3E          	.db	$3e		; ..##########.... 
0253+  0C6F 06          	.db	$06		; ..####.......... 
0254+  0C70 06          	.db	$06		; ..####.......... 
0255+  0C71 06          	.db	$06		; ..####.......... 
0256+  0C72 06          	.db	$06		; ..####.......... 
0257+  0C73             
0258+  0C73 3C          	.db	$3c		; ....########.... $47
0259+  0C74 7E          	.db	$7e		; ..############.. 
0260+  0C75 66          	.db	$66		; ..####....####.. 
0261+  0C76 06          	.db	$06		; ..####.......... 
0262+  0C77 06          	.db	$06		; ..####.......... 
0263+  0C78 76          	.db	$76		; ..####..######.. 
0264+  0C79 76          	.db	$76		; ..####..######.. 
0265+  0C7A 66          	.db	$66		; ..####....####.. 
0266+  0C7B 7E          	.db	$7e		; ..############.. 
0267+  0C7C 3C          	.db	$3c		; ....########.... 
0268+  0C7D             
0269+  0C7D 66          	.db	$66		; ..####....####.. $48
0270+  0C7E 66          	.db	$66		; ..####....####.. 
0271+  0C7F 66          	.db	$66		; ..####....####.. 
0272+  0C80 66          	.db	$66		; ..####....####.. 
0273+  0C81 7E          	.db	$7e		; ..############.. 
0274+  0C82 7E          	.db	$7e		; ..############.. 
0275+  0C83 66          	.db	$66		; ..####....####.. 
0276+  0C84 66          	.db	$66		; ..####....####.. 
0277+  0C85 66          	.db	$66		; ..####....####.. 
0278+  0C86 66          	.db	$66		; ..####....####.. 
0279+  0C87             
0280+  0C87 3C          	.db	$3c		; ....########.... $49
0281+  0C88 3C          	.db	$3c		; ....########.... 
0282+  0C89 18          	.db	$18		; ......####...... 
0283+  0C8A 18          	.db	$18		; ......####...... 
0284+  0C8B 18          	.db	$18		; ......####...... 
0285+  0C8C 18          	.db	$18		; ......####...... 
0286+  0C8D 18          	.db	$18		; ......####...... 
0287+  0C8E 18          	.db	$18		; ......####...... 
0288+  0C8F 3C          	.db	$3c		; ....########.... 
0289+  0C90 3C          	.db	$3c		; ....########.... 
0290+  0C91             
0291+  0C91 60          	.db	$60		; ..........####.. $4A
0292+  0C92 60          	.db	$60		; ..........####.. 
0293+  0C93 60          	.db	$60		; ..........####.. 
0294+  0C94 60          	.db	$60		; ..........####.. 
0295+  0C95 60          	.db	$60		; ..........####.. 
0296+  0C96 60          	.db	$60		; ..........####.. 
0297+  0C97 60          	.db	$60		; ..........####.. 
0298+  0C98 66          	.db	$66		; ..####....####.. 
0299+  0C99 7E          	.db	$7e		; ..############.. 
0300+  0C9A 3C          	.db	$3c		; ....########.... 
0301+  0C9B             
0302+  0C9B 66          	.db	$66		; ..####....####.. $4B
0303+  0C9C 66          	.db	$66		; ..####....####.. 
0304+  0C9D 76          	.db	$76		; ..####..######.. 
0305+  0C9E 3E          	.db	$3e		; ..##########.... 
0306+  0C9F 1E          	.db	$1e		; ..########...... 
0307+  0CA0 1E          	.db	$1e		; ..########...... 
0308+  0CA1 3E          	.db	$3e		; ..##########.... 
0309+  0CA2 76          	.db	$76		; ..####..######.. 
0310+  0CA3 66          	.db	$66		; ..####....####.. 
0311+  0CA4 66          	.db	$66		; ..####....####.. 
0312+  0CA5             
0313+  0CA5 06          	.db	$06		; ..####.......... $4C
0314+  0CA6 06          	.db	$06		; ..####.......... 
0315+  0CA7 06          	.db	$06		; ..####.......... 
0316+  0CA8 06          	.db	$06		; ..####.......... 
0317+  0CA9 06          	.db	$06		; ..####.......... 
0318+  0CAA 06          	.db	$06		; ..####.......... 
0319+  0CAB 06          	.db	$06		; ..####.......... 
0320+  0CAC 06          	.db	$06		; ..####.......... 
0321+  0CAD 7E          	.db	$7e		; ..############.. 
0322+  0CAE 7E          	.db	$7e		; ..############.. 
0323+  0CAF             
0324+  0CAF C3          	.db	$c3		; ####........#### $4D
0325+  0CB0 C3          	.db	$c3		; ####........#### 
0326+  0CB1 E7          	.db	$e7		; ######....###### 
0327+  0CB2 E7          	.db	$e7		; ######....###### 
0328+  0CB3 FF          	.db	$ff		; ################ 
0329+  0CB4 FF          	.db	$ff		; ################ 
0330+  0CB5 DB          	.db	$db		; ####..####..#### 
0331+  0CB6 C3          	.db	$c3		; ####........#### 
0332+  0CB7 C3          	.db	$c3		; ####........#### 
0333+  0CB8 C3          	.db	$c3		; ####........#### 
0334+  0CB9             
0335+  0CB9 66          	.db	$66		; ..####....####.. $4E
0336+  0CBA 66          	.db	$66		; ..####....####.. 
0337+  0CBB 6E          	.db	$6e		; ..######..####.. 
0338+  0CBC 6E          	.db	$6e		; ..######..####.. 
0339+  0CBD 7E          	.db	$7e		; ..############.. 
0340+  0CBE 7E          	.db	$7e		; ..############.. 
0341+  0CBF 76          	.db	$76		; ..####..######.. 
0342+  0CC0 76          	.db	$76		; ..####..######.. 
0343+  0CC1 66          	.db	$66		; ..####....####.. 
0344+  0CC2 66          	.db	$66		; ..####....####.. 
0345+  0CC3             
0346+  0CC3 3C          	.db	$3c		; ....########.... $4F
0347+  0CC4 7E          	.db	$7e		; ..############.. 
0348+  0CC5 66          	.db	$66		; ..####....####.. 
0349+  0CC6 66          	.db	$66		; ..####....####.. 
0350+  0CC7 66          	.db	$66		; ..####....####.. 
0351+  0CC8 66          	.db	$66		; ..####....####.. 
0352+  0CC9 66          	.db	$66		; ..####....####.. 
0353+  0CCA 66          	.db	$66		; ..####....####.. 
0354+  0CCB 7E          	.db	$7e		; ..############.. 
0355+  0CCC 3C          	.db	$3c		; ....########.... 
0356+  0CCD             
0357+  0CCD 3E          	.db	$3e		; ..##########.... $50
0358+  0CCE 7E          	.db	$7e		; ..############.. 
0359+  0CCF 66          	.db	$66		; ..####....####.. 
0360+  0CD0 66          	.db	$66		; ..####....####.. 
0361+  0CD1 7E          	.db	$7e		; ..############.. 
0362+  0CD2 3E          	.db	$3e		; ..##########.... 
0363+  0CD3 06          	.db	$06		; ..####.......... 
0364+  0CD4 06          	.db	$06		; ..####.......... 
0365+  0CD5 06          	.db	$06		; ..####.......... 
0366+  0CD6 06          	.db	$06		; ..####.......... 
0367+  0CD7             
0368+  0CD7             #IF SW2024
0369+  0CD7 00          	.db	$00		; ................ $51
0370+  0CD8 00          	.db	$00		; ................ 
0371+  0CD9 01          	.db	$01		; ##.............. 
0372+  0CDA 01          	.db	$01		; ##.............. 
0373+  0CDB 84          	.db	$84		; ....##........## 
0374+  0CDC CA          	.db	$ca		; ..##..##....#### 
0375+  0CDD A8          	.db	$a8		; ......##..##..## 
0376+  0CDE E4          	.db	$e4		; ....##....###### 
0377+  0CDF 82          	.db	$82		; ..##..........## 
0378+  0CE0 8E          	.db	$8e		; ..######......##
0379+  0CE1~            #ELSE
0380+  0CE1~            	.db	$3c		; ....########.... $51
0381+  0CE1~            	.db	$7e		; ..############.. 
0382+  0CE1~            	.db	$66		; ..####....####.. 
0383+  0CE1~            	.db	$66		; ..####....####.. 
0384+  0CE1~            	.db	$66		; ..####....####.. 
0385+  0CE1~            	.db	$66		; ..####....####.. 
0386+  0CE1~            	.db	$66		; ..####....####.. 
0387+  0CE1~            	.db	$66		; ..####....####.. 
0388+  0CE1~            	.db	$7e		; ..############.. 
0389+  0CE1~            	.db	$5c		; ....######..##.. 
0390+  0CE1             #ENDIF
0391+  0CE1             
0392+  0CE1 3E          	.db	$3e		; ..##########.... $52
0393+  0CE2 7E          	.db	$7e		; ..############.. 
0394+  0CE3 66          	.db	$66		; ..####....####.. 
0395+  0CE4 66          	.db	$66		; ..####....####.. 
0396+  0CE5 7E          	.db	$7e		; ..############.. 
0397+  0CE6 3E          	.db	$3e		; ..##########.... 
0398+  0CE7 76          	.db	$76		; ..####..######.. 
0399+  0CE8 66          	.db	$66		; ..####....####.. 
0400+  0CE9 66          	.db	$66		; ..####....####.. 
0401+  0CEA 66          	.db	$66		; ..####....####.. 
0402+  0CEB             
0403+  0CEB 3C          	.db	$3c		; ....########.... $53
0404+  0CEC 7E          	.db	$7e		; ..############.. 
0405+  0CED 66          	.db	$66		; ..####....####.. 
0406+  0CEE 06          	.db	$06		; ..####.......... 
0407+  0CEF 3E          	.db	$3e		; ..##########.... 
0408+  0CF0 7C          	.db	$7c		; ....##########.. 
0409+  0CF1 60          	.db	$60		; ..........####.. 
0410+  0CF2 66          	.db	$66		; ..####....####.. 
0411+  0CF3 7E          	.db	$7e		; ..############.. 
0412+  0CF4 3C          	.db	$3c		; ....########.... 
0413+  0CF5             
0414+  0CF5 7E          	.db	$7e		; ..############.. $54
0415+  0CF6 7E          	.db	$7e		; ..############.. 
0416+  0CF7 18          	.db	$18		; ......####...... 
0417+  0CF8 18          	.db	$18		; ......####...... 
0418+  0CF9 18          	.db	$18		; ......####...... 
0419+  0CFA 18          	.db	$18		; ......####...... 
0420+  0CFB 18          	.db	$18		; ......####...... 
0421+  0CFC 18          	.db	$18		; ......####...... 
0422+  0CFD 18          	.db	$18		; ......####...... 
0423+  0CFE 18          	.db	$18		; ......####...... 
0424+  0CFF             
0425+  0CFF 66          	.db	$66		; ..####....####.. $55
0426+  0D00 66          	.db	$66		; ..####....####.. 
0427+  0D01 66          	.db	$66		; ..####....####.. 
0428+  0D02 66          	.db	$66		; ..####....####.. 
0429+  0D03 66          	.db	$66		; ..####....####.. 
0430+  0D04 66          	.db	$66		; ..####....####.. 
0431+  0D05 66          	.db	$66		; ..####....####.. 
0432+  0D06 66          	.db	$66		; ..####....####.. 
0433+  0D07 7E          	.db	$7e		; ..############.. 
0434+  0D08 3C          	.db	$3c		; ....########.... 
0435+  0D09             
0436+  0D09 66          	.db	$66		; ..####....####.. $56
0437+  0D0A 66          	.db	$66		; ..####....####.. 
0438+  0D0B 66          	.db	$66		; ..####....####.. 
0439+  0D0C 66          	.db	$66		; ..####....####.. 
0440+  0D0D 66          	.db	$66		; ..####....####.. 
0441+  0D0E 7E          	.db	$7e		; ..############.. 
0442+  0D0F 3C          	.db	$3c		; ....########.... 
0443+  0D10 3C          	.db	$3c		; ....########.... 
0444+  0D11 18          	.db	$18		; ......####...... 
0445+  0D12 18          	.db	$18		; ......####...... 
0446+  0D13             
0447+  0D13 C3          	.db	$c3		; ####........#### $57
0448+  0D14 C3          	.db	$c3		; ####........#### 
0449+  0D15 C3          	.db	$c3		; ####........#### 
0450+  0D16 DB          	.db	$db		; ####..####..#### 
0451+  0D17 FF          	.db	$ff		; ################ 
0452+  0D18 FF          	.db	$ff		; ################ 
0453+  0D19 E7          	.db	$e7		; ######....###### 
0454+  0D1A E7          	.db	$e7		; ######....###### 
0455+  0D1B C3          	.db	$c3		; ####........#### 
0456+  0D1C C3          	.db	$c3		; ####........#### 
0457+  0D1D             
0458+  0D1D 66          	.db	$66		; ..####....####.. $58
0459+  0D1E 66          	.db	$66		; ..####....####.. 
0460+  0D1F 7E          	.db	$7e		; ..############.. 
0461+  0D20 3C          	.db	$3c		; ....########.... 
0462+  0D21 18          	.db	$18		; ......####...... 
0463+  0D22 18          	.db	$18		; ......####...... 
0464+  0D23 3C          	.db	$3c		; ....########.... 
0465+  0D24 7E          	.db	$7e		; ..############.. 
0466+  0D25 66          	.db	$66		; ..####....####.. 
0467+  0D26 66          	.db	$66		; ..####....####.. 
0468+  0D27             
0469+  0D27 66          	.db	$66		; ..####....####.. $59
0470+  0D28 66          	.db	$66		; ..####....####.. 
0471+  0D29 7E          	.db	$7e		; ..############.. 
0472+  0D2A 3C          	.db	$3c		; ....########.... 
0473+  0D2B 18          	.db	$18		; ......####...... 
0474+  0D2C 18          	.db	$18		; ......####...... 
0475+  0D2D 18          	.db	$18		; ......####...... 
0476+  0D2E 18          	.db	$18		; ......####...... 
0477+  0D2F 18          	.db	$18		; ......####...... 
0478+  0D30 18          	.db	$18		; ......####...... 
0479+  0D31             
0480+  0D31 7E          	.db	$7e		; ..############.. $5A
0481+  0D32 7E          	.db	$7e		; ..############.. 
0482+  0D33 60          	.db	$60		; ..........####.. 
0483+  0D34 70          	.db	$70		; ........######.. 
0484+  0D35 38          	.db	$38		; ......######.... 
0485+  0D36 1C          	.db	$1c		; ....######...... 
0486+  0D37 0E          	.db	$0e		; ..######........ 
0487+  0D38 06          	.db	$06		; ..####.......... 
0488+  0D39 7E          	.db	$7e		; ..############.. 
0489+  0D3A 7E          	.db	$7e		; ..############.. 
0490+  0D3B             				
0491+  0D3B             	.end
0492+  0D3B             				3252   0D3B             
3253   0D3B             
3254   0D3B             				;; Sprites
3255   0D3B             GFX:														; $0D3D
3256   0D3B             #INCLUDE "swgfx.asm"
0001+  0D3B             				;; 	.org	$0d3d
0002+  0D3B             SHIP0:	
0003+  0D3B 05 0C       	.db	$05, $0c		; Size 5 x 12
0004+  0D3D 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0004+  0D41 00 
0005+  0D42 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0005+  0D46 00 
0006+  0D47 00 60 0E 00 	.db	$00, $60, $0e, $00, $00		; ................ ..........####.. ..######........ ................ ................ 
0006+  0D4B 00 
0007+  0D4C 00 E0 CE 3F 	.db	$00, $e0, $ce, $3f, $00		; ................ ..........###### ..######....#### ############.... ................ 
0007+  0D50 00 
0008+  0D51 00 E0 DE 03 	.db	$00, $e0, $de, $03, $00		; ................ ..........###### ..########..#### ####............ ................ 
0008+  0D55 00 
0009+  0D56 F8 F7 DF F7 	.db	$f8, $f7, $df, $f7, $0f		; ......########## ######..######## ##########..#### ######..######## ########........ 
0009+  0D5A 0F 
0010+  0D5B 80 F7 DF F7 	.db	$80, $f7, $df, $f7, $00		; ..............## ######..######## ##########..#### ######..######## ................ 
0010+  0D5F 00 
0011+  0D60 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0011+  0D64 FF 
0012+  0D65 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $7f		; ################ ################ ################ ################ ##############.. 
0012+  0D69 7F 
0013+  0D6A FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $3f		; ################ ################ ################ ################ ############.... 
0013+  0D6E 3F 
0014+  0D6F FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $1f		; ..############## ################ ################ ################ ##########...... 
0014+  0D73 1F 
0015+  0D74 FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $0f		; ..############## ################ ################ ################ ########........ 
0015+  0D78 0F 
0016+  0D79             
0017+  0D79             SHIP1:	
0018+  0D79 04 0C       	.db	$04, $0c		; Size 4 x 12
0019+  0D7B 00 00 03 00 	.db	$00, $00, $03, $00		; ................ ................ ####............ ................ 
0020+  0D7F 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0021+  0D83 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0022+  0D87 02 B6 03 00 	.db	$02, $b6, $03, $00		; ..##............ ..####..####..## ####............ ................ 
0023+  0D8B 87 FF F3 07 	.db	$87, $ff, $f3, $07		; ######........## ################ ####....######## ######.......... 
0024+  0D8F E2 FF F7 00 	.db	$e2, $ff, $f7, $00		; ..##......###### ################ ######..######## ................ 
0025+  0D93 FF FF FF FF 	.db	$ff, $ff, $ff, $ff		; ################ ################ ################ ################ 
0026+  0D97 FF FF FF 7F 	.db	$ff, $ff, $ff, $7f		; ################ ################ ################ ##############.. 
0027+  0D9B FF FF FF 3F 	.db	$ff, $ff, $ff, $3f		; ################ ################ ################ ############.... 
0028+  0D9F FC FF FF 1F 	.db	$fc, $ff, $ff, $1f		; ....############ ################ ################ ##########...... 
0029+  0DA3 FC FF FF 0F 	.db	$fc, $ff, $ff, $0f		; ....############ ################ ################ ########........ 
0030+  0DA7 F8 FF FF 07 	.db	$f8, $ff, $ff, $07		; ......########## ################ ################ ######.......... 
0031+  0DAB             
0032+  0DAB             SHIP2:	
0033+  0DAB 05 0C       	.db	$05, $0c		; Size 5 x 12
0034+  0DAD 00 00 40 00 	.db	$00, $00, $40, $00, $00		; ................ ................ ............##.. ................ ................ 
0034+  0DB1 00 
0035+  0DB2 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0035+  0DB6 00 
0036+  0DB7 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0036+  0DBB 00 
0037+  0DBC 00 80 F0 1E 	.db	$00, $80, $f0, $1e, $00		; ................ ..............## ........######## ..########...... ................ 
0037+  0DC0 00 
0038+  0DC1 00 00 FB 06 	.db	$00, $00, $fb, $06, $00		; ................ ................ ####..########## ..####.......... ................ 
0038+  0DC5 00 
0039+  0DC6 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0039+  0DCA FF 
0040+  0DCB FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $3f		; ....############ ################ ################ ################ ############.... 
0040+  0DCF 3F 
0041+  0DD0 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $1f		; ....############ ################ ################ ################ ##########...... 
0041+  0DD4 1F 
0042+  0DD5 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $0f		; ....############ ################ ################ ################ ########........ 
0042+  0DD9 0F 
0043+  0DDA F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $07		; ......########## ################ ################ ################ ######.......... 
0043+  0DDE 07 
0044+  0DDF F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0044+  0DE3 03 
0045+  0DE4 F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0045+  0DE8 03 
0046+  0DE9             
0047+  0DE9             SHIP3:	
0048+  0DE9 04 0B       	.db	$04, $0b		; Size 4 x 11
0049+  0DEB 40 00 00 02 	.db	$40, $00, $00, $02		; ............##.. ................ ................ ..##............ 
0050+  0DEF 40 80 00 02 	.db	$40, $80, $00, $02		; ............##.. ..............## ................ ..##............ 
0051+  0DF3 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0052+  0DF7 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0053+  0DFB 40 F0 07 02 	.db	$40, $f0, $07, $02		; ............##.. ........######## ######.......... ..##............ 
0054+  0DFF FC F0 07 F8 	.db	$fc, $f0, $07, $f8		; ....############ ........######## ######.......... ......########## 
0055+  0E03 FC FF FF 7F 	.db	$fc, $ff, $ff, $7f		; ....############ ################ ################ ##############.. 
0056+  0E07 FC FF FF 3F 	.db	$fc, $ff, $ff, $3f		; ....############ ################ ################ ############.... 
0057+  0E0B F8 FF FF 1F 	.db	$f8, $ff, $ff, $1f		; ......########## ################ ################ ##########...... 
0058+  0E0F F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0059+  0E13 F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0060+  0E17             
0061+  0E17             SHIP4:	
0062+  0E17 04 0B       	.db	$04, $0b		; Size 4 x 11
0063+  0E19 80 00 00 00 	.db	$80, $00, $00, $00		; ..............## ................ ................ ................ 
0064+  0E1D 00 00 00 01 	.db	$00, $00, $00, $01		; ................ ................ ................ ##.............. 
0065+  0E21 A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0066+  0E25 A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0067+  0E29 F0 01 00 01 	.db	$f0, $01, $00, $01		; ........######## ##.............. ................ ##.............. 
0068+  0E2D F8 01 00 F9 	.db	$f8, $01, $00, $f9		; ......########## ##.............. ................ ##....########## 
0069+  0E31 F8 FF FF 7F 	.db	$f8, $ff, $ff, $7f		; ......########## ################ ################ ##############.. 
0070+  0E35 F0 FF FF 3F 	.db	$f0, $ff, $ff, $3f		; ........######## ################ ################ ############.... 
0071+  0E39 F0 FF FF 1F 	.db	$f0, $ff, $ff, $1f		; ........######## ################ ################ ##########...... 
0072+  0E3D F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0073+  0E41 E0 FF FF 0F 	.db	$e0, $ff, $ff, $0f		; ..........###### ################ ################ ########........ 
0074+  0E45             
0075+  0E45             SHIP5:
0076+  0E45 02 06       	.db	$02, $06		; Size 2 x 6
0077+  0E47 00 03       	.db	$00, $03		; ................ ####............ 
0078+  0E49 10 07       	.db	$10, $07		; ........##...... ######.......... 
0079+  0E4B E0 FF       	.db	$e0, $ff		; ..........###### ################ 
0080+  0E4D FF 7F       	.db	$ff, $7f		; ################ ##############.. 
0081+  0E4F FF 3F       	.db	$ff, $3f		; ################ ############.... 
0082+  0E51 FF 1F       	.db	$ff, $1f		; ################ ##########...... 
0083+  0E53             
0084+  0E53             SINK:	
0085+  0E53 02 0F       	.db	$02, $0f		; Size 2 x 15
0086+  0E55 10 00       	.db	$10, $00		; ........##...... ................ 
0087+  0E57 30 02       	.db	$30, $02		; ........####.... ..##............ 
0088+  0E59 70 01       	.db	$70, $01		; ........######.. ##.............. 
0089+  0E5B FC 00       	.db	$fc, $00		; ....############ ................ 
0090+  0E5D F8 11       	.db	$f8, $11		; ......########## ##......##...... 
0091+  0E5F F0 3B       	.db	$f0, $3b		; ........######## ####..######.... 
0092+  0E61 E0 7F       	.db	$e0, $7f		; ..........###### ##############.. 
0093+  0E63 C0 3F       	.db	$c0, $3f		; ............#### ############.... 
0094+  0E65 80 1F       	.db	$80, $1f		; ..............## ##########...... 
0095+  0E67 00 3F       	.db	$00, $3f		; ................ ############.... 
0096+  0E69 00 1E       	.db	$00, $1e		; ................ ..########...... 
0097+  0E6B 00 04       	.db	$00, $04		; ................ ....##.......... 
0098+  0E6D 00 48       	.db	$00, $48		; ................ ......##....##.. 
0099+  0E6F 00 F8       	.db	$00, $f8		; ................ ......########## 
0100+  0E71 00 F8       	.db	$00, $f8		; ................ ......########## 
0101+  0E73             
0102+  0E73             SHOT0:	
0103+  0E73 01 11       	.db	$01, $11		; Size 1 x 17
0104+  0E75 10          	.db	$10		; ........##...... 
0105+  0E76 38          	.db	$38		; ......######.... 
0106+  0E77 38          	.db	$38		; ......######.... 
0107+  0E78 38          	.db	$38		; ......######.... 
0108+  0E79 38          	.db	$38		; ......######.... 
0109+  0E7A 38          	.db	$38		; ......######.... 
0110+  0E7B 38          	.db	$38		; ......######.... 
0111+  0E7C 38          	.db	$38		; ......######.... 
0112+  0E7D 38          	.db	$38		; ......######.... 
0113+  0E7E 38          	.db	$38		; ......######.... 
0114+  0E7F 38          	.db	$38		; ......######.... 
0115+  0E80 38          	.db	$38		; ......######.... 
0116+  0E81 38          	.db	$38		; ......######.... 
0117+  0E82 10          	.db	$10		; ........##...... 
0118+  0E83 10          	.db	$10		; ........##...... 
0119+  0E84 10          	.db	$10		; ........##...... 
0120+  0E85 38          	.db	$38		; ......######.... 
0121+  0E86             
0122+  0E86             SHOT1:	
0123+  0E86 01 0E       	.db	$01, $0e		; Size 1 x 14
0124+  0E88 18          	.db	$18		; ......####...... 
0125+  0E89 18          	.db	$18		; ......####...... 
0126+  0E8A 18          	.db	$18		; ......####...... 
0127+  0E8B 18          	.db	$18		; ......####...... 
0128+  0E8C 18          	.db	$18		; ......####...... 
0129+  0E8D 18          	.db	$18		; ......####...... 
0130+  0E8E 18          	.db	$18		; ......####...... 
0131+  0E8F 18          	.db	$18		; ......####...... 
0132+  0E90 18          	.db	$18		; ......####...... 
0133+  0E91 18          	.db	$18		; ......####...... 
0134+  0E92 18          	.db	$18		; ......####...... 
0135+  0E93 18          	.db	$18		; ......####...... 
0136+  0E94 00          	.db	$00		; ................ 
0137+  0E95 18          	.db	$18		; ......####...... 
0138+  0E96             
0139+  0E96             SHOT2:	
0140+  0E96 01 09       	.db	$01, $09		; Size 1 x 9
0141+  0E98 10          	.db	$10		; ........##...... 
0142+  0E99 10          	.db	$10		; ........##...... 
0143+  0E9A 10          	.db	$10		; ........##...... 
0144+  0E9B 10          	.db	$10		; ........##...... 
0145+  0E9C 10          	.db	$10		; ........##...... 
0146+  0E9D 10          	.db	$10		; ........##...... 
0147+  0E9E 10          	.db	$10		; ........##...... 
0148+  0E9F 10          	.db	$10		; ........##...... 
0149+  0EA0 10          	.db	$10		; ........##...... 
0150+  0EA1             
0151+  0EA1             MINE:
0152+  0EA1~            #IF OLDMINE
0153+  0EA1~            	.db	$01, $10		; Size 1 x 16
0154+  0EA1~            	.db	$10		; ........##...... 
0155+  0EA1~            	.db	$ba		; ..##..######..## 
0156+  0EA1~            	.db	$7c		; ....##########.. 
0157+  0EA1~            	.db	$fe		; ..############## 
0158+  0EA1~            	.db	$7c		; ....##########.. 
0159+  0EA1~            	.db	$38		; ......######.... 
0160+  0EA1~            	.db	$54		; ....##..##..##.. 
0161+  0EA1~            	.db	$10		; ........##...... 
0162+  0EA1~            	.db	$00		; ................ 
0163+  0EA1~            	.db	$10		; ........##...... 
0164+  0EA1~            	.db	$00		; ................ 
0165+  0EA1~            	.db	$08		; ......##........ 
0166+  0EA1~            	.db	$00		; ................ 
0167+  0EA1~            	.db	$00		; ................ 
0168+  0EA1~            	.db	$04		; ....##.......... 
0169+  0EA1~            	.db	$00		; ................ 
0170+  0EA1             #ELSE														; Cant use left 2 pixels, right pixels, or top line, else artifacts
0171+  0EA1 01 10       	.db	$01, $10		; Size 1 x 16
0172+  0EA3 00          	.db	$00		; ................ 
0173+  0EA4 54          	.db	$54		; ....##..##..##.. 
0174+  0EA5 38          	.db	$38		; ......######.... 
0175+  0EA6 7C          	.db	$7c		; ....##########.. 
0176+  0EA7 6C          	.db	$6c		; ....####..####.. 
0177+  0EA8 7C          	.db	$7c		; ....##########.. 
0178+  0EA9 38          	.db	$38		; ......######.... 
0179+  0EAA 54          	.db	$54		; ....##..##..##.. 
0180+  0EAB 10          	.db	$10		; ........##...... 
0181+  0EAC 00          	.db	$00		; ................ 
0182+  0EAD 10          	.db	$10		; ........##...... 
0183+  0EAE 00          	.db	$00		; ................ 
0184+  0EAF 08          	.db	$08		; ......##........ 
0185+  0EB0 00          	.db	$00		; ................ 
0186+  0EB1 04          	.db	$04		; ....##.......... 
0187+  0EB2 00          	.db	$00		; ................ 
0188+  0EB3             #ENDIF
0189+  0EB3             			
0190+  0EB3             	.end
0191+  0EB3             				3257   0EB3             
3258   0EB3             
3259   0EB3             				;; Table for $07CF
3260   0EB3             MINEEXP:																									; $0EB5
3261   0EB3 3D 3E 3F    				.db			$3D, $3E, $3F															; Mine explosion
3262   0EB6             
3263   0EB6             LTBLANK:																									; $0EB8
3264   0EB6 40 40 40 40 				.db			"@@@@@@@@@@@"															; ___________
3264   0EBA 40 40 40 40 
3264   0EBE 40 40 40 
3265   0EC1             
3266   0EC1             LTOVER:																										; $0EC3
3267   0EC1 47 41 4D 45 				.db			"GAME@OVER"																; GAME_OVER
3267   0EC5 40 4F 56 45 
3267   0EC9 52 
3268   0ECA             
3269   0ECA             LTHIGH:																										; $0ECC 
3270   0ECA 48 49 47 48 				.db			"HIGH@SCORE"															; HIGH_SCORE
3270   0ECE 40 53 43 4F 
3270   0ED2 52 45 
3271   0ED4             #IF SC3DIG
3272   0ED4 40 40 40 40 				.db			"@@@@@@@"																	; _______
3272   0ED8 40 40 40 
3273   0EDB~            #ELSE
3274   0EDB~            				.db			"@@@@@@"																	; ______
3275   0EDB             #ENDIF
3276   0EDB 59 4F 55 52 				.db			"YOUR@SCORE"															; YOUR_SCORE
3276   0EDF 40 53 43 4F 
3276   0EE3 52 45 
3277   0EE5             
3278   0EE5             LTCOIN:																										; $0EE6
3279   0EE5 49 4E 53 45 				.db			"INSERT@COIN"															; INSERT_COIN
3279   0EE9 52 54 40 43 
3279   0EED 4F 49 4E 
3280   0EF0             
3281   0EF0             LTPUSH:																										; $0EF1
3282   0EF0             #IF SC3DIG
3283   0EF0 50 52 45 53 				.db			"PRESS@START"															; PRESS_START
3283   0EF4 53 40 53 54 
3283   0EF8 41 52 54 
3284   0EFB~            #ELSE
3285   0EFB~            				.db			"PUSH@BUTTON"															; PUSH_BUTTON
3286   0EFB             #ENDIF
3287   0EFB             
3288   0EFB             LTSEA:																										; $0EFC
3289   0EFB             #IF SW2024
3290   0EFB 53 45 41 57 				.db			"SEAWOLFQ"																; SEAWOLF24
3290   0EFF 4F 4C 46 51 
3291   0F03~            #ELSE
3292   0F03~            				.db			"SEA@WOLF"																; SEA_WOLF
3293   0F03             #ENDIF
3294   0F03             
3295   0F03             				;; Water
3296   0F03             L0F04:
3297   0F03 3A 3B 3C 3B 				.db			$3A, $3B, $3C, $3B, $3C, $3A, $3B, $3C		; All
3297   0F07 3C 3A 3B 3C 
3298   0F0B 3A 3C 3B 3C 				.db			$3A, $3C, $3B, $3C, $3A, $3B, $3A, $3C		; Water
3298   0F0F 3A 3B 3A 3C 
3299   0F13 3B 3A 3C 3A 				.db			$3B, $3A, $3C, $3A, $3B, $3C, $3A, $3C		; Codes
3299   0F17 3B 3C 3A 3C 
3300   0F1B 3B 3C 3A 3B 				.db			$3B, $3C, $3A, $3B, $3C, $3A, $3B, $3C		; Here
3300   0F1F 3C 3A 3B 3C 
3301   0F23             
3302   0F23~            #IF OLDINT
3303   0F23~            LTBONUS:																									; $0F24 
3304   0F23~            				.db			"BONUS"																		; BONUS
3305   0F23             #ENDIF
3306   0F23             
3307   0F23             LTTIME:																										; $0F29
3308   0F23             #IF SEAMISS
3309   0F23 4D 49 53 53 				.db			"MISS"																		; MISS
3310   0F27~            #ELSE
3311   0F27~            				.db			"TIME"																		; TIME
3312   0F27             #ENDIF
3313   0F27             #IF SC3DIG
3314   0F27 2C          				.db			$2C																				; <space>
3315   0F28~            #ELSE
3316   0F28~            				.db			$2D																				; <space>
3317   0F28             #ENDIF
3318   0F28 53 43 4F 52 				.db			"SCORE"																		; SCORE
3318   0F2C 45 
3319   0F2D             
3320   0F2D             LTEXT:																					; $0F33 
3321   0F2D 45 58 54 45 				.db			"EXTENDED"																; EXTENDED
3321   0F31 4E 44 45 44 
3322   0F35 16          				.db			$16																				; <space>
3323   0F36             #IF SC3DIG
3324   0F36 50 4C 41 59 				.db			"PLAY"																		; PLAY
3325   0F3A~            #ELSE
3326   0F3A~            				.db			"TIME"																		; TIME
3327   0F3A             #ENDIF
3328   0F3A             
3329   0F3A~            #IF OLDINT
3330   0F3A~            				;; Addresses of mine hit data
3331   0F3A~            TEMINE:
3332   0F3A~            				.dw			TZAP																			; ZAP
3333   0F3A~            				.dw			TWAM																			; WAM
3334   0F3A             #ENDIF
3335   0F3A             
3336   0F3A             TZAP:
3337   0F3A 01 41 04 3D 				.db			$01, "A", $04, $3D, "Z", $2F, "P", $3F		; *ZAP*
3337   0F3E 5A 2F 50 3F 
3338   0F42             TWAM:
3339   0F42 01 41 04 3D 				.db			$01, "A", $04, $3D, "W", $2F, "M", $3F		; *WAM*
3339   0F46 57 2F 4D 3F 
3340   0F4A             
3341   0F4A             #IF MOREEXP
3342   0F4A             TPOW:
3343   0F4A 01 4F 04 3D 				.db			$01, "O", $04, $3D, "P", $2F, "W", $3F		; *POW*
3343   0F4E 50 2F 57 3F 
3344   0F52             TOOF:
3345   0F52 01 4F 04 3D 				.db			$01, "O", $04, $3D, "O", $2F, "F", $3F		; *OOF*
3345   0F56 4F 2F 46 3F 
3346   0F5A             #ENDIF
3347   0F5A             
3348   0F5A~            #IF OLDDIP
3349   0F5A~            				;; 4-byte table (time per credit)
3350   0F5A~            LDTIME:																										; $0F54
3351   0F5A~            				.db			$61, $71, $81, $91												; (Seconds)
3352   0F5A             #ENDIF
3353   0F5A             
3354   0F5A             				;; $0F57 = 8-byte score table (0,7 not used)
3355   0F5A             TSCORE:																										; $0F58
3356   0F5A 03 03 03 01 				.db			$03, $03, $03, $01, $01, $07							; 
3356   0F5E 01 07 
3357   0F60             
3358   0F60             				;; Table for $05D2 (0x20 long)
3359   0F60             				;; Periscope grey code decode
3360   0F60             TGREY:																										; $0F5E
3361   0F60 00 08 18 10 				.db			$00, $08, $18, $10, $38, $30, $20, $28		; 
3361   0F64 38 30 20 28 
3362   0F68 78 70 60 68 				.db			$78, $70, $60, $68, $40, $48, $58, $50		; 
3362   0F6C 40 48 58 50 
3363   0F70 F8 F0 E0 E8 				.db			$F8, $F0, $E0, $E8, $C0, $C8, $D8, $D0		; 
3363   0F74 C0 C8 D8 D0 
3364   0F78 80 88 98 90 				.db			$80, $88, $98, $90, $B8, $B0, $A0, $A8		; 
3364   0F7C B8 B0 A0 A8 
3365   0F80             
3366   0F80             
3367   0F80             				;; Ship tables
3368   0F80             				;; 00-01	= Sprite address
3369   0F80             				;; 02			= $20 = Right to Left, $40 = Left to Right
3370   0F80             				;; 03 		= Initial Y
3371   0F80             				;; 04 		= Delta Y (Always 0 for ships)
3372   0F80             				;; 05			= Final X
3373   0F80             				;; 06			= Initial X
3374   0F80             				;; 07			= Delta X
3375   0F80             
3376   0F80             				;; Even ship table
3377   0F80             L0F7E:
3378   0F80 0D 3B       				.db			(SHIP0>>8), SHIP0&$ff
3379   0F82 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 0
3379   0F86 00 02 
3380   0F88 0D 79       				.db			(SHIP1>>8), SHIP1&$ff
3381   0F8A 20 14 00 E0 				.db			$20, $14, $00, $E0, $00, $02		; Ship 1
3381   0F8E 00 02 
3382   0F90 0D AB       				.db			(SHIP2>>8), SHIP2&$ff
3383   0F92 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 2
3383   0F96 00 02 
3384   0F98 0D E9       				.db			(SHIP3>>8), SHIP3&$ff
3385   0F9A 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 3
3385   0F9E 00 01 
3386   0FA0 0E 17       				.db			(SHIP4>>8), SHIP4&$ff
3387   0FA2 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 4
3387   0FA6 00 01 
3388   0FA8 0E 45       				.db			(SHIP5>>8), SHIP5&$ff
3389   0FAA 20 1A 00 F0 				.db			$20, $1A, $00, $F0, $00, $03		; Ship 5
3389   0FAE 00 03 
3390   0FB0             
3391   0FB0             				;; Odd ship table
3392   0FB0             L0FAE:
3393   0FB0 0D 3B       				.db			(SHIP0>>8), SHIP0&$ff
3394   0FB2 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 0
3394   0FB6 D8 FE 
3395   0FB8 0D 79       				.db			(SHIP1>>8), SHIP1&$ff
3396   0FBA 40 34 00 E0 				.db			$40, $34, $00, $E0, $E0, $FE		; Ship 1
3396   0FBE E0 FE 
3397   0FC0 0D AB       				.db			(SHIP2>>8), SHIP2&$ff
3398   0FC2 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 2
3398   0FC6 D8 FE 
3399   0FC8 0D E9       				.db			(SHIP3>>8), SHIP3&$ff
3400   0FCA 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 3
3400   0FCE E0 FF 
3401   0FD0 0E 17       				.db			(SHIP4>>8), SHIP4&$ff
3402   0FD2 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 4
3402   0FD6 E0 FF 
3403   0FD8 0E 45       				.db			(SHIP5>>8), SHIP5&$ff
3404   0FDA 40 3A 00 F0 				.db			$40, $3A, $00, $F0, $F0, $FD		; Ship 5
3404   0FDE F0 FD 
3405   0FE0             
3406   0FE0             				;; Ship type table
3407   0FE0             L0FDE:
3408   0FE0 06          				.db			$06															; Small, fast
3409   0FE1 04          				.db			$04															; Mid, 2 towers
3410   0FE2 02          				.db			$02															; Cross in back
3411   0FE3 06          				.db			$06															; Small, fast
3412   0FE4 03          				.db			$03															; Big, flat top
3413   0FE5 05          				.db			$05															; Tower in back
3414   0FE6 01          				.db			$01															; Battleship
3415   0FE7             
3416   0FE7             #IF DOCOPY
3417   0FE7             COPYRGHT:
3418   0FE7 4D 53 50 41 				.db			"MSPAETH@2024"
3418   0FEB 45 54 48 40 
3418   0FEF 32 30 32 34 
3419   0FF3             #ENDIF
3420   0FF3             
3421   0FF3~            #IF OLDTEST
3422   0FF3~            				.org		$0fff
3423   0FF3~            				.db			$ff
3424   0FF3             #ELSE
3425   0FF7             				.org		$0ff7
3426   0FF7             
3427   0FF7             				;; $400 block checksums
3428   0FF7             				;; Recalculate these with 'swaddchk'
3429   0FF7 9A          				.db			$9A											; Patch byte for $c00 checksum
3430   0FF8             CHKS:
3431   0FF8 EC 3C 10 00 				.db			$EC, $3C, $10, $00			; Checksums
3432   0FFC             
3433   0FFC             				;; Error locations
3434   0FFC             ERRS:
3435   0FFC 48 47 46 45 				.db			$48, $47, $46, $45			; HGFE
3436   1000             #ENDIF
3437   1000             
3438   1000             .end
tasm: Number of errors = 0

0001   0000             				;; @2024 Mark Spaeth -- mspaeth@gmail.com
0002   0000             				;; Whitespace for emacs asm mode w/ tab width 2
0003   0000             
0004   0000             				;; Programmed for tasm z80 mode using only 8080 instructions
0005   0000             
0006   0000             				;; Config variables
0007   0000             OLDMINE	= 1											; Use original mine gfx
0008   0000             SC3DIG	= 1											; 3 digit scoring, simplified coinage
0009   0000             OLDDIP	= 1											; Table lookup vs calculated DIPs
0010   0000             OLDINT	= 0											; Exclude interpreter changes that save bytes
0011   0000             OLDTEST	= 0											; Use $0200 byte self test routine
0012   0000             SW2024	= 0
0013   0000             
0014   0000             				;; Generic variables
0015   0000             SINC		= $000D									; Ship entry length
0016   0000             MINC		= $000D									; Mine entry length
0017   0000             RINC		= $0020									; Row increment
0018   0000             TINC		= $001E									; Torpedo entry length
0019   0000             
0020   0000             				;; Memory locations
0021   0000             PRGPTR	= $2000									; $2000-2001
0022   0000             
0023   0000             
0024   0000             #IF SC3DIG
0025   0000             GTIME		= $2004									; Was $2002
0026   0000             TIMER		= $2005									; Was $2003
0027   0000             CREDIT	= $2006									; Was $2005, half credit not used
0028   0000             HSCORE	= $2002									; Was $2006
0029   0000             HSCOREH	= HSCORE+1							; High byte
0030   0000             PSCORE	= $2012									; Was $202B
0031   0000             PSCOREH	= PSCORE+1							; High byte
0032   0000             TXTBUF	= $21E8									; Space for 1 more digit
0033   0000~            #ELSE
0034   0000~            GTIME		= $2002
0035   0000~            TIMER		= $2003
0036   0000~            HCREDIT	= $2004
0037   0000~            CREDIT	= $2005									; Was $2005, half credit not used
0038   0000~            HSCORE	= $2006
0039   0000~            PSCORE	= $202B									; Was $202B
0040   0000~            TXTBUF	= $21E9
0041   0000             #ENDIF
0042   0000             
0043   0000             
0044   0000             IN1			= $2007
0045   0000             IN0			= $2008
0046   0000             TIMER1	= $2010
0047   0000             TIMER2	= $2011
0048   0000             HMINE		= $2014									; Next mine to update
0049   0000             HTORP		= $2016									; Next torp to update
0050   0000             HSHIPA	= $2018									; SHIPA handle
0051   0000             HSHIPB	= $201A									; SHIPB handle
0052   0000             HSUNK		= $201C									; SUNK handle (?)
0053   0000             
0054   0000             ATIMER	= $2025									; Audio timer
0055   0000             
0056   0000             SHIPA0	= $2031									; Base address of ship A
0057   0000             SHIPA1	= SHIPA0+SINC						; $203E ($0d block)
0058   0000             SHIPA2	= SHIPA1+SINC						; $204B ($0d block)
0059   0000             SHIPAX	= SHIPA2+SINC						; $2058 ($0d block)
0060   0000             
0061   0000             SHIPB0	= $2058									; Base address of ship B
0062   0000             SHIPB1	= SHIPB0+SINC						; $2065 ($0d block)
0063   0000             SHIPB2	= SHIPB1+SINC						; $2072 ($0d block)
0064   0000             SHIPBX	= SHIPB2+SINC						; $207F ($0d block)
0065   0000             
0066   0000             MINES		= $207F									; Base address of mines
0067   0000             MINEX		= MINES+(8*MINC)				; $20E7 (8x $0d blocks)
0068   0000             
0069   0000             TORPS		= $20E7									; Base address of torpedos
0070   0000             TORPX		= TORPS+(4*TINC)				; $215F (4x $1e blocks)
0071   0000             
0072   0000             HMISS		= $21F0
0073   0000             
0074   0000             				;; out 01    = Explosion matrix
0075   0000             				;; out 02    = Torpedo display
0076   0000             				;; out 03    = Shifter data
0077   0000             				;; out 04    = Shifter count
0078   0000             				;; out 05    = Sound triggers
0079   0000             				;; out 06    = watchdog (add this)
0080   0000             
0081   0000             
0082   0000             				;; Original memory addresses (modded for this)
0083   0000             				;; 2000-2001 = Pointer address for main game/attract loop
0084   0000             				;; 2002      = Game time?
0085   0000             				;; 2003      = Down counter ($1E to $00)
0086   0000             				;; 2004      = Partial credits
0087   0000             				;; 2005      = Credits
0088   0000             				;; 2006      = High score byte
0089   0000             				;; 2007      = Last IN1
0090   0000             				;; 2008      = Last IN0
0091   0000             				;; 200e-200f = Unused?
0092   0000             				;; 2010      = Down counter (when $2003 == 0)
0093   0000             				;; 2011      = Down counter
0094   0000             				;; 2012-2013 = (Not used?)
0095   0000             				;; 2014-2015 = Sprite draw handle
0096   0000             				;; 2016-2017 = Ship 0  handle
0097   0000             				;; 2018-2019 = Ship 1  handke
0098   0000             				;; 201a-201b = Torpedo handle 
0099   0000             				;; 201c      = Next sprite?
0100   0000             				;; 201e      = ??
0101   0000             				;; 201f      = Draw / not draw for flashing?
0102   0000             
0103   0000             				;; 2020 = Mask for subs to call at 04ce (when [[$2000]] == 00)
0104   0000             				;;             D7 = $2002, D6 = $2010, D5 = $2011, D4 = $2021
0105   0000             				;;             D3 = $2022, D2 = $2023, D1 = $2024, D0 = $2025
0106   0000             				;; 2021      = Down counter (non-zero inhibits fire)
0107   0000             				;; 2022      = Down counter
0108   0000             				;; 2023      = Down counter ($19 for small ship)
0109   0000             				;; 2024      = Timer (to show score / explosion)
0110   0000             				;; 2025      = Timer (audio)
0111   0000             				;; 2026      = Down counter ($0f for small ship)
0112   0000             				;; 2027-2028 = Wave state
0113   0000             				;; 2029      = Next ship type
0114   0000             				;; 202A      = Duplicate game time
0115   0000             				;; 202b      = Player score
0116   0000             				;; 202c      = ?? 
0117   0000             				;; 202d      = Torpedo status
0118   0000             				;; 202e      = 1 if extended time passed
0119   0000             				;; 202f      = Ship Launch direction?
0120   0000             				;; 2030      = Current sprite shift
0121   0000             				;; 2031-203D = Sprite ($0d block)
0122   0000             				;;		Byte 0   = X flags?
0123   0000             				;;		Byte 1   = Delta X
0124   0000             				;;		Byte 2   = X Pos  ((loc-$2400) & $1f)<<3 | (shift & $07)
0125   0000             				;;		Byte 3   = Y flags
0126   0000             				;;		Byte 4   = Delta Y
0127   0000             				;;		Byte 5   = Y Pos  loc-$2400)>>5
0128   0000             				;;		Byte 6   = ??
0129   0000             				;;		Byte 7-8 = Sprite tbl LSB,MSB
0130   0000             				;;		Byte 9-A = (address -> de -> hl)
0131   0000             				;;		Byte C-D = (read into bc)
0132   0000             				;; 203E-204A = Sprite ($0d block)
0133   0000             				;; 204B-2057 = Sprite ($0d block)
0134   0000             				;; 2058-2064 = Ship data 0 (Attract?)
0135   0000             				;; 2065-2071 = Ship data 1
0136   0000             				;; 2072-207e = Ship data 2
0137   0000             
0138   0000             				;; 207f-208b = Mine data 0
0139   0000             				;; 208c-2098 = Mine data 1
0140   0000             				;; 2099-20a5 = Mine data 2
0141   0000             				;; 20a6-20b2 = Mine data 3
0142   0000             				;; 20b3-20bf = Mine data 4
0143   0000             				;; 20c0-20cc = Mine data 5
0144   0000             				;; 20cd-20d9 = Mine data 6
0145   0000             				;; 20da-20e6 = Mine data 7
0146   0000             
0147   0000             				;; 20c9-20e6
0148   0000             
0149   0000             				;; Torpedo control?
0150   0000             				;; 20e7-2104 = $1e data block
0151   0000             				;; 2105-2122 = $1e data block
0152   0000             				;; 2123-2140 = $1e data block
0153   0000             				;; 2140-21r3 = $1e data block
0154   0000             
0155   0000             				;; 215f-21a3 = $44 data block, cleared at $0088
0156   0000             
0157   0000             				;; 21e9-21ef = 7 character buffer for time+score
0158   0000             				;; 21f0-21f1 = Address for $0A3F clear if non-zero
0159   0000             				;; 21f2-21f3 = Address for $0A3F clear if non-zero
0160   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0161   0000             				;; 21f4-21f5 = Address for $0A3F clear if non-zero
0162   0000             
0163   0000             				;; RST $00 ($C7)
0164   0000             				.org		$0000
0165   0000             L0000:
0166   0000 00          				nop
0167   0001 00          				nop
0168   0002 31 00 24    				ld			sp,$2400				; Stack pointer
0169   0005 C3 2B 04    				jp			L043A						; Startup jump
0170   0008             
0171   0008             				;; rst $08 ($cf interrupt vector)
0172   0008             RST08:
0173   0008 E5          				push		hl
0174   0009 D5          				push		de
0175   000A C5          				push		bc
0176   000B F5          				push		af
0177   000C C3 7E 00    				jp			L007E
0178   000F 00          				nop
0179   0010             
0180   0010             				;; rst $10 ($d7 interrupt vector)
0181   0010             RST10:
0182   0010 E5          				push		hl
0183   0011 D5          				push		de
0184   0012 C5          				push		bc
0185   0013 F5          				push		af
0186   0014 3A 1F 20    				ld			a,($201F)				; ??
0187   0017 A7          				and			a
0188   0018 C2 3E 00    				jp			nz,L003E
0189   001B             
0190   001B CD BC 03    				call		L03BC						; Update wave
0191   001E CD 2E 01    				call		L012E						; Update a sprite
0192   0021             
0193   0021 2A 16 20    				ld			hl,($2016)			; Sprite pointer
0194   0024 7E          				ld			a,(hl)
0195   0025 A7          				and			a
0196   0026 F2 36 00    				jp			p,L0036					; D7=0 = inactive
0197   0029 E6 20       				and			$20
0198   002B CA 36 00    				jp			z,L0036					; D5=0 = don't draw
0199   002E             
0200   002E CD 5B 03    				call		L035B						; Load de, bc from ship data
0201   0031 0D          				dec			c
0202   0032 EB          				ex			de,hl
0203   0033 CD 06 0A    				call		L0A2A						; Draw b x c block from de at hl
0204   0036             
0205   0036             L0036:
0206   0036 3E FF       				ld			a,$FF
0207   0038 32 1F 20    				ld			($201F),a
0208   003B C3 69 00    				jp			L0069						; End of interrupt routine
0209   003E             
0210   003E             L003E:
0211   003E 2A 16 20    				ld			hl,($2016)			; Sprite pointer
0212   0041 7E          				ld			a,(hl)
0213   0042 A7          				and			a
0214   0043 F2 62 00    				jp			p,L0062					; D7=0 = inactive
0215   0046             
0216   0046 E6 40       				and			$40
0217   0048 C2 50 00    				jp			nz,L0050				; Jump if not set to clear
0218   004B 36 00       				ld			(hl),$00				; Clear sprite
0219   004D C3 62 00    				jp			L0062
0220   0050             
0221   0050             L0050:
0222   0050 7E          				ld			a,(hl)					; Set flags bit 5
0223   0051 F6 20       				or			$20
0224   0053 77          				ld			(hl),a
0225   0054 CD 65 01    				call		L0165						; Update sprite
0226   0057 78          				ld			a,b
0227   0058 E5          				push		hl
0228   0059 2A 1C 20    				ld			hl,($201C)			; ($201C) to bc
0229   005C 44          				ld			b,h
0230   005D 4D          				ld			c,l
0231   005E E1          				pop			hl
0232   005F CD F2 09    				call		L0A16
0233   0062             
0234   0062             L0062:
0235   0062 CD 68 03    				call		L0368
0236   0065 AF          				xor			a
0237   0066 32 1F 20    				ld			($201F),a
0238   0069             
0239   0069             				;; End of interrupt routine
0240   0069             L0069:
0241   0069 DB 02       				in			a,($02)					; IN1
0242   006B 47          				ld			b,a
0243   006C DB 02       				in			a,($02)					; IN1
0244   006E 21 07 20    				ld			hl,IN1					; Last IN1
0245   0071 11 A8 09    				ld			de,TBLIN1				; IN1 handler table
0246   0074 B8          				cp			b								; Poor man's debounce
0247   0075 CC E5 0A    				call		z,L0B05					; Call if stable
0248   0078             
0249   0078 F1          				pop			af
0250   0079 C1          				pop			bc
0251   007A D1          				pop			de
0252   007B E1          				pop			hl
0253   007C FB          				ei
0254   007D C9          				ret
0255   007E             
0256   007E             
0257   007E             				;; Interrupt $08 vector continues...
0258   007E             L007E:
0259   007E 3A 1F 20    				ld			a,($201F)
0260   0081 A7          				and			a
0261   0082 C2 19 01    				jp			nz,L0119
0262   0085 CD BC 03    				call		L03BC						; Update wave
0263   0088             
0264   0088             				;; Clear $215f-$21a3
0265   0088 21 5F 21    				ld			hl,$215F
0266   008B 06 44       				ld			b,$44
0267   008D AF          				xor			a
0268   008E             L008E:
0269   008E 77          				ld			(hl),a
0270   008F 23          				inc			hl
0271   0090 05          				dec			b
0272   0091 C2 8E 00    				jp			nz,L008E
0273   0094             
0274   0094 2A 18 20    				ld			hl,($2018)			; Sprite pointer 0
0275   0097 3E 03       				ld			a,$03						; Loop counter 
0276   0099             L0099:
0277   0099 F5          				push		af
0278   009A 7D          				ld			a,l
0279   009B FE 58       				cp			$58							; Cycles $2031 / $203E / $204B
0280   009D C2 A3 00    				jp			nz,L00A3
0281   00A0             
0282   00A0             L00A0:
0283   00A0 21 31 20    				ld			hl,$2031				; Resets to $2031
0284   00A3             L00A3:
0285   00A3 B4          				or			h
0286   00A4 CA A0 00    				jp			z,L00A0					; If was $0000, init as $2013
0287   00A7             
0288   00A7 E5          				push		hl
0289   00A8 CD DE 01    				call		L01DE						; Handle sprite
0290   00AB E1          				pop			hl
0291   00AC D2 B2 00    				jp			nc,L00B2
0292   00AF             
0293   00AF 22 18 20    				ld			($2018),hl			; Store sprite pointer 0
0294   00B2             L00B2:
0295   00B2 11 0D 00    				ld			de,$000D				; Sprite increment
0296   00B5 19          				add			hl,de
0297   00B6 F1          				pop			af
0298   00B7 3D          				dec			a
0299   00B8 C2 99 00    				jp			nz,L0099				; Loop back
0300   00BB             
0301   00BB 2A 18 20    				ld			hl,($2018)			; Sprite pointer 0
0302   00BE CD 0C 03    				call		L030C
0303   00C1             
0304   00C1 2A 1A 20    				ld			hl,($201A)			; Sprite pointer 1
0305   00C4             
0306   00C4 3E 03       				ld			a,$03						; Loop counter
0307   00C6             L00C6:
0308   00C6 F5          				push		af
0309   00C7 7D          				ld			a,l
0310   00C8 FE 7F       				cp			$7F							; Cycloes $2058 / $2065 / $2072
0311   00CA C2 D0 00    				jp			nz,L00D0
0312   00CD             L00CD:
0313   00CD 21 58 20    				ld			hl,$2058				; Reset to $2058
0314   00D0             L00D0:
0315   00D0 B4          				or			h
0316   00D1 CA CD 00    				jp			z,L00CD					; If was $0000, init as $2058
0317   00D4             
0318   00D4 E5          				push		hl
0319   00D5 CD DE 01    				call		L01DE						; Handle sprite
0320   00D8 E1          				pop			hl
0321   00D9 D2 DF 00    				jp			nc,L00DF
0322   00DC             
0323   00DC 22 1A 20    				ld			($201A),hl			; Store sprite pointer 1
0324   00DF             L00DF:
0325   00DF 11 0D 00    				ld			de,$000D				; Sprite increment
0326   00E2 19          				add			hl,de
0327   00E3 F1          				pop			af
0328   00E4 3D          				dec			a
0329   00E5 C2 C6 00    				jp			nz,L00C6				; Loop back
0330   00E8             
0331   00E8 AF          				xor			a
0332   00E9 32 30 20    				ld			($2030),a				; Clear sprite shift
0333   00EC             
0334   00EC 2A 16 20    				ld			hl,($2016)			; Pointer?
0335   00EF 3E 04       				ld			a,$04						; Loop counter
0336   00F1             L00F1:
0337   00F1 F5          				push		af
0338   00F2 7D          				ld			a,l
0339   00F3 FE 5F       				cp			$5F							; Cycles $20E7 / $2105 / $2123 / $2140
0340   00F5 C2 FB 00    				jp			nz,L00FB
0341   00F8             
0342   00F8             L00F8:
0343   00F8 21 E7 20    				ld			hl,$20E7				; Reset to $20E7
0344   00FB             L00FB:
0345   00FB B4          				or			h
0346   00FC CA F8 00    				jp			z,L00F8					; If was $0000, init to $20E7
0347   00FF             
0348   00FF E5          				push		hl
0349   0100 CD 50 02    				call		L0250						; Handle torpedo
0350   0103 E1          				pop			hl
0351   0104 D2 0A 01    				jp			nc,L010A
0352   0107             
0353   0107 22 16 20    				ld			($2016),hl			; Update pointer
0354   010A             L010A:
0355   010A 11 1E 00    				ld			de,$001E				; Torp increment
0356   010D 19          				add			hl,de
0357   010E F1          				pop			af
0358   010F 3D          				dec			a
0359   0110 C2 F1 00    				jp			nz,L00F1				; Loop back
0360   0113             
0361   0113 CD 31 03    				call		L0331						; Update sprites
0362   0116 C3 69 00    				jp			L0069						; End of interrupt routine
0363   0119             
0364   0119             
0365   0119             L0119:
0366   0119 2A 1A 20    				ld			hl,($201A)			; Ship 1 pointer
0367   011C CD 0C 03    				call		L030C
0368   011F             
0369   011F 2A 1A 20    				ld			hl,($201A)			; Ship 1 pointer
0370   0122 CD 3A 01    				call		L013A
0371   0125             
0372   0125 2A 18 20    				ld			hl,($2018)			; Ship 0 pointer
0373   0128 CD 3A 01    				call		L013A
0374   012B             
0375   012B C3 69 00    				jp			L0069						; End of interrupt routine
0376   012E             
0377   012E             
0378   012E             				;; Called from rst $10
0379   012E             				;; Handle $2014 handle
0380   012E             L012E:
0381   012E 2A 14 20    				ld			hl,($2014)
0382   0131 7E          				ld			a,(hl)
0383   0132 A7          				and			a
0384   0133 F0          				ret			p								; D7 clear = inactive
0385   0134             
0386   0134 CD 65 01    				call		L0165						; Update sprite
0387   0137 C3 92 01    				jp			L0192						; Draw sprite
0388   013A             
0389   013A             
0390   013A             				;; Handle $2018 / $201a entries
0391   013A             L013A:
0392   013A 7E          				ld			a,(hl)
0393   013B A7          				and			a
0394   013C F0          				ret			p								; D7 clear = inactive
0395   013D             
0396   013D E6 40       				and			$40							; Check bit 6
0397   013F C2 45 01    				jp			nz,L0145				; D6 set = clear
0398   0142 36 00       				ld			(hl),$00				; Clear entry
0399   0144 C9          				ret
0400   0145             
0401   0145             L0145:
0402   0145 7E          				ld			a,(hl)
0403   0146 F6 20       				or			$20							; Set bit 5 
0404   0148 77          				ld			(hl),a
0405   0149 F5          				push		af
0406   014A CD 65 01    				call		L0165						; Update sprite
0407   014D             				;; hl = screen loc, c=shift on return
0408   014D             
0409   014D F1          				pop			af
0410   014E E6 10       				and			$10							; Check bit 4
0411   0150 CA 92 01    				jp			z,L0192					; Draw sprite
0412   0153             
0413   0153 79          				ld			a,c
0414   0154 85          				add			a,l
0415   0155 6F          				ld			l,a
0416   0156 E5          				push		hl
0417   0157 21 30 20    				ld			hl,$2030
0418   015A 7E          				ld			a,(hl)
0419   015B 2F          				cpl
0420   015C E6 07       				and			$07
0421   015E 77          				ld			(hl),a
0422   015F E1          				pop			hl
0423   0160 D3 04       				out			($04),a					; Update shift count
0424   0162 C3 B8 01    				jp			L01B8
0425   0165             
0426   0165             				;; Update/redraw sprite
0427   0165             L0165:
0428   0165 23          				inc			hl
0429   0166 23          				inc			hl
0430   0167 5E          				ld			e,(hl)					; LSB of loc + shift
0431   0168 23          				inc			hl
0432   0169 23          				inc			hl
0433   016A 23          				inc			hl
0434   016B 56          				ld			d,(hl)					; MSB of loc
0435   016C 23          				inc			hl
0436   016D 23          				inc			hl
0437   016E CD DC 09    				call		L0A00						; de >> 3, e&3 -> c
0438   0171             
0439   0171 79          				ld			a,c							; (shift)
0440   0172 32 30 20    				ld			($2030),a
0441   0175 D3 04       				out			($04),a					; Shifter count
0442   0177 D5          				push		de							; Push screen loc
0443   0178 5E          				ld			e,(hl)					; Get spite data loc
0444   0179 23          				inc			hl
0445   017A 56          				ld			d,(hl)
0446   017B 23          				inc			hl
0447   017C EB          				ex			de,hl						; rom loc -> hl
0448   017D 4E          				ld			c,(hl)					; Read sprite size
0449   017E 23          				inc			hl
0450   017F 46          				ld			b,(hl)
0451   0180 23          				inc			hl
0452   0181 E3          				ex			(sp),hl					; hl = screen loc
0453   0182 EB          				ex			de,hl						; hl Back to ram table
0454   0183 73          				ld			(hl),e
0455   0184 23          				inc			hl
0456   0185 72          				ld			(hl),d
0457   0186 23          				inc			hl
0458   0187 71          				ld			(hl),c					; Width
0459   0188 34          				inc			(hl)						; +1 wide for shifting?
0460   0189 23          				inc			hl
0461   018A 70          				ld			(hl),b					; Height
0462   018B 23          				inc			hl
0463   018C 22 1C 20    				ld			($201C),hl			; Store next
0464   018F             
0465   018F EB          				ex			de,hl						; hl = screen loc
0466   0190 D1          				pop			de							; de = sprite data in ROM
0467   0191 C9          				ret
0468   0192             
0469   0192             
0470   0192             				;; Sprite draw, normal
0471   0192             L0192:
0472   0192 C5          				push		bc							; bc = bytes wide, pix high
0473   0193 E5          				push		hl							; hl = screen loc
0474   0194             L0194:
0475   0194 1A          				ld			a,(de)					; Sprite byte
0476   0195 13          				inc			de
0477   0196 D3 03       				out			($03),a					; MB12421 data write
0478   0198 DB 03       				in			a,($03)					; MB12421 data read
0479   019A 77          				ld			(hl),a					; Write to RAM
0480   019B 23          				inc			hl
0481   019C 0D          				dec			c
0482   019D C2 94 01    				jp			nz,L0194				; Loop for width
0483   01A0             
0484   01A0 AF          				xor			a
0485   01A1 D3 03       				out			($03),a					; MB12421 data write
0486   01A3 DB 03       				in			a,($03)					; MB12421 data read
0487   01A5 77          				ld			(hl),a					; Final write
0488   01A6 01 20 00    				ld			bc,$0020				; Row increment
0489   01A9 E1          				pop			hl
0490   01AA 09          				add			hl,bc						; Next row
0491   01AB C1          				pop			bc
0492   01AC 7D          				ld			a,l
0493   01AD E6 E0       				and			$E0
0494   01AF C2 92 01    				jp			nz,L0192				; Not end of screen
0495   01B2 7C          				ld			a,h
0496   01B3 1F          				rra
0497   01B4 DA 92 01    				jp			c,L0192					; Not end of screen
0498   01B7 C9          				ret
0499   01B8             
0500   01B8             				;; Sprite draw, flipped
0501   01B8             L01B8:
0502   01B8 C5          				push		bc
0503   01B9 E5          				push		hl
0504   01BA             L01BA:
0505   01BA 1A          				ld			a,(de)
0506   01BB 13          				inc			de
0507   01BC D3 03       				out			($03),a					; Shifter input
0508   01BE DB 00       				in			a,($00)					; Shifter output
0509   01C0 77          				ld			(hl),a					; Write to screen
0510   01C1 2B          				dec			hl
0511   01C2 0D          				dec			c
0512   01C3 C2 BA 01    				jp			nz,L01BA				; Loop for row
0513   01C6             
0514   01C6 AF          				xor			a
0515   01C7 D3 03       				out			($03),a					; Shifter input 
0516   01C9 DB 00       				in			a,($00)					; Shifter output
0517   01CB 77          				ld			(hl),a					; Write to screen
0518   01CC 01 20 00    				ld			bc,$0020				; Next line
0519   01CF E1          				pop			hl
0520   01D0 09          				add			hl,bc
0521   01D1 C1          				pop			bc
0522   01D2 7D          				ld			a,l
0523   01D3 E6 E0       				and			$E0
0524   01D5 C2 B8 01    				jp			nz,L01B8				; Not end of screen
0525   01D8             
0526   01D8 7C          				ld			a,h
0527   01D9 1F          				rra
0528   01DA DA B8 01    				jp			c,L01B8					; Not end of screen
0529   01DD C9          				ret
0530   01DE             
0531   01DE             
0532   01DE             				;; 
0533   01DE             L01DE:
0534   01DE 7E          				ld			a,(hl)
0535   01DF A7          				and			a
0536   01E0 F0          				ret			p								; High bit clear = inactive
0537   01E1             
0538   01E1 E5          				push		hl
0539   01E2 23          				inc			hl							; hl now delta X
0540   01E3 E6 07       				and			$07							; Mask low 3 bits 
0541   01E5 C2 ED 01    				jp			nz,L01ED				; (is a ship)
0542   01E8             
0543   01E8             				;; This is a missle?
0544   01E8 23          				inc			hl
0545   01E9 23          				inc			hl
0546   01EA C3 37 02    				jp			L0237
0547   01ED             
0548   01ED             L01ED:
0549   01ED 7E          				ld			a,(hl)					; Delta X
0550   01EE 11 5F 21    				ld			de,$215F				; Table for +
0551   01F1 A7          				and			a
0552   01F2 F2 F8 01    				jp			p,L01F8
0553   01F5             
0554   01F5 11 81 21    				ld			de,$2181				; Table for -
0555   01F8             L01F8:
0556   01F8 47          				ld			b,a							; b = delta x
0557   01F9 23          				inc			hl							; (hl) = X
0558   01FA 86          				add			a,(hl)					; a = x + dx
0559   01FB 77          				ld			(hl),a					; store x
0560   01FC 78          				ld			a,b							; a = delta X
0561   01FD A7          				and			a
0562   01FE 7E          				ld			a,(hl)					; a = X
0563   01FF F2 10 02    				jp			p,L0210					; (left to right)
0564   0202             
0565   0202 FE 01       				cp			$01
0566   0204 D2 16 02    				jp			nc,L0216
0567   0207             
0568   0207             L0207:
0569   0207 E3          				ex			(sp),hl
0570   0208 7E          				ld			a,(hl)
0571   0209 E6 BF       				and			$BF							; Clear bit 5 (Ship done?)
0572   020B 77          				ld			(hl),a
0573   020C E3          				ex			(sp),hl
0574   020D C3 16 02    				jp			L0216
0575   0210             
0576   0210             L0210:
0577   0210 23          				inc			hl
0578   0211 BE          				cp			(hl)						; End X
0579   0212 2B          				dec			hl
0580   0213 D2 07 02    				jp			nc,L0207
0581   0216             
0582   0216             L0216:
0583   0216 7E          				ld			a,(hl)
0584   0217 0F          				rrca
0585   0218 0F          				rrca
0586   0219 0F          				rrca
0587   021A E6 1F       				and			$1F							; High 5 bits of (hL)
0588   021C 83          				add			a,e
0589   021D 5F          				ld			e,a
0590   021E E3          				ex			(sp),hl
0591   021F 7E          				ld			a,(hl)
0592   0220 E3          				ex			(sp),hl
0593   0221 E6 07       				and			$07
0594   0223 47          				ld			b,a
0595   0224 23          				inc			hl
0596   0225 7E          				ld			a,(hl)
0597   0226 2F          				cpl
0598   0227 3C          				inc			a
0599   0228 0F          				rrca
0600   0229 0F          				rrca
0601   022A 0F          				rrca
0602   022B E6 07       				and			$07
0603   022D C6 03       				add			a,$03
0604   022F EB          				ex			de,hl
0605   0230             
0606   0230             L0230:
0607   0230 70          				ld			(hl),b
0608   0231 23          				inc			hl
0609   0232 3D          				dec			a
0610   0233 C2 30 02    				jp			nz,L0230
0611   0236             
0612   0236 EB          				ex			de,hl
0613   0237             
0614   0237             				;; Handle missiles?
0615   0237             L0237:
0616   0237 11 2F 20    				ld			de,$202F				; Ship launch dir?
0617   023A 1A          				ld			a,(de)
0618   023B 2F          				cpl											; Invert it
0619   023C 12          				ld			(de),a
0620   023D C2 47 02    				jp			nz,L0247
0621   0240             
0622   0240 23          				inc			hl
0623   0241 7E          				ld			a,(hl)					; Delta X
0624   0242 23          				inc			hl
0625   0243 86          				add			a,(hl)					; X Pos
0626   0244 77          				ld			(hl),a					; X Pos
0627   0245 23          				inc			hl
0628   0246 BE          				cp			(hl)						; End X?
0629   0247             L0247:
0630   0247 E1          				pop  hl
0631   0248 37          				scf
0632   0249 C0          				ret  nz
0633   024A             
0634   024A 7E          				ld			a,(hl)					; Flags
0635   024B E6 BF       				and			$BF							; Clear bit 5
0636   024D 77          				ld			(hl),a					; Flags
0637   024E 37          				scf
0638   024F C9          				ret
0639   0250             
0640   0250             
0641   0250             				;; Handle torpedo
0642   0250             L0250:
0643   0250 7E          				ld			a,(hl)
0644   0251 A7          				and			a
0645   0252 F0          				ret			p								; D7 clear = inactive
0646   0253             
0647   0253 E5          				push		hl
0648   0254 23          				inc			hl
0649   0255 23          				inc			hl
0650   0256 4E          				ld			c,(hl)					; +2
0651   0257 23          				inc			hl
0652   0258 23          				inc			hl
0653   0259 7E          				ld			a,(hl)					; +4 dx?
0654   025A 23          				inc			hl
0655   025B 46          				ld			b,(hl)					; +5 y?
0656   025C 80          				add			a,b
0657   025D 77          				ld			(hl),a					; +5
0658   025E 78          				ld			a,b
0659   025F FE C0       				cp			$C0
0660   0261 D2 09 03    				jp			nc,L0309				; Bigger
0661   0264             
0662   0264 FE 30       				cp			$30
0663   0266 D2 75 02    				jp			nc,L0275
0664   0269             
0665   0269 3A 24 20    				ld			a,($2024)				; Explosion timer?
0666   026C A7          				and			a
0667   026D CA 75 02    				jp			z,L0275
0668   0270             
0669   0270 3C          				inc			a
0670   0271 3C          				inc			a
0671   0272 32 24 20    				ld			($2024),a				; Explosion timer?
0672   0275             
0673   0275             L0275:
0674   0275 7E          				ld			a,(hl)					; +5
0675   0276 23          				inc			hl
0676   0277 BE          				cp			(hl)						; +6
0677   0278 D2 9C 02    				jp			nc,L029C
0678   027B             
0679   027B 3E C0       				ld			a,$C0
0680   027D 86          				add			a,(hl)					; +6
0681   027E 77          				ld			(hl),a					; +6
0682   027F 2B          				dec			hl
0683   0280 2B          				dec			hl
0684   0281 34          				inc			(hl)						; +4
0685   0282 34          				inc			(hl)						; +4
0686   0283 7E          				ld			a,(hl)					; +4
0687   0284 23          				inc			hl
0688   0285 23          				inc			hl
0689   0286 23          				inc			hl
0690   0287 CA 96 02    				jp			z,L0296					; +7
0691   028A             
0692   028A 36 68       				ld			(hl),SHOT1&$ff	; Change missile to SHOT1
0693   028C FE FC       				cp			$FC
0694   028E CA 9C 02    				jp			z,L029C
0695   0291             
0696   0291 36 78       				ld			(hl),SHOT2&$ff	; Change missile to SHOT2
0697   0293 C3 9C 02    				jp			L029C
0698   0296             
0699   0296             L0296:
0700   0296 E3          				ex			(sp),hl
0701   0297 7E          				ld			a,(hl)					; Flags 
0702   0298 E6 BF       				and			$BF							; Clear bit 5 
0703   029A 77          				ld			(hl),a
0704   029B E3          				ex			(sp),hl
0705   029C             
0706   029C             L029C:
0707   029C 11 30 20    				ld			de,$2030				; Sprite shift
0708   029F 1A          				ld			a,(de)
0709   02A0 A7          				and			a
0710   02A1 C2 09 03    				jp			nz,L0309				; Shifted
0711   02A4             
0712   02A4 3C          				inc			a
0713   02A5 12          				ld			(de),a					; Sprite shift
0714   02A6 78          				ld			a,b							; What is b?
0715   02A7 E6 10       				and			$10
0716   02A9 CA 09 03    				jp			z,L0309
0717   02AC             
0718   02AC 11 07 00    				ld			de,$0007				; ?? Increment
0719   02AF 19          				add			hl,de
0720   02B0 7E          				ld			a,(hl)
0721   02B1 A7          				and			a
0722   02B2 C2 C3 02    				jp			nz,L02C3
0723   02B5             
0724   02B5 19          				add			hl,de
0725   02B6 78          				ld			a,b
0726   02B7 83          				add			a,e
0727   02B8 47          				ld			b,a
0728   02B9 E6 10       				and			$10
0729   02BB CA 09 03    				jp			z,L0309
0730   02BE             
0731   02BE 7E          				ld			a,(hl)
0732   02BF A7          				and			a
0733   02C0 CA 09 03    				jp			z,L0309
0734   02C3             
0735   02C3             L02C3:
0736   02C3 E3          				ex			(sp),hl
0737   02C4 7E          				ld			a,(hl)					; Flags
0738   02C5 E6 BF       				and			$BF							; Clear bit 5
0739   02C7 77          				ld			(hl),a					; Flags
0740   02C8 E3          				ex			(sp),hl
0741   02C9 78          				ld			a,b
0742   02CA D6 40       				sub			$40
0743   02CC 47          				ld			b,a
0744   02CD DA E0 02    				jp			c,L02E0
0745   02D0             
0746   02D0 21 A1 21    				ld			hl,$21A1				; ??
0747   02D3             L02D3:
0748   02D3 23          				inc			hl
0749   02D4 23          				inc			hl
0750   02D5 7E          				ld			a,(hl)
0751   02D6 A7          				and			a
0752   02D7 C2 D3 02    				jp			nz,L02D3
0753   02DA             
0754   02DA 70          				ld			(hl),b
0755   02DB 23          				inc			hl
0756   02DC 71          				ld			(hl),c
0757   02DD C3 09 03    				jp			L0309
0758   02E0             
0759   02E0             L02E0:
0760   02E0 21 BE 21    				ld			hl,$21BE				; ??
0761   02E3             L02E3:
0762   02E3 23          				inc			hl
0763   02E4 23          				inc			hl
0764   02E5 23          				inc			hl
0765   02E6 7E          				ld			a,(hl)
0766   02E7 A7          				and			a
0767   02E8 C2 E3 02    				jp			nz,L02E3
0768   02EB             
0769   02EB 78          				ld			a,b
0770   02EC C6 20       				add			a,$20
0771   02EE 11 60 21    				ld			de,$2160
0772   02F1 FA F7 02    				jp			m,L02F7
0773   02F4             
0774   02F4 11 82 21    				ld			de,$2182
0775   02F7             L02F7:
0776   02F7 79          				ld			a,c
0777   02F8 0F          				rrca
0778   02F9 0F          				rrca
0779   02FA 0F          				rrca
0780   02FB E6 1F       				and			$1F
0781   02FD 83          				add			a,e
0782   02FE 5F          				ld			e,a
0783   02FF 1A          				ld			a,(de)
0784   0300 A7          				and			a
0785   0301 CA 09 03    				jp			z,L0309
0786   0304 77          				ld			(hl),a
0787   0305 23          				inc			hl
0788   0306 71          				ld			(hl),c
0789   0307 23          				inc			hl
0790   0308 70          				ld			(hl),b
0791   0309             L0309:
0792   0309 37          				scf
0793   030A E1          				pop			hl
0794   030B C9          				ret
0795   030C             
0796   030C             
0797   030C             				;; Erase ship from hl
0798   030C             L030C:
0799   030C 7E          				ld			a,(hl)					; Sprite flags
0800   030D A7          				and			a
0801   030E F0          				ret			p								; D7 clear = inactive
0802   030F             
0803   030F E6 20       				and			$20
0804   0311 C8          				ret			z								; D5 clear = not sunk
0805   0312             
0806   0312 CD 5B 03    				call		L035B						; Get de, bc from bytes 9-d
0807   0315 EB          				ex			de,hl						; hl = read de
0808   0316 41          				ld			b,c
0809   0317             
0810   0317             L0317:
0811   0317 AF          				xor			a
0812   0318 E5          				push		hl							; Store loc
0813   0319             
0814   0319             				;; Clear c bytes at hl
0815   0319             L0319:
0816   0319 77          				ld			(hl),a
0817   031A 23          				inc			hl
0818   031B 0D          				dec			c
0819   031C C2 19 03    				jp			nz,L0319
0820   031F             
0821   031F 11 20 00    				ld			de,$0020				; Line increment
0822   0322 E1          				pop			hl							; Get loc
0823   0323 19          				add			hl,de						; Next line
0824   0324 48          				ld			c,b
0825   0325 7D          				ld			a,l
0826   0326 E6 E0       				and			$E0
0827   0328 C2 17 03    				jp			nz,L0317				; Loop if not end of screen
0828   032B             
0829   032B 7C          				ld			a,h
0830   032C 1F          				rra
0831   032D DA 17 03    				jp			c,L0317					; Loop if not end of screen
0832   0330             
0833   0330 C9          				ret
0834   0331             
0835   0331             				;; Update sprites
0836   0331             L0331:
0837   0331 2A 14 20    				ld			hl,($2014)
0838   0334 06 0A       				ld			b,$0A						; Loop counter = 10 sprites
0839   0336 7D          				ld			a,l
0840   0337 B4          				or			h
0841   0338 C2 3E 03    				jp			nz,L033E
0842   033B             
0843   033B 21 72 20    				ld			hl,$2072				; If 0 reset to $2072
0844   033E             L033E:
0845   033E 11 0D 00    				ld			de,$000D				; Sprite increment
0846   0341             L0341:
0847   0341 19          				add			hl,de
0848   0342 05          				dec			b
0849   0343 C8          				ret			z								; End of loop
0850   0344             
0851   0344 7D          				ld			a,l
0852   0345 FE E7       				cp			$E7							; hl == $20E7?
0853   0347 C2 4D 03    				jp			nz,L034D
0854   034A             
0855   034A 21 7F 20    				ld			hl,$207F				; Reset to $207F
0856   034D             L034D:
0857   034D 7E          				ld			a,(hl)					; X flags
0858   034E A7          				and			a
0859   034F F2 41 03    				jp			p,L0341					; D7 clear = not active
0860   0352             
0861   0352 22 14 20    				ld			($2014),hl
0862   0355 23          				inc			hl
0863   0356 7E          				ld			a,(hl)					; Delta X
0864   0357 23          				inc			hl
0865   0358 86          				add			a,(hl)					; Add to X
0866   0359 77          				ld			(hl),a					; Store X
0867   035A C9          				ret
0868   035B             
0869   035B             				;; Load de, bc from ship data
0870   035B             L035B:
0871   035B 11 09 00    				ld			de,$0009
0872   035E 19          				add			hl,de
0873   035F 5E          				ld			e,(hl)
0874   0360 23          				inc			hl
0875   0361 56          				ld			d,(hl)
0876   0362 23          				inc			hl
0877   0363             GETBC:
0878   0363 4E          				ld			c,(hl)
0879   0364 23          				inc			hl
0880   0365 46          				ld			b,(hl)
0881   0366 23          				inc			hl
0882   0367 C9          				ret
0883   0368             
0884   0368             				;; Called from ISR
0885   0368             L0368:
0886   0368 3A 20 20    				ld			a,($2020)
0887   036B A7          				and			a
0888   036C C0          				ret			nz
0889   036D             
0890   036D 47          				ld			b,a							; No ret, so a=0, b=0
0891   036E 21 05 20    				ld			hl,TIMER				; Counter address
0892   0371 35          				dec			(hl)						; Decrement counter
0893   0372 C2 8E 03    				jp			nz,L038E
0894   0375             
0895   0375             				;; $2003 Counter zero
0896   0375 36 1E       				ld			(hl),$1E				; Reset counter
0897   0377 21 04 20    				ld			hl,GTIME				; Game timer
0898   037A 7E          				ld			a,(hl)
0899   037B A7          				and			a
0900   037C CA 88 03    				jp			z,L0388					; Game over
0901   037F             
0902   037F C6 99       				add			a,$99
0903   0381 27          				daa
0904   0382 77          				ld			(hl),a					; Decrement game timer
0905   0383 C2 88 03    				jp			nz,L0388
0906   0386             
0907   0386 06 01       				ld			b,$01						; set d7 (eventually) = Game over
0908   0388             L0388:
0909   0388 21 10 20    				ld			hl,$2010
0910   038B CD AE 03    				call		L03AE						; Handle $2010 timer d6
0911   038E             
0912   038E             				;; Counter non-zero
0913   038E             L038E:
0914   038E 21 11 20    				ld			hl,$2011 
0915   0391 CD AE 03    				call		L03AE						; Handle $2011 timer d5
0916   0394 21 21 20    				ld			hl,$2021
0917   0397 CD AE 03    				call		L03AE						; Handle $2021 timer d4
0918   039A 23          				inc			hl
0919   039B CD AE 03    				call		L03AE						; Handle $2022 timer d3
0920   039E 23          				inc			hl
0921   039F CD AE 03    				call		L03AE						; Handle $2023 timer d2
0922   03A2 23          				inc			hl
0923   03A3 CD AE 03    				call		L03AE 					; Handle $2024 timer d1
0924   03A6 23          				inc			hl
0925   03A7 CD AE 03    				call		L03AE						; Handle $2025 timer d0
0926   03AA 32 20 20    				ld			($2020),a
0927   03AD C9          				ret
0928   03AE             
0929   03AE             				;; Decrement timer, set bit if 0
0930   03AE             L03AE:
0931   03AE 7E          				ld			a,(hl)
0932   03AF A7          				and			a
0933   03B0 CA B8 03    				jp			z,L03B8
0934   03B3             
0935   03B3 35          				dec			(hl)
0936   03B4 C2 B8 03    				jp			nz,L03B8				; Carry clear since (hl) != 0
0937   03B7             
0938   03B7 37          				scf											; Set carry
0939   03B8             L03B8:
0940   03B8 78          				ld			a,b
0941   03B9 17          				rla											; Shift 0 into b unless carry set above
0942   03BA 47          				ld			b,a
0943   03BB C9          				ret
0944   03BC             
0945   03BC             				;; Called from both interrupt routines
0946   03BC             				;; Updates and redraw "wave"
0947   03BC             L03BC:
0948   03BC 01 27 20    				ld			bc,$2027				; Wave state
0949   03BF 0A          				ld			a,(bc)
0950   03C0 C6 0A       				add			a,$0A						; $00 -> $0A -> $14 -> $1E = $00
0951   03C2 FE 1E       				cp			$1E
0952   03C4 C2 C8 03    				jp			nz,L03C8
0953   03C7             
0954   03C7 AF          				xor			a								; a=0
0955   03C8             L03C8:
0956   03C8 02          				ld			(bc),a					; Store state
0957   03C9 03          				inc			bc							; $2028
0958   03CA 5F          				ld			e,a
0959   03CB 16 00       				ld			d,$00
0960   03CD 21 D3 0B    				ld			hl,WATER0				; Start of waves
0961   03D0 19          				add			hl,de
0962   03D1 EB          				ex			de,hl						; de = wave table entry
0963   03D2 0A          				ld			a,(bc)					; Get state
0964   03D3 3C          				inc			a
0965   03D4 E6 1F       				and			$1F							; Loops $00 to $1F
0966   03D6 02          				ld			(bc),a					; Save state
0967   03D7             
0968   03D7             				;; Screen location
0969   03D7 21 E0 27    				ld			hl,$27E0
0970   03DA 85          				add			a,l
0971   03DB 6F          				ld			l,a
0972   03DC 01 20 00    				ld			bc,$0020				; Row increment
0973   03DF             L03DF:
0974   03DF 1A          				ld			a,(de)					; Get byte
0975   03E0 13          				inc			de
0976   03E1 77          				ld			(hl),a					; Write byte
0977   03E2 09          				add			hl,bc						; Next row
0978   03E3 7D          				ld			a,l
0979   03E4 E6 E0       				and			$E0
0980   03E6 FE 60       				cp			$60							; Only 4 rows used?
0981   03E8 C2 DF 03    				jp			nz,L03DF				; Loop
0982   03EB             
0983   03EB C9          				ret
0984   03EC             
0985   03EC             				;; Test mode
0986   03EC             L03EC:
0987   03EC 21 00 00    				ld			hl,L0000				; Start address
0988   03EF 11 00 00    				ld			de,$0000				; Offset 0
0989   03F2~            #IF OLDTEST
0990   03F2~            				ld			c,$02						; 2 pages
0991   03F2             #ELSE
0992   03F2 0E 04       				ld			c,$04						; 4 pages
0993   03F4             #ENDIF
0994   03F4             
0995   03F4             L03F4:
0996   03F4 AF          				xor			a								; Clear checksum
0997   03F5             L03F5:
0998   03F5 86          				add			a,(hl)
0999   03F6 23          				inc			hl
1000   03F7 47          				ld			b,a
1001   03F8 79          				ld			a,c
1002   03F9 BC          				cp			h
1003   03FA 78          				ld			a,b
1004   03FB C2 F5 03    				jp			nz,L03F5				; Loop
1005   03FE             
1006   03FE E5          				push		hl							; Push address
1007   03FF 21 F8 0F    				ld			hl,CHKS					; Checksum table
1008   0402 19          				add			hl,de
1009   0403 BE          				cp			(hl)						; Compare checksum
1010   0404 3E 40       				ld			a,$40						; (Space)
1011   0406 CA 0E 04    				jp			z,L040E					; Checksum good!
1012   0409             
1013   0409 21 FC 0F    				ld			hl,ERRS					; Bad checksum table
1014   040C 19          				add			hl,de
1015   040D 7E          				ld			a,(hl)
1016   040E             
1017   040E             L040E:
1018   040E 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1019   0411 19          				add			hl,de
1020   0412 77          				ld			(hl),a					; Store char
1021   0413             
1022   0413 E1          				pop			hl							; Get address back
1023   0414 13          				inc			de							; Next rom
1024   0415 0C          				inc			c								; $02 more pages
1025   0416 0C          				inc			c
1026   0417~            #IF OLDTEST
1027   0417~            				ld			a,$12
1028   0417             #ELSE
1029   0417 0C          				inc			c								; $02 more pages
1030   0418 0C          				inc			c
1031   0419 3E 14       				ld			a,$14
1032   041B             #ENDIF
1033   041B B9          				cp			c
1034   041C C2 F4 03    				jp			nz,L03F4				; Loop if not done
1035   041F             
1036   041F 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1037   0422 11 08 30    				ld			de,$3008				; Location
1038   0425~            #IF OLDTEST
1039   0425~            				ld			a,$08						; Length
1040   0425             #ELSE
1041   0425 3E 04       				ld			a,$04						; Length
1042   0427             #ENDIF
1043   0427 CD 10 0B    				call		L0B30						; Draw string hl @ de, length a
1044   042A 76          				halt										; Stop!
1045   042B             
1046   042B~            #IF OLDTEST
1047   042B~            				;; $200 block checksums
1048   042B~            L0429:
1049   042B~            CHKS:
1050   042B~            				.db			$8D, $79, $00, $1F, $58, $6D, $EA, $C5	; Checksums
1051   042B~            
1052   042B~            				.db			$2A							; Patch byte for $400 checksum
1053   042B~            
1054   042B~            				;; Error locations
1055   042B~            L0432:
1056   042B~            ERRS:
1057   042B~            				.db			$48, $48, $47, $47, $46, $46, $45, $45	; HHGGFFEE
1058   042B             #ENDIF
1059   042B             
1060   042B             				;; Initial jump
1061   042B             L043A:
1062   042B CD A1 08    				call		 L08A2					; (End of game routine)
1063   042E DB 02       				in			a,($02)					; IN2
1064   0430 E6 E0       				and			$E0							; Test mode bits
1065   0432 FE E0       				cp			$E0
1066   0434 CC EC 03    				call		z,L03EC					; Go to test mode
1067   0437             
1068   0437             				;; Clear $2002-$200a
1069   0437 21 04 20    				ld			hl,GTIME
1070   043A             #IF SC3DIG
1071   043A 3E 07       				ld			a,$07
1072   043C~            #ELSE
1073   043C~            				ld			a,$09
1074   043C             #ENDIF
1075   043C 06 00       				ld			b,$00
1076   043E             L044D:
1077   043E 70          				ld			(hl),b
1078   043F 23          				inc			hl
1079   0440 3D          				dec			a
1080   0441 C2 3E 04    				jp			nz,L044D
1081   0444             
1082   0444             #IF SC3DIG
1083   0444 CD C7 08    				call		CHKFP
1084   0447             #ENDIF
1085   0447             
1086   0447 21 0D 09    				ld			hl,L0929				; Attract mode loop
1087   044A 22 00 20    				ld			($2000),hl
1088   044D             
1089   044D             L0459:
1090   044D FB          				ei											; Enable interrupts
1091   044E 21 4D 04    				ld			hl,L0459				; Return address
1092   0451 E5          				push		hl
1093   0452 2A 00 20    				ld			hl,($2000)
1094   0455 7E          				ld			a,(hl)					; Get command
1095   0456 A7          				and			a
1096   0457 C2 71 04    				jp			nz,L047D				; Non-zero command
1097   045A             
1098   045A             				;; a=(($2000)) == 0
1099   045A             				;; Command 0
1100   045A CD 9B 06    				call		L06A4
1101   045D CD B3 04    				call		L04CE
1102   0460 CD A4 04    				call		L04BF
1103   0463 3A 04 20    				ld			a,(GTIME)				; Game timer
1104   0466 A7          				and			a
1105   0467 C8          				ret			z								; Skip rest if game over
1106   0468             
1107   0468 CD 46 07    				call		L074C
1108   046B CD B7 08    				call		L08B8
1109   046E C3 80 04    				jp			L048C
1110   0471             
1111   0471             
1112   0471             				;; Do command from jump table
1113   0471             				;; a=(($2000)) != 0
1114   0471             L047D:
1115   0471 23          				inc			hl
1116   0472 EB          				ex			de,hl						; ($2000+1) --> de
1117   0473 21 C6 09    				ld			hl,TBLJMP-2			; Jump table
1118   0476 07          				rlca										; a = ($2000)<<1
1119   0477 4F          				ld			c,a							; c = ($2000)<<1
1120   0478 06 00       				ld			b,$00
1121   047A 09          				add			hl,bc						; hl = L09e8 + ($2000)<<1
1122   047B 7E          				ld			a,(hl)
1123   047C 23          				inc			hl
1124   047D 66          				ld			h,(hl)
1125   047E 6F          				ld			l,a
1126   047F E9          				jp			(hl)
1127   0480             
1128   0480             L048C:
1129   0480 3A 05 20    				ld			a,(TIMER)
1130   0483 FE 1D       				cp			$1D
1131   0485 F8          				ret			m								; Only update once per loop
1132   0486             
1133   0486             				;; Update game time
1134   0486 01 04 20    				ld			bc,GTIME				; Game time
1135   0489 11 E8 21    				ld			de,TXTBUF				; Text buffer
1136   048C             
1137   048C             #IF SC3DIG
1138   048C CD 70 0A    				call		BCD2_0					; BCD to buffer
1139   048F             
1140   048F 3E 2B       				ld			a,$2B						; Space
1141   0491 12          				ld			(de),a					; Store
1142   0492 13          				inc			de
1143   0493             
1144   0493 01 12 20    				ld			bc,PSCORE				; Player score
1145   0496 CD 8E 0A    				call		BCD300					; 3 nybble BCD+00 to string
1146   0499~            #ELSE
1147   0499~            				call		L0A82						; BCD to buffer
1148   0499~            				ex			de,hl
1149   0499~            				call		L0A7A
1150   0499~            
1151   0499~            				inc			hl
1152   0499~            				ld			(hl),$2C				; Space
1153   0499~            				inc			hl
1154   0499~            				ex			de,hl
1155   0499~            				ld			bc,PSCORE				; Player score
1156   0499~            
1157   0499~            				call		L0A82						; BCD to buffer
1158   0499~            				ex			de,hl
1159   0499~            				call		L0A7A
1160   0499~            				inc			hl
1161   0499~            				ld			(hl),$30				; Postpend zero
1162   0499~            				inc			hl
1163   0499~            				ld			(hl),$30				; Postpend zero
1164   0499             #ENDIF
1165   0499             
1166   0499 21 E8 21    				ld			hl,TXTBUF				; Text buffer
1167   049C 11 2F 3E    				ld			de,$3E2F				; Screen location
1168   049F             #IF SC3DIG
1169   049F 3E 07       				ld			a,$07						; Length
1170   04A1~            #ELSE
1171   04A1~            				ld			a,$06						; Length
1172   04A1             #ENDIF
1173   04A1 C3 10 0B    				jp			L0B30						; Draw string hl @ de, length a
1174   04A4             
1175   04A4             L04BF:
1176   04A4 21 2A 20    				ld			hl,$202A				; Duplicate game time
1177   04A7 7E          				ld			a,(hl)
1178   04A8 A7          				and			a
1179   04A9 C8          				ret			z								; Already zero
1180   04AA             
1181   04AA 36 00       				ld			(hl),$00				; Clear
1182   04AC 21 84 09    				ld			hl,L09A6				; Game over mode
1183   04AF 22 00 20    				ld			($2000),hl			; Write mode
1184   04B2 C9          				ret
1185   04B3             
1186   04B3             				;; Choose subroutine based on $2020 bits
1187   04B3             L04CE:
1188   04B3 21 20 20    				ld			hl,$2020
1189   04B6 7E          				ld			a,(hl)
1190   04B7 A7          				and			a
1191   04B8 C8          				ret			z								; Nothing to do
1192   04B9 36 00       				ld			(hl),$00				; Clear all bits
1193   04BB             
1194   04BB 1F          				rra
1195   04BC DC F8 05    				call		c,L0601					; Bit 0 set = Clear explosion lights
1196   04BF             
1197   04BF 1F          				rra
1198   04C0 DC 05 06    				call		c,L060E					; Bit 1 set = Clear explosion on screen
1199   04C3             
1200   04C3 1F          				rra
1201   04C4 DC DC 04    				call		c,L04F7					; Bit 2 set = Trigger bit 2 sound
1202   04C7             
1203   04C7 1F          				rra
1204   04C8 DC 2B 06    				call		c,L0634					; Bit 3 set = Launch new ship
1205   04CB             
1206   04CB 1F          				rra
1207   04CC DC E0 05    				call		c,L05E9					; Bit 4 set = Reload torpedos
1208   04CF             
1209   04CF 1F          				rra
1210   04D0 DC 6A 05    				call		c,L0573					; Bit 5 set = Increment $2000 address
1211   04D3             
1212   04D3 1F          				rra
1213   04D4 DC 63 05    				call		c,L056C					; Bit 6 set = Initialize $2000 address
1214   04D7             
1215   04D7 1F          				rra
1216   04D8 DC F6 04    				call		c,L0511					; Bit 7 set = Game time over
1217   04DB C9          				ret
1218   04DC             
1219   04DC             
1220   04DC             				;; Bit 2 set on $2020
1221   04DC             				;; Trigger bit 2 sound and set timers
1222   04DC             L04F7:
1223   04DC F5          				push		af
1224   04DD 21 26 20    				ld			hl,$2026
1225   04E0 7E          				ld			a,(hl)
1226   04E1 A7          				and			a
1227   04E2 CA F4 04    				jp			z,L050F					; Do nothing
1228   04E5             
1229   04E5 35          				dec			(hl)
1230   04E6 3E 04       				ld			a,$04						; Sound bit 2
1231   04E8 D3 05       				out			($05),a					; Audio outputs
1232   04EA 3E 19       				ld			a,$19
1233   04EC 32 23 20    				ld			($2023),a				; Set timer
1234   04EF 3E 0F       				ld			a,$0F
1235   04F1 32 25 20    				ld			(ATIMER),a			; Set timer
1236   04F4             L050F:
1237   04F4 F1          				pop  af
1238   04F5 C9          				ret
1239   04F6             
1240   04F6             
1241   04F6             				;; Bit 7 set on $2020
1242   04F6             L0511:
1243   04F6 21 2E 20    				ld			hl,$202E
1244   04F9 7E          				ld			a,(hl)
1245   04FA A7          				and			a
1246   04FB C2 28 05    				jp			nz,NOEXT				; Jump if already extended time
1247   04FE             
1248   04FE 36 01       				ld			(hl),$01				; Only 1 extend
1249   0500 3A 07 20    				ld			a,(IN1)					; Last IN1
1250   0503 0F          				rrca
1251   0504 E6 70       				and			$70							; Base score for extended time (00 = none)
1252   0506 CA 28 05    				jp			z,NOEXT					; Jump if no extended time
1253   0509             
1254   0509 C6 09       				add			a,$09						; $20 dip = $19(00) score
1255   050B 21 12 20    				ld			hl,PSCORE				; Player score
1256   050E BE          				cp			(hl)
1257   050F             
1258   050F             #IF SC3DIG
1259   050F DA 18 05    				jp			c,DOEXT					; Jump if score higher than metric
1260   0512             
1261   0512             				;; Extended score if >10k
1262   0512 23          				inc			hl							; Player score hi
1263   0513 7E          				ld			a,(hl)
1264   0514 A7          				and			a
1265   0515 CA 28 05    				jp			z,NOEXT
1266   0518~            #ELSE
1267   0518~            				jp			nc,NOEXT				; Jump if score lower than metric
1268   0518             #ENDIF
1269   0518             
1270   0518             DOEXT:
1271   0518 3E 20       				ld			a,$20						; 20 extra seconds
1272   051A 32 04 20    				ld			(GTIME),a				; Set game time
1273   051D 21 14 0F    				ld			hl,LTEXT				; EXTENDED_TIME
1274   0520 11 03 3C    				ld			de,$3C03				; Location
1275   0523 3E 0C       				ld			a,$0C						; Length
1276   0525 C3 10 0B    				jp			L0B30						; Draw string hl @ de, length a
1277   0528             
1278   0528             L053D:
1279   0528             NOEXT:
1280   0528 21 C9 20    				ld			hl,TORPS-TINC		; (Offset) Torp base
1281   052B 01 1E 00    				ld			bc,TINC					; Torp increment
1282   052E             L0543:
1283   052E 09          				add			hl,bc
1284   052F 7D          				ld			a,l
1285   0530 FE 5F       				cp			$5F							; LSB past end of torps
1286   0532 CA 47 05    				jp			z,L055C					; Done with torps
1287   0535             
1288   0535 7E          				ld			a,(hl)					; Load flags
1289   0536 A7          				and			a
1290   0537 F2 2E 05    				jp			p,L0543					; Loop if not active
1291   053A             
1292   053A AF          				xor			a
1293   053B 32 21 20    				ld			($2021),a
1294   053E 32 2D 20    				ld			($202D),a				; Torpedo status
1295   0541 3E 01       				ld			a,$01
1296   0543 32 04 20    				ld			(GTIME),a				; Why are we adding a second?
1297   0546 C9          				ret
1298   0547             
1299   0547             				;; Check if new high score
1300   0547             L055C:
1301   0547 21 0D 09    				ld			hl,L0929
1302   054A 22 00 20    				ld			($2000),hl			; Next command
1303   054D             
1304   054D             #IF SC3DIG
1305   054D 3A 13 20    				ld			a,(PSCORE+1)		; Score hi byte
1306   0550 21 03 20    				ld			hl,HSCORE+1			; High  hi byte
1307   0553 BE          				cp			(hl)
1308   0554 D8          				ret			c								; Score lower
1309   0555             
1310   0555 77          				ld			(hl),a					; Write new hi byte
1311   0556             #ENDIF
1312   0556             
1313   0556 3A 12 20    				ld			a,(PSCORE)			; Player score
1314   0559 21 02 20    				ld			hl,HSCORE				; High score
1315   055C             
1316   055C             #IF SC3DIG
1317   055C C2 61 05    				jp			nz,HSDOLO				; Higher hi byte -> write low
1318   055F             #ENDIF
1319   055F BE          				cp			(hl)
1320   0560 D8          				ret			c
1321   0561             
1322   0561             HSDOLO:
1323   0561 77          				ld			(hl),a					; Write new score
1324   0562 C9          				ret
1325   0563             
1326   0563             
1327   0563             				;; Bit 6 set on $2020
1328   0563             				;; Initialize $2000 address
1329   0563             L056C:
1330   0563 21 43 09    				ld			hl,L0963				; End of game
1331   0566 22 00 20    				ld			($2000),hl
1332   0569 C9          				ret
1333   056A             
1334   056A             				;; Bit 5 set on $2020
1335   056A             				;; Increment $2000 address
1336   056A             L0573:
1337   056A 2A 00 20    				ld			hl,($2000)			; After 2011 timer?
1338   056D 23          				inc			hl
1339   056E 22 00 20    				ld			($2000),hl
1340   0571 C9          				ret
1341   0572             
1342   0572             
1343   0572             				;; Handle change in fire button
1344   0572             HFIRE:
1345   0572 C8          				ret			z								; Not pressed
1346   0573             
1347   0573 3A 04 20    				ld			a,(GTIME)				; Game timer
1348   0576 A7          				and			a
1349   0577 C8          				ret			z								; Not in game mode
1350   0578             
1351   0578 3A 21 20    				ld			a,($2021)				; Timer between torps
1352   057B A7          				and			a
1353   057C C0          				ret			nz							; Missile already active? 
1354   057D             
1355   057D 21 2D 20    				ld			hl,$202D				; Torpedo status
1356   0580 7E          				ld			a,(hl)
1357   0581 E6 1F       				and			$1F
1358   0583 C8          				ret			z								; Reloading...
1359   0584             
1360   0584 7E          				ld			a,(hl)					; Torpedo status
1361   0585 E6 0F       				and			$0F							; Mask torp bits
1362   0587 1F          				rra
1363   0588 06 20       				ld			b,$20						; Bit 5 = Reload
1364   058A A7          				and			a
1365   058B CA 90 05    				jp			z,L0599
1366   058E             
1367   058E 06 10       				ld			b,$10						; Bit 4 = Ready
1368   0590             L0599:
1369   0590 B0          				or			b
1370   0591 77          				ld			(hl),a
1371   0592 D3 02       				out			($02),a					; Torpedo display
1372   0594 21 21 20    				ld			hl,$2021				; Timer between torps
1373   0597 36 08       				ld			(hl),$08				; Short timer between shots
1374   0599 E6 10       				and			$10
1375   059B C2 A0 05    				jp			nz,L05A9
1376   059E             
1377   059E 36 3C       				ld			(hl),$3C				; Long timer to reload
1378   05A0             L05A9:
1379   05A0 3E 02       				ld			a,$02						; Sound bit 1 
1380   05A2 D3 05       				out			($05),a					; Audio outputs
1381   05A4 3E 0F       				ld			a,$0F
1382   05A6 32 25 20    				ld			(ATIMER),a			; Set timer
1383   05A9             
1384   05A9             				;; Find empty slot
1385   05A9 21 C9 20    				ld			hl,TORPS-TINC 	; (Offset) Torp base
1386   05AC 11 1E 00    				ld			de,TINC 				; Torpedo increment
1387   05AF             L05B8:
1388   05AF 19          				add			hl,de
1389   05B0 7E          				ld			a,(hl)
1390   05B1 A7          				and			a
1391   05B2 FA AF 05    				jp			m,L05B8					; D7 high = used, try again
1392   05B5             
1393   05B5             				;; New torpedo
1394   05B5 11 08 00    				ld			de,$0008
1395   05B8 19          				add			hl,de						; Move ahead in sprite table
1396   05B9 36 0E       				ld			(hl),SHOT0>>8		; SHOT0 MSB
1397   05BB 2B          				dec			 hl
1398   05BC 36 55       				ld			(hl),SHOT0&$FF	; SHOT0 LSB
1399   05BE 2B          				dec			hl
1400   05BF 36 9C       				ld			(hl),$9C				; ??
1401   05C1 2B          				dec			hl
1402   05C2 36 E0       				ld			(hl),$E0				; Y pos
1403   05C4 2B          				dec			hl
1404   05C5 36 FA       				ld			(hl),$FA				; Delta y
1405   05C7 2B          				dec			hl
1406   05C8 2B          				dec			hl
1407   05C9             
1408   05C9             				;; Caculate shot X location
1409   05C9 11 3B 0F    				ld			de,TGREY				; Grey code table?
1410   05CC EB          				ex			de,hl
1411   05CD 3A 08 20    				ld			a,(IN0)					; Last IN0
1412   05D0 E6 1F       				and			$1F							; Mask periscope bits
1413   05D2 4F          				ld			c,a
1414   05D3 06 00       				ld			b,$00
1415   05D5 09          				add			hl,bc
1416   05D6 7E          				ld			a,(hl)					; Location from grey code
1417   05D7 EB          				ex			de,hl
1418   05D8             
1419   05D8 77          				ld			(hl),a					; X Pos
1420   05D9 2B          				dec			hl
1421   05DA 36 00       				ld			(hl),$00				; Delta X
1422   05DC 2B          				dec			hl
1423   05DD 36 C0       				ld			(hl),$C0				; Set active
1424   05DF C9          				ret
1425   05E0             
1426   05E0             
1427   05E0             				;; Bit 4 set on $2020
1428   05E0             				;; Reset torpedo status after reload
1429   05E0             L05E9:
1430   05E0 F5          				push		af
1431   05E1 21 2D 20    				ld			hl,$202D				; Torpedo status
1432   05E4 7E          				ld			a,(hl)
1433   05E5 E6 10       				and			$10							; Check ready
1434   05E7 C2 F6 05    				jp			nz,L05FF
1435   05EA             
1436   05EA 3E 1F       				ld			a,$1F						; Reset torpedo status
1437   05EC D3 02       				out			($02),a					; Torpedo lamps
1438   05EE 77          				ld			(hl),a
1439   05EF 3E 08       				ld			a,$08						; Sound bit 3
1440   05F1 D3 05       				out			($05),a					; Audio outputs
1441   05F3 CD E2 07    				call		L07EA						; Redraw mines
1442   05F6             
1443   05F6             L05FF:
1444   05F6 F1          				pop			af
1445   05F7 C9          				ret
1446   05F8             
1447   05F8             				;; Bit 0 set on $2020
1448   05F8             				;; Clear explosions
1449   05F8             L0601:
1450   05F8 F5          				push		af
1451   05F9 AF          				xor			a								; Clear sounds
1452   05FA D3 05       				out			($05),a					; Audio outputs
1453   05FC D3 01       				out			($01),a					; Explosion lamp
1454   05FE 3A 2D 20    				ld			a,($202D)				; Torpedo status
1455   0601 D3 02       				out			($02),a					; Periscope lamp
1456   0603 F1          				pop			af
1457   0604 C9          				ret
1458   0605             
1459   0605             
1460   0605             				;; Bit 1 set on $2020
1461   0605             				;; Clear sprites?
1462   0605             L060E:
1463   0605 F5          				push		af
1464   0606 21 F0 21    				ld			hl,HMISS
1465   0609             L0612:
1466   0609 7E          				ld			a,(hl)
1467   060A A7          				and			a
1468   060B CA 29 06    				jp			z,L0632					; Already cleared
1469   060E             
1470   060E             				;; (hl) -> de, clear (hl)
1471   060E 36 00       				ld			(hl),$00
1472   0610 23          				inc			hl
1473   0611 57          				ld			d,a
1474   0612 5E          				ld			e,(hl)
1475   0613 36 00       				ld			(hl),$00
1476   0615 23          				inc			hl
1477   0616             
1478   0616 FE 2C       				cp			$2C
1479   0618 01 03 0A    				ld			bc,$0A03				; 10 x 3 byte area  (after ship hit)
1480   061B DA 21 06    				jp			c,L062A
1481   061E             
1482   061E 01 05 20    				ld			bc,$2005				; 32 x 5 byte area  (after mine hit)
1483   0621             L062A:
1484   0621 EB          				ex			de,hl
1485   0622 CD 1B 0A    				call		L0A3F						; Clear area at hl
1486   0625 EB          				ex			de,hl
1487   0626 C3 09 06    				jp			L0612						; Loop
1488   0629             L0632:
1489   0629 F1          				pop			af
1490   062A C9          				ret
1491   062B             
1492   062B             				;; Bit 3 set on $2020
1493   062B             				;; Launch new ship
1494   062B             L0634:
1495   062B F5          				push		af
1496   062C 3A 05 20    				ld			a,(TIMER)
1497   062F E6 0F       				and			$0F							; Mask low 4 bits
1498   0631 F6 50       				or			$50							; Set bits 6,4
1499   0633 32 22 20    				ld			($2022),a				; Set counter
1500   0636             
1501   0636 01 29 20    				ld			bc,$2029				; Ship type loc
1502   0639 0A          				ld			a,(bc)					; Get ship index
1503   063A 3C          				inc			a								; Increment
1504   063B FE 07       				cp			$07							; Max = 6
1505   063D C2 41 06    				jp			nz,L064A
1506   0640             
1507   0640 AF          				xor			a								; Set to 0
1508   0641             L064A:
1509   0641 02          				ld			(bc),a					; Store ship index
1510   0642             
1511   0642 21 BB 0F    				ld			hl,L0FDE				; Ship type table
1512   0645 85          				add			a,l
1513   0646 6F          				ld			l,a
1514   0647 7E          				ld			a,(hl)					; Get ship type
1515   0648 47          				ld			b,a							; Stash in b
1516   0649 FE 06       				cp			$06							; Is small / fast?
1517   064B C2 62 06    				jp			nz,L066B				; No = jump
1518   064E             
1519   064E 3E 04       				ld			a,$04						; Sound bit 2
1520   0650 D3 05       				out			($05),a					; Audio outputs
1521   0652 3E 19       				ld			a,$19
1522   0654 32 23 20    				ld			($2023),a				; Set timer
1523   0657 3E 02       				ld			a,$02
1524   0659 32 26 20    				ld			($2026),a				; Set timer
1525   065C 3E 0F       				ld			a,$0F
1526   065E 32 25 20    				ld			(ATIMER),a			; Set timer
1527   0661 78          				ld			a,b							; Ship type
1528   0662             
1529   0662             				;; hl = $202c + $0d * a 
1530   0662             L066B:
1531   0662 21 2C 20    				ld			hl,$202C
1532   0665 11 0D 00    				ld			de,$000D				; Sprite increment
1533   0668             L0671:
1534   0668 19          				add			hl,de
1535   0669 3D          				dec			a
1536   066A C2 68 06    				jp			nz,L0671
1537   066D             
1538   066D 78          				ld			a,b
1539   066E EB          				ex			de,hl
1540   066F             
1541   066F 21 1E 20    				ld			hl,$201E				; Current ship move index
1542   0672 7E          				ld			a,(hl)					; Read ship move index
1543   0673 34          				inc			(hl)						; Increment ship move index
1544   0674 21 5B 0F    				ld			hl,L0F7E				; Even ship move table?
1545   0677 1F          				rra
1546   0678 D2 82 06    				jp			nc,L068B
1547   067B             
1548   067B 21 8B 0F    				ld			hl,L0FAE				; Odd ship move table?
1549   067E 78          				ld			a,b
1550   067F F6 10       				or			$10							; Set direction bit
1551   0681 47          				ld			b,a
1552   0682             
1553   0682             L068B:
1554   0682 78          				ld			a,b
1555   0683             
1556   0683             				;; Index into ship type table
1557   0683 3D          				dec  a									; a = 0-5 / 10-15
1558   0684 07          				rlca
1559   0685 07          				rlca
1560   0686 07          				rlca
1561   0687 E6 38       				and			$38							; Clear low bits
1562   0689 85          				add			a,l
1563   068A 6F          				ld			l,a
1564   068B             
1565   068B             				;; Copy ship table data to sprite block
1566   068B 0E 08       				ld   c,$08
1567   068D             L0696:
1568   068D 7E          				ld			a,(hl)
1569   068E 23          				inc			hl
1570   068F 12          				ld			(de),a
1571   0690 1B          				dec			de
1572   0691 0D          				dec			c
1573   0692 C2 8D 06    				jp			nz,L0696
1574   0695             
1575   0695 78          				ld			a,b
1576   0696 F6 C0       				or			$C0							; B7 = moving, B6 = don't clear, B5 = ??
1577   0698 12          				ld			(de),a					; Store ship type?
1578   0699 F1          				pop			af
1579   069A C9          				ret
1580   069B             
1581   069B             				;; Called when (($2000)) == 0
1582   069B             L06A4:
1583   069B 21 C1 21    				ld			hl,$21C1				; Start of sprite index list
1584   069E             L06A7:
1585   069E 7E          				ld			a,(hl)
1586   069F A7          				and			a
1587   06A0 C8          				ret			z								; Done if this sprite inactive
1588   06A1             
1589   06A1 36 00       				ld			(hl),$00				; Clear active flag
1590   06A3 23          				inc			hl
1591   06A4 56          				ld			d,(hl)					; Get index into sprite table
1592   06A5 E5          				push		hl
1593   06A6             
1594   06A6             				;; hl = $2024 + $d * a
1595   06A6 21 24 20    				ld			hl,SHIPA0-SINC	; No 0 element
1596   06A9 01 0D 00    				ld			bc,$000D				; Sprite entry length
1597   06AC             L06B5:
1598   06AC 09          				add			hl,bc
1599   06AD 3D          				dec			a
1600   06AE C2 AC 06    				jp			nz,L06B5
1601   06B1             
1602   06B1 01 08 00    				ld			bc,$0008				; Middle of sprite table and work back
1603   06B4 09          				add			hl,bc
1604   06B5             
1605   06B5             				;; Change sprite to sinking ship
1606   06B5 36 0E       				ld			(hl),SINK>>8		; SINK MSB
1607   06B7 2B          				dec			hl
1608   06B8 36 35       				ld			(hl),SINK&$FF		; SINK LSB
1609   06BA 2B          				dec			hl
1610   06BB 2B          				dec			hl							; hl = Y pos
1611   06BC 2B          				dec			hl
1612   06BD 36 01       				ld			(hl),$01				; Delta y (?)
1613   06BF 2B          				dec			hl							; hl = Y flags
1614   06C0 2B          				dec			hl
1615   06C1 72          				ld			(hl),d					; X position
1616   06C2 2B          				dec			hl
1617   06C3 36 00       				ld			(hl),$00				; Delta x (?)
1618   06C5 2B          				dec			hl
1619   06C6 46          				ld			b,(hl)					; Get flags + ship type
1620   06C7 36 E0       				ld			(hl),$E0				; Flags
1621   06C9             
1622   06C9 3A 04 20    				ld			a,(GTIME)				; Game time
1623   06CC A7          				and			a
1624   06CD C2 D2 06    				jp			nz,L06DB				; Add score if time is left
1625   06D0 E1          				pop			hl
1626   06D1 C9          				ret
1627   06D2             
1628   06D2             
1629   06D2             				;; Score sunk ship
1630   06D2             L06DB:
1631   06D2 78          				ld			a,b
1632   06D3             
1633   06D3             				;; Draw sunk ship score
1634   06D3 01 34 0F    				ld			bc,TSCORE-1			; Ship hit score table
1635   06D6 E6 07       				and			$07
1636   06D8 81          				add			a,c
1637   06D9 4F          				ld			c,a							; bc = index into table
1638   06DA             
1639   06DA 11 E8 21    				ld			de,TXTBUF				; Text buffer
1640   06DD             
1641   06DD             #IF SC3DIG
1642   06DD CD 67 0A    				call		BCD2__					; BCD to string
1643   06E0 CD 91 0A    				call		ADD00						; Append 00
1644   06E3~            #ELSE
1645   06E3~            				call		L0A82						; BCD to buffer
1646   06E3~            				ld			a,$30
1647   06E3~            				ld			(de),a					; Append 0
1648   06E3~            				inc			de
1649   06E3~            				ld			(de),a					; Append 0
1650   06E3             #ENDIF
1651   06E3             
1652   06E3 0A          				ld			a,(bc)
1653   06E4 21 12 20    				ld			hl,PSCORE				; Player score
1654   06E7 86          				add			a,(hl)					; Add a
1655   06E8 27          				daa
1656   06E9 77          				ld			(hl),a					; Store
1657   06EA             
1658   06EA             #IF SC3DIG
1659   06EA D2 EF 06    				jp			nc,NOCARRY
1660   06ED 23          				inc			hl
1661   06EE 34          				inc			(hl)						; Increment hi byte
1662   06EF             
1663   06EF             NOCARRY:
1664   06EF             #ENDIF
1665   06EF E1          				pop			hl
1666   06F0 4E          				ld			c,(hl)					; Get bc from table
1667   06F1 23          				inc			hl
1668   06F2 46          				ld			b,(hl)
1669   06F3 23          				inc			hl
1670   06F4             
1671   06F4 E5          				push		hl
1672   06F5 78          				ld			a,b
1673   06F6 C6 20       				add			a,$20
1674   06F8 21 A0 09    				ld			hl,L09C2				; Explosion lamp 0-7 table
1675   06FB DA 01 07    				jp			c,L0707
1676   06FE             
1677   06FE 21 98 09    				ld			hl,L09BA				; Explosion lamp 8-F table
1678   0701             L0707:
1679   0701             				;; Use 3 MSBs of c to index into table
1680   0701 79          				ld			a,c
1681   0702 07          				rlca
1682   0703 07          				rlca
1683   0704 07          				rlca
1684   0705 E6 07       				and			$07
1685   0707 85          				add			a,l
1686   0708 6F          				ld			l,a
1687   0709 7E          				ld			a,(hl)
1688   070A D3 01       				out			($01),a					; Explosion lamp
1689   070C 3E 01       				ld			a,$01						; Sound bit 0
1690   070E D3 05       				out			($05),a					; Audio write
1691   0710 3E 1E       				ld			a,$1E
1692   0712 32 25 20    				ld			(ATIMER),a			; Set audio timer
1693   0715             
1694   0715             				;; Calculate score draw location
1695   0715 78          				ld			a,b
1696   0716 16 24       				ld			d,$24
1697   0718 C6 20       				add			a,$20
1698   071A FA 1F 07    				jp			m,L0725
1699   071D 16 28       				ld			d,$28
1700   071F             L0725:
1701   071F 79          				ld			a,c
1702   0720 0F          				rrca
1703   0721 0F          				rrca
1704   0722 0F          				rrca
1705   0723 E6 1F       				and			$1F
1706   0725 CA 29 07    				jp			z,L072F
1707   0728 3D          				dec			a
1708   0729             L072F:
1709   0729 FE 1E       				cp			$1E
1710   072B C2 2F 07    				jp			nz,L0735
1711   072E 3D          				dec			a
1712   072F             L0735:
1713   072F F6 A0       				or			$A0							; Set bits 7,5 
1714   0731 5F          				ld			e,a
1715   0732             
1716   0732 CD D3 07    				call		L07DB						; Find first de?
1717   0735             
1718   0735 3E 2D       				ld			a,$2D
1719   0737 32 24 20    				ld			($2024),a				; Set timer (for showing score)
1720   073A 21 E9 21    				ld			hl,TXTBUF+1			; Buffer?
1721   073D 3E 03       				ld			a,$03						; Length
1722   073F CD 10 0B    				call		L0B30						; Draw string hl @ de, length a
1723   0742             
1724   0742 E1          				pop			hl
1725   0743 C3 9E 06    				jp			L06A7
1726   0746             
1727   0746             L074C:
1728   0746 21 A3 21    				ld			hl,$21A3				; ??
1729   0749             L074F:
1730   0749 7E          				ld			a,(hl)
1731   074A A7          				and			a
1732   074B C8          				ret			z								; Skip if zero
1733   074C             
1734   074C 23          				inc			hl							; $21A4
1735   074D C6 10       				add			a,$10
1736   074F 07          				rlca										; 65432107
1737   0750 07          				rlca										; 54321076
1738   0751 07          				rlca										; 43210765
1739   0752 E6 07       				and			$07							; Old 3 MSBs
1740   0754             
1741   0754             				;; hl=$2067 + (2*a*$0D)
1742   0754 11 67 20    				ld			de,MINES + $02 - (2*MINC)	; ($2067)
1743   0757 01 0D 00    				ld			bc,MINC					; Mine increment
1744   075A EB          				ex			de,hl
1745   075B             L0761:
1746   075B 09          				add			hl,bc
1747   075C 09          				add			hl,bc
1748   075D 3D          				dec			a
1749   075E C2 5B 07    				jp			nz,L0761
1750   0761             
1751   0761 1A          				ld			a,(de)					; $21A4
1752   0762 D6 08       				sub			$08
1753   0764 96          				sub			(hl)
1754   0765 FE EC       				cp			$EC
1755   0767 D2 6B 07    				jp			nc,L0771
1756   076A             
1757   076A 09          				add			hl,bc
1758   076B             L0771:
1759   076B 2B          				dec			hl
1760   076C 2B          				dec			hl
1761   076D 36 00       				ld			(hl),$00
1762   076F EB          				ex			de,hl
1763   0770 2B          				dec			hl
1764   0771 7E          				ld			a,(hl)
1765   0772 C6 30       				add			a,$30
1766   0774 E6 F0       				and			$F0
1767   0776 57          				ld			d,a
1768   0777 36 00       				ld			(hl),$00
1769   0779 23          				inc			hl
1770   077A 5E          				ld			e,(hl)
1771   077B 23          				inc			hl
1772   077C E5          				push		hl
1773   077D CD DC 09    				call		L0A00
1774   0780             
1775   0780 7B          				ld			a,e
1776   0781 E6 1F       				and			$1F
1777   0783 CA 90 07    				jp			z,L0796
1778   0786             
1779   0786 3D          				dec			a
1780   0787 CA 90 07    				jp			z,L0796
1781   078A             
1782   078A             L0790:
1783   078A 3D          				dec			a
1784   078B FE 1C       				cp			$1C
1785   078D F2 8A 07    				jp			p,L0790
1786   0790             
1787   0790             L0796:
1788   0790 5F          				ld			e,a
1789   0791 CD D3 07    				call		L07DB						; de to first empty slot
1790   0794             
1791   0794 42          				ld			b,d
1792   0795 04          				inc			b
1793   0796 04          				inc			b
1794   0797 4B          				ld			c,e
1795   0798 0C          				inc			c
1796   0799 C5          				push		bc
1797   079A             
1798   079A             				;; 3 rows up for middle char?
1799   079A 7B          				ld			a,e
1800   079B C6 60       				add			a,$60
1801   079D 5F          				ld			e,a
1802   079E D5          				push		de
1803   079F             
1804   079F 42          				ld			b,d
1805   07A0 0C          				inc			c
1806   07A1 C5          				push		bc
1807   07A2             
1808   07A2 3E 1E       				ld			a,$1E
1809   07A4 32 25 20    				ld			(ATIMER),a			; Set timer (audio)
1810   07A7 3E 0F       				ld			a,$0F
1811   07A9 32 24 20    				ld			($2024),a				; Set timer (show explosion)
1812   07AC 3E 10       				ld			a,$10						; Sound bit 4
1813   07AE D3 05       				out			($05),a					; Sound write
1814   07B0             
1815   07B0 7B          				ld			a,e							; No idea what e is here, but used as PRNG
1816   07B1             
1817   07B1~            #IF OLDINT
1818   07B1~            				and			$02							; Mask bit (a=0 or 2)
1819   07B1~            				ld			hl,TEMINE
1820   07B1~            				add			a,l
1821   07B1~            				ld			l,a							; hl = ZAP or WAM
1822   07B1~            
1823   07B1~            				;; Get address from table -> hl
1824   07B1~            				ld			e,(hl)
1825   07B1~            				inc			hl
1826   07B1~            				ld			d,(hl)
1827   07B1~            				ex			de,hl						; hl = Table entry
1828   07B1             #ELSE
1829   07B1 E6 08       				and			$08							; Mask bit (a=0/8)
1830   07B3 21 21 0F    				ld			hl,TZAP
1831   07B6 16 00       				ld			d,$00
1832   07B8 5F          				ld			e,a							; Use de in case we cross a page boundry
1833   07B9 19          				add			hl,de						; hl = Table entry
1834   07BA             #ENDIF
1835   07BA             
1836   07BA             				;; "Middle" letter or ZAP/WAM
1837   07BA D1          				pop			de
1838   07BB 7E          				ld			a,(hl)
1839   07BC 23          				inc			hl
1840   07BD CD 10 0B    				call		L0B30						; Draw string hl @ de, length a
1841   07C0             
1842   07C0             				;; Rest of ZAP/WAM
1843   07C0 D1          				pop			de
1844   07C1 7E          				ld			a,(hl)
1845   07C2 23          				inc			hl
1846   07C3 CD 10 0B    				call		L0B30						; Draw string hl @ de, length a
1847   07C6             
1848   07C6             				;; Bottom of mine explosion
1849   07C6 D1          				pop			de
1850   07C7 21 95 0E    				ld			hl,MINEEXP
1851   07CA 3E 03       				ld			a,$03
1852   07CC CD 10 0B    				call		L0B30						; Draw string hl @ de, length a
1853   07CF             
1854   07CF E1          				pop			hl
1855   07D0 C3 49 07    				jp			L074F
1856   07D3             
1857   07D3             
1858   07D3             				;; Write de to first empty slot
1859   07D3             L07DB:
1860   07D3 21 F0 21    				ld			hl,HMISS				; Missile table
1861   07D6             L07DE:
1862   07D6 7E          				ld			a,(hl)
1863   07D7 23          				inc			hl
1864   07D8 B6          				or			(hl)
1865   07D9 23          				inc			hl
1866   07DA C2 D6 07    				jp			nz,L07DE
1867   07DD             
1868   07DD 2B          				dec			hl
1869   07DE 73          				ld			(hl),e
1870   07DF 2B          				dec			hl
1871   07E0 72          				ld			(hl),d
1872   07E1 C9          				ret
1873   07E2             
1874   07E2             				;; Draw mines after reload
1875   07E2             L07EA:
1876   07E2             #IF SC3DIG
1877   07E2 21 13 20    				ld			hl,PSCORE+1			; Score MSB
1878   07E5 7E          				ld			a,(hl)
1879   07E6 A7          				and			a
1880   07E7 C2 F1 07    				jp			nz,MAXMINE			; >10k points
1881   07EA             
1882   07EA 2B          				dec			hl							; Score LSB
1883   07EB 7E          				ld			a,(hl)
1884   07EC~            #ELSE
1885   07EC~            				ld			a,(PSCORE)			; Player score
1886   07EC             #ENDIF
1887   07EC             
1888   07EC FE 40       				cp			$40
1889   07EE DA F3 07    				jp			c,L07F4
1890   07F1             
1891   07F1             MAXMINE:
1892   07F1 3E 39       				ld			a,$39						; Min of score or $39
1893   07F3             
1894   07F3             L07F4:
1895   07F3 32 2C 20    				ld			($202C),a				; Mine counter
1896   07F6             
1897   07F6 21 7F 20    				ld			hl,$207F				; 1st mine sprite
1898   07F9 11 50 50    				ld			de,$5050				; Initial Mine X,Y
1899   07FC             
1900   07FC             L07FD:
1901   07FC 7E          				ld			a,(hl)
1902   07FD A7          				and			a
1903   07FE FA 34 08    				jp			m,L0835					; Mine needs to be erased
1904   0801             
1905   0801             				;; Launch mine?
1906   0801             L0802:
1907   0801 01 08 00    				ld			bc,$0008
1908   0804 09          				add			hl,bc						; Advance in sprite table
1909   0805 36 0E       				ld			(hl),MINE>>8		; Mine MSB (+8)
1910   0807 2B          				dec			hl
1911   0808 36 83       				ld			(hl),MINE&$FF 	; Mine LSB (+7)
1912   080A 2B          				dec			hl
1913   080B 2B          				dec			hl
1914   080C 73          				ld			(hl),e					; Y Pos (+5)
1915   080D 2B          				dec			hl
1916   080E 70          				ld			(hl),b					; Delta Y (+4)
1917   080F 2B          				dec			hl
1918   0810 2B          				dec			hl
1919   0811 72          				ld			(hl),d					; X Pos (+2)
1920   0812 2B          				dec			hl
1921   0813 36 01       				ld			(hl),$01				; Delta X (+1)
1922   0815 2B          				dec			hl
1923   0816 36 80       				ld			(hl),$80				; Flags
1924   0818 7A          				ld			a,d
1925   0819 C6 51       				add			a,$51
1926   081B 57          				ld			d,a
1927   081C 1F          				rra
1928   081D DA 2D 08    				jp			c,L082E
1929   0820             
1930   0820 3A 2C 20    				ld			a,($202C)				; Mine counter
1931   0823 D6 10       				sub			$10
1932   0825 F8          				ret			m								; Don't add more mines
1933   0826             
1934   0826 32 2C 20    				ld			($202C),a				; Store count
1935   0829 7B          				ld			a,e
1936   082A C6 20       				add			a,$20
1937   082C 5F          				ld			e,a
1938   082D             
1939   082D             L082E:
1940   082D 01 0D 00    				ld			bc,$000D				; Sprite table increment
1941   0830 09          				add			hl,bc						; Next mine
1942   0831 C3 FC 07    				jp			L07FD						; More mines!
1943   0834             
1944   0834             
1945   0834             				;; Erase mine area before launch
1946   0834             L0835:
1947   0834 E5          				push		hl
1948   0835 D5          				push		de
1949   0836 23          				inc			hl
1950   0837 23          				inc			hl
1951   0838 5E          				ld			e,(hl)
1952   0839 23          				inc			hl
1953   083A 23          				inc			hl
1954   083B 23          				inc			hl
1955   083C 56          				ld			d,(hl)
1956   083D CD DC 09    				call		L0A00
1957   0840 EB          				ex			de,hl
1958   0841 01 02 10    				ld			bc,$1002				; 16 x 2 byte area
1959   0844 CD 1B 0A    				call		L0A3F						; Clear area at hl
1960   0847 D1          				pop			de
1961   0848 E1          				pop			hl
1962   0849 C3 01 08    				jp			L0802
1963   084C             
1964   084C             
1965   084C             				;; Handle high score erase
1966   084C             HERASE:
1967   084C C8          				ret			z
1968   084D AF          				xor			a
1969   084E             
1970   084E             #IF SC3DIG
1971   084E 21 02 20    				ld			hl,HSCORE
1972   0851 77          				ld			(hl),a
1973   0852 23          				inc			hl
1974   0853 77          				ld			(hl),a
1975   0854~            #ELSE
1976   0854~            				ld			(HSCORE),a			; Clear high score
1977   0854             #ENDIF
1978   0854             
1979   0854 3A 10 20    				ld			a,($2010)
1980   0857 A7          				and			a
1981   0858 C8          				ret			z
1982   0859             
1983   0859             #IF SC3DIG
1984   0859 01 02 20    				ld			bc,HSCORE
1985   085C 11 E8 21    				ld			de,TXTBUF
1986   085F D5          				push		de
1987   0860 CD 8E 0A    				call		BCD300
1988   0863~            #ELSE
1989   0863~            				ld			hl,TXTBUF				; Text buffer
1990   0863~            				push		hl
1991   0863~            
1992   0863~            				;; Write 4x '0' to buffer
1993   0863~            				ld			bc,$0430				; b=loop counter, c=data
1994   0863~            L085E:
1995   0863~            				ld			(hl),c
1996   0863~            				inc			hl
1997   0863~            				dec			b
1998   0863~            				jp			nz,L085E				; Loop
1999   0863             #ENDIF
2000   0863             
2001   0863 E1          				pop			hl
2002   0864 11 25 3E    				ld			de,$3E25				; Screen location
2003   0867             
2004   0867             #IF SC3DIG
2005   0867 3E 05       				ld			a,$05						; Length = 5
2006   0869~            #ELSE
2007   0869~            				ld			a,$04						; Length = 4
2008   0869             #ENDIF
2009   0869             
2010   0869 C3 10 0B    				jp			L0B30						; Draw string hl @ de, length a
2011   086C             
2012   086C             				;; $09E8 Entry B = Write low 3 bits of $2003 to $2029?
2013   086C             JTBLB:													; $086D
2014   086C EB          				ex			de,hl						; Sequence back to hl
2015   086D 22 00 20    				ld			($2000),hl			; Store
2016   0870             
2017   0870 3A 05 20    				ld			a,(TIMER)				; 
2018   0873 E6 07       				and			$07							; Mask low 3 bits
2019   0875 FE 07       				cp			$07							; == $07?
2020   0877 C2 7B 08    				jp			nz,L087C
2021   087A             
2022   087A AF          				xor			a								; Clear
2023   087B             L087C:
2024   087B 32 29 20    				ld			($2029),a				; Write
2025   087E C9          				ret
2026   087F             
2027   087F             				;; End of game clears
2028   087F             L0880:
2029   087F F3          				di
2030   0880 EB          				ex			de,hl						; Stash hl in de
2031   0881 22 00 20    				ld			($2000),hl
2032   0884 AF          				xor			a
2033   0885 D3 02       				out			($02),a					; Clear periscope lamp
2034   0887 D3 05       				out			($05),a					; Clear audio latches
2035   0889 D3 01       				out			($01),a					; Clear explosion lamp
2036   088B E1          				pop			hl							; (Return address)
2037   088C 01 00 00    				ld			bc,$0000
2038   088F 11 00 00    				ld			de,$0000
2039   0892 3E 10       				ld			a,$10
2040   0894 31 10 40    				ld			sp,$4010				; Clear $4010 down to $2011
2041   0897             L0898:
2042   0897 C5          				push		bc
2043   0898 13          				inc			de
2044   0899 BA          				cp			d
2045   089A C2 97 08    				jp			nz,L0898									; Loop
2046   089D 31 00 24    				ld			sp,$2400
2047   08A0 E9          				jp			(hl)
2048   08A1             
2049   08A1             
2050   08A1             				;; $09E8 Entry 3 (End game)
2051   08A1             JTBL3:
2052   08A1             L08A2:
2053   08A1 E1          				pop			hl							; Return address
2054   08A2 22 09 20    				ld			($2009),hl			; Stash in ($2009-200a)
2055   08A5 CD 7F 08    				call		L0880						; Does this ever return?
2056   08A8 2A 09 20    				ld			hl,($2009)			; Get return address back
2057   08AB E5          				push		hl							; Push back to stack
2058   08AC             
2059   08AC 21 E5 0E    				ld			hl,L0F04				; Water
2060   08AF 11 E0 27    				ld			de,$27E0
2061   08B2 3E 20       				ld			a,$20
2062   08B4 C3 10 0B    				jp			L0B30						; Draw string hl @ de, length a
2063   08B7             
2064   08B7             L08B8:
2065   08B7 DB 01       				in			a,($01)					; IN0
2066   08B9 47          				ld			b,a
2067   08BA DB 01       				in			a,($01)					; IN0
2068   08BC 21 08 20    				ld			hl,IN0 					; Last IN0
2069   08BF 11 B8 09    				ld			de,TBLIN0				; Jump table for IN0
2070   08C2 B8          				cp			b								; Inputs stable?
2071   08C3 CC E5 0A    				call		z,L0B05					; Handle inputs
2072   08C6             
2073   08C6             				;; Jump table do nothing "routine"
2074   08C6             				;; (and end of this one)
2075   08C6             HRET:
2076   08C6 C9          				ret
2077   08C7             
2078   08C7             #IF SC3DIG
2079   08C7             CHKFP:
2080   08C7 DB 02       				in			a,($02)					; IN1 (DIPs)
2081   08C9 E6 04       				and			$04
2082   08CB C8          				ret			z
2083   08CC             
2084   08CC 32 06 20    				ld			(CREDIT),a			; 4 credits
2085   08CF C9          				ret
2086   08D0             #ENDIF
2087   08D0             
2088   08D0             				;; Handle coin
2089   08D0             HCOIN:
2090   08D0 C8          				ret			z								; No coin
2091   08D1 3E 20       				ld			a,$20						; Sound bit 5
2092   08D3 D3 05       				out			($05),a					; Audio outputs
2093   08D5 3E 0F       				ld			a,$0F
2094   08D7 32 25 20    				ld			(ATIMER),a			; Set timer
2095   08DA             
2096   08DA             #IF SC3DIG
2097   08DA 21 06 20    				ld			hl,CREDIT				; Credits
2098   08DD 34          				inc			(hl)						; Add credit
2099   08DE             
2100   08DE 11 33 38    				ld			de,$3833				; Screen location
2101   08E1 21 D2 0E    				ld			hl,LTPUSH				; PRESS START
2102   08E4 3E 0B       				ld			a,$0B						; Length
2103   08E6 C3 10 0B    				jp			L0B30						; Draw string hl @ de, length a
2104   08E9 C9          				ret
2105   08EA~            #ELSE
2106   08EA~            				ld			a,(IN1)					; Last IN1
2107   08EA~            				ld			b,a
2108   08EA~            				ld			hl,HCREDIT			; Half credits
2109   08EA~            				inc			(hl)						; Increment
2110   08EA~            				and			$04							; DSW2 = coinage
2111   08EA~            				jp			z,L08E2
2112   08EA~            
2113   08EA~            				ld			a,(hl)
2114   08EA~            				rrca
2115   08EA~            				ret			c								; Only 1 half credit
2116   08EA~            
2117   08EA~            L08E2:
2118   08EA~            				ld			(hl),$00				; Clear half credit
2119   08EA~            				inc			hl
2120   08EA~            				inc			(hl)						; Add credit
2121   08EA~            
2122   08EA~            				ld			a,b							; Last IN1
2123   08EA~            				and			$08							; DSW3 = coinage
2124   08EA~            				jp			z,L08F4
2125   08EA~            
2126   08EA~            				inc			(hl)						; Add credit
2127   08EA~            				ld			a,b							; Last IN1
2128   08EA~            				and			$04							; DSW2 = coinage
2129   08EA~            				jp			z,L08F4
2130   08EA~            
2131   08EA~            				inc			(hl)						; Add credit (2C, 3C)
2132   08EA~            
2133   08EA~            L08F4:
2134   08EA~            				ld			a,(hl)					; Get credits
2135   08EA~            				and			$0F							; Useless
2136   08EA~            				ld			(hl),a					; Store credits
2137   08EA~            
2138   08EA~            				;; Falls through to start game when credits added
2139   08EA             #ENDIF
2140   08EA             
2141   08EA             
2142   08EA             HPUSH:
2143   08EA C8          				ret			z
2144   08EB 3A 04 20    				ld			a,(GTIME)				; Game time
2145   08EE A7          				and			a
2146   08EF C0          				ret			nz							; Skip if game active
2147   08F0             
2148   08F0             #IF SC3DIG
2149   08F0 CD C7 08    				call		CHKFP
2150   08F3             #ENDIF
2151   08F3 21 06 20    				ld			hl,CREDIT				; Credits?
2152   08F6 7E          				ld			a,(hl)
2153   08F7 A7          				and			a
2154   08F8             
2155   08F8             #IF SC3DIG
2156   08F8 C8          				ret			z
2157   08F9~            #ELSE
2158   08F9~            				jp			z,L091A					; No credits, ignore start
2159   08F9             #ENDIF
2160   08F9             
2161   08F9             L0906:
2162   08F9 35          				dec			(hl)
2163   08FA DB 01       				in			a,($01)					; IN1
2164   08FC             
2165   08FC             #IF OLDDIP
2166   08FC 07          				rlca										; 65432107
2167   08FD 07          				rlca										; 54321076
2168   08FE E6 03       				and			$03							; Game time dips =
2169   0900 11 31 0F    				ld			de,LDTIME				; $0F54 
2170   0903 83          				add			a,e							; Index into table
2171   0904 5F          				ld			e,a
2172   0905 1A          				ld			a,(de)
2173   0906~            #ELSE
2174   0906~            				rrca										; 076543210
2175   0906~            				rrca										; 107654321
2176   0906~            				and			$30
2177   0906~            				add			a,$61						; $61/$71/$81/$91
2178   0906             #ENDIF
2179   0906             
2180   0906 32 04 20    				ld			(GTIME),a				; Store time
2181   0909 32 2A 20    				ld			($202A),a				; Store time
2182   090C C9          				ret
2183   090D             
2184   090D~            #IF 0 
2185   090D~            				;; 	(original code, not used for 3 dig)?
2186   090D~            L091A:
2187   090D~            				ld			a,(IN1)					; Last IN1
2188   090D~            				and			$0C							; Mask coinage
2189   090D~            				cp			$0C							; 2C / 3Credit?
2190   090D~            				ret			nz
2191   090D~            
2192   090D~            				dec			hl
2193   090D~            				ld			a,(hl)					; Half credits
2194   090D~            				and			a
2195   090D~            				ret			z
2196   090D~            				jp			L0906
2197   090D             #ENDIF
2198   090D             
2199   090D             
2200   090D             				;; $2000 at reset
2201   090D             				;; Attract mode loop
2202   090D             L0929:
2203   090D 04          				.db			$04							; Command 4 = String
2204   090E 01          				.db			$01							; Length
2205   090F 98 0E       				.dw			LTBLANK					; String src address
2206   0911 30 3E       				.dw			$3E30						; Screen dst address
2207   0913             
2208   0913 09          				.db			$09							; Commnad 9
2209   0914 06 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2210   0916 33 38       				.dw			$3833						; Location
2211   0918 C7 0E       				.dw			LTCOIN					; "Insert Coin"
2212   091A D2 0E       				.dw			LTPUSH					; "Push Button"
2213   091C             
2214   091C 04          				.db			$04							; Command 4 = String
2215   091D             #IF SC3DIG
2216   091D 1B          				.db			$1B							; Length
2217   091E~            #ELSE
2218   091E~            				.db			$1A							; Length
2219   091E             #ENDIF
2220   091E AC 0E       				.dw			LTHIGH					; String src address
2221   0920 02 3C       				.dw			$3C02						; Screen dst address
2222   0922             
2223   0922 0A          				.db			$0A							; Command A = BCD @ loc
2224   0923 02 20       				.dw			HSCORE					; bc = 2006 = high score
2225   0925~            #IF OLDINT
2226   0925~            				.dw			TXTBUF					; Buffer loc
2227   0925             #ENDIF
2228   0925 25 3E       				.dw			$3E25						; Screen loc
2229   0927             
2230   0927 0A          				.db			$0A							; Command A = BCD @ loc
2231   0928 12 20       				.dw			PSCORE					; bc = 202b = score
2232   092A~            #IF OLDINT
2233   092A~            				.dw			TXTBUF					; Buffer loc
2234   092A             #ENDIF
2235   092A             #IF SC3DIG
2236   092A 36 3E       				.dw			$3E36						; Screen loc
2237   092C~            #ELSE
2238   092C~            				.dw			$3E35						; Screen loc
2239   092C             #ENDIF
2240   092C             
2241   092C 02          				.db			$02							; Command 2 = arg to 2010
2242   092D 0F          				.db			$0F							; arg
2243   092E             
2244   092E             L094E:
2245   092E 04          				.db			$04							; Command 4 = String
2246   092F 09          				.db			$09							; Length
2247   0930 A3 0E       				.dw			LTOVER					; String src address
2248   0932 0B 2C       				.dw			$2C0B						; Screen dst address
2249   0934             
2250   0934             				;; Delay timer
2251   0934 01          				.db			$01							; Command 1 = arg to 2011
2252   0935 1E          				.db			$1E							; arg
2253   0936             
2254   0936 00          				.db			$00							; Command 0 = Wait for $2011 timer
2255   0937             
2256   0937             
2257   0937 04          				.db			$04							; Command 4 = String
2258   0938 09          				.db			$09							; Length
2259   0939 98 0E       				.dw			LTBLANK					; String src address
2260   093B 0B 2C       				.dw			$2C0B						; Screen dst address
2261   093D             
2262   093D             				;; Delay timer
2263   093D 01          				.db			$01							; Command 1 = arg to 2011
2264   093E 1E          				.db			$1E							; arg
2265   093F             
2266   093F 00          				.db			$00							; Command 0 = Wait for $2011 timer
2267   0940             
2268   0940 06          				.db			$06							; Command 6 = Set ($2000)
2269   0941 2E 09       				.dw			L094E						; Next command address
2270   0943             
2271   0943             L0963:
2272   0943 03          				.db			$03							; Do end of game sequence
2273   0944             
2274   0944 04          				.db			$04							; Command 4 = String
2275   0945 08          				.db			$08							; Length
2276   0946 DD 0E       				.dw			LTSEA						; String src address (SEA WOLF)
2277   0948 0C 2C       				.dw			$2C0C						; Screen dst address
2278   094A             
2279   094A 04          				.db			$04							; Command 4 = String
2280   094B 0A          				.db			$0A							; Length
2281   094C AC 0E       				.dw			LTHIGH					; String src address (HIGH SCORE)
2282   094E 02 3C       				.dw			$3C02						; Screen dst address
2283   0950             
2284   0950 0A          				.db			$0A							; Command A = BCD @ loc
2285   0951 02 20       				.dw			HSCORE					; bc = 2006 = high score
2286   0953~            #IF OLDINT
2287   0953~            				.dw			TXTBUF					; Buffer loc
2288   0953             #ENDIF
2289   0953 25 3E       				.dw			$3E25						; Screen loc
2290   0955             
2291   0955 09          				.db			$09							; Commnad 9
2292   0956 06 20       				.dw			CREDIT					; ($2005) -> a   (select string)
2293   0958 33 38       				.dw			$3833						; Location
2294   095A C7 0E       				.dw			LTCOIN					; "Insert Coin"
2295   095C D2 0E       				.dw			LTPUSH					; "Push Button"
2296   095E             
2297   095E             				;; Delay timer
2298   095E 01          				.db			$01							; Command 1 = arg to 2011
2299   095F 5A          				.db			$5A							; arg
2300   0960             
2301   0960 00          				.db			$00							; Command 0 = Wait for $2011 timer
2302   0961             
2303   0961             				;; Launch ship in attract
2304   0961 08          				.db			$08							; Command 8 (Data backwards to loc)
2305   0962 09          				.db			$09							; Count
2306   0963 60 20       				.dw			$2060						; de = $2060
2307   0965 CB 0D       				.dw			SHIP3						; $0DBE = Ship address
2308   0967 20          				.db			$20							; $20 = ???
2309   0968 15          				.db			$15							; $15 = Y Pos
2310   0969 00          				.db			$00							; $00 = Delta y
2311   096A E0          				.db			$E0							; $E0 = Y flags
2312   096B 00          				.db			$00							; $00 = X pos
2313   096C 01          				.db			$01							; $01 = Delta x
2314   096D C4          				.db			$C4							; $C4 = Flags (Ship 4, active)
2315   096E             
2316   096E             				;; Delay timer
2317   096E 01          				.db			$01							; Command 1 = arg to 2011
2318   096F 5A          				.db			$5A							; arg
2319   0970             
2320   0970 00          				.db			$00							; Command 0 = Wait for $2011 timer
2321   0971             
2322   0971             				;; Launch missile in attract
2323   0971 08          				.db			$08							; Command 8 (Data backwards to loc)
2324   0972 09          				.db			$09							; Count
2325   0973 EF 20       				.dw			$20EF						; de = $20EF
2326   0975 55 0E       				.dw			SHOT0						; $0E75 = Shot address
2327   0977 9C          				.db			$9C							; $9C = ???
2328   0978 E0          				.db			$E0							; $E0 = Y Pos
2329   0979 FA          				.db			$FA							; $FA = Delta y
2330   097A 00          				.db			$00							; $00 = Y flags
2331   097B A8          				.db			$A8							; $A8 = X pos
2332   097C 00          				.db			$00							; $00 = Delta X
2333   097D C0          				.db			$C0							; $C0 = Flags (Non-ship, active)
2334   097E             
2335   097E             				;; Delay timer
2336   097E 01          				.db			$01							; Command 1 = arg to 2011
2337   097F B4          				.db			$B4							; arg
2338   0980             
2339   0980 00          				.db			$00							; Command 0 = Wait for $2011 timer
2340   0981             
2341   0981 06          				.db			$06							; Command 6 = Set ($2000)
2342   0982 43 09       				.dw			L0963						; Next command address
2343   0984             
2344   0984             
2345   0984             				;; Game play control loop
2346   0984             L09A6:
2347   0984             				;; Delay timer
2348   0984 01          				.db			$01							; Command 1 = arg to 2011
2349   0985 0F          				.db			$0F							; arg
2350   0986             
2351   0986 00          				.db			$00							; Command 0 = Wait for $2011 timer
2352   0987             
2353   0987 03          				.db			$03							; Command 3 = End game
2354   0988             
2355   0988 04          				.db			$04							; Command 4 = String
2356   0989 09          				.db			$09							; Length
2357   098A 0A 0F       				.dw			LTTIME					; String src address (TIME/SCORE)
2358   098C 0E 3C       				.dw			$3C0E						; Screen dst address
2359   098E             
2360   098E 07          				.db			$07							; Command 7 = Store a to bc
2361   098F 28          				.db			$28							; a
2362   0990 22 20       				.dw			$2022						; bc
2363   0992             
2364   0992 07          				.db			$07							; Command 7 = Store a to bc
2365   0993 0A          				.db			$0A							; a
2366   0994 21 20       				.dw			$2021						; bc
2367   0996             
2368   0996~            #IF OLDINT
2369   0996~            				.db			$0B							; Command B = Write $2029
2370   0996             #ELSE
2371   0996 05          				.db			$05							; Command 5 = Write $2029
2372   0997             #ENDIF
2373   0997             
2374   0997 00          				.db			$00							; Command 0 = Wait for $2011 timer
2375   0998             
2376   0998             
2377   0998             				;; Explosion lamp tables!
2378   0998             L09BA:
2379   0998 48 44 42 41 				.db			$48, $44, $42, $41, $88, $84, $82, $81		; 
2379   099C 88 84 82 81 
2380   09A0             L09C2:
2381   09A0 18 14 12 11 				.db			$18, $14, $12, $11, $28, $24, $22, $21		; 
2381   09A4 28 24 22 21 
2382   09A8             
2383   09A8             
2384   09A8             				;; Jump table for IN1 changes (8 entries)
2385   09A8             TBLIN1:
2386   09A8 D0 08       				.dw			HCOIN						; 0 = 08C8 = Coin
2387   09AA EA 08       				.dw			HPUSH						; 1 = 08F8 = Start
2388   09AC C6 08       				.dw			HRET						; 2 = 08C7 = (ret) Coinage
2389   09AE C6 08       				.dw			HRET						; 3 = 08C7 = (ret) Coinage
2390   09B0 4C 08       				.dw			HERASE					; 4 = 084D = Erase highs
2391   09B2 C6 08       				.dw			HRET						; 5 = 08C7 = (ret) Extended time
2392   09B4 C6 08       				.dw			HRET						; 6 = 08C7 = (ret) Extended time
2393   09B6 C6 08       				.dw			HRET						; 7 = 08C7 = (ret) Extended time
2394   09B8             
2395   09B8             				;; Jump table for IN0 changes (8 entries)
2396   09B8             TBLIN0:
2397   09B8 C6 08       				.dw			HRET						; 0 = 08C7 = (ret) Turret
2398   09BA C6 08       				.dw			HRET						; 1 = 08C7 = (ret) Turret
2399   09BC C6 08       				.dw			HRET						; 2 = 08C7 = (ret) Turret
2400   09BE C6 08       				.dw			HRET						; 3 = 08C7 = (ret) Turret
2401   09C0 C6 08       				.dw			HRET						; 4 = 08C7 = (ret) Turret
2402   09C2 72 05       				.dw			HFIRE						; 5 = 057B = Fire button
2403   09C4 C6 08       				.dw			HRET						; 6 = 08C7 = (ret) Time
2404   09C6 C6 08       				.dw			HRET						; 7 = 08C7 = (ret) Time
2405   09C8             
2406   09C8             				;; Jump table for $047F (0 entry not used)
2407   09C8             				;; Used for attract mode sequence
2408   09C8             TBLJMP:
2409   09C8 5C 0B       				.dw			JTBL1						; 1 = 0B7C = Arg to 2011
2410   09CA 52 0B       				.dw			JTBL2						; 2 = 0B72 = Arg to 2010
2411   09CC A1 08       				.dw			JTBL3						; 3 = 08A2 = End of game + reset
2412   09CE 02 0B       				.dw			JTBL4						; 4 = 0B22 = String
2413   09D0~            #IF OLDINT
2414   09D0~            				.dw			JTBL5						; 5 = 0AED = (Not used)
2415   09D0             #ELSE
2416   09D0 6C 08       				.dw			JTBLB						; 5 = 086D = LSBs of $2003 to $2029 (?)
2417   09D2             #ENDIF
2418   09D2 66 0B       				.dw			JTBL6						; 6 = 0B86 = (de) -> $2000 
2419   09D4 D9 0A       				.dw			JTBL7						; 7 = 0AE1 = val -> addr
2420   09D6 97 0A       				.dw			JTBL8						; 8 = 0A9F = Arg to loc
2421   09D8 B4 0A       				.dw			JTBL9						; 9 = 0ABC = Select String
2422   09DA 2F 0A       				.dw			JTBLA						; A = 0A53 = BCD @ location
2423   09DC~            #IF OLDINT
2424   09DC~            				.dw			JTBLB						; B = 086D = LSBs of $2003 to $2029 (?)
2425   09DC             #ENDIF
2426   09DC             
2427   09DC             				;; e&$07 -> c,  de = de >> 3 + $2400,
2428   09DC             				;; Get address for shifted data
2429   09DC             L0A00:
2430   09DC 7B          				ld			a,e							; Mask e
2431   09DD E6 07       				and			$07
2432   09DF 4F          				ld			c,a							; Stash in c
2433   09E0             
2434   09E0             				;; de>>3
2435   09E0 06 03       				ld			b,$03						; Loop counter
2436   09E2             L0A06:
2437   09E2 AF          				xor			a								; CLC
2438   09E3 7A          				ld			a,d							; LSB of d to carry
2439   09E4 1F          				rra
2440   09E5 57          				ld			d,a
2441   09E6 7B          				ld			a,e
2442   09E7 1F          				rra
2443   09E8 5F          				ld			e,a
2444   09E9 05          				dec			b
2445   09EA C2 E2 09    				jp			nz,L0A06				; Loop
2446   09ED             
2447   09ED 7A          				ld			a,d
2448   09EE C6 24       				add			a,$24
2449   09F0 57          				ld			d,a
2450   09F1 C9          				ret
2451   09F2             
2452   09F2             
2453   09F2             L0A16:
2454   09F2 F5          				push		af							; Store count
2455   09F3 7E          				ld			a,(hl)					; Get value
2456   09F4 02          				ld			(bc),a					; Store value
2457   09F5 03          				inc			bc
2458   09F6 EB          				ex			de,hl
2459   09F7 B6          				or			(hl)
2460   09F8 23          				inc			hl
2461   09F9 12          				ld			(de),a
2462   09FA F1          				pop			af							; Restore count
2463   09FB E5          				push		hl
2464   09FC 21 20 00    				ld			hl,$0020				; Row increment
2465   09FF 19          				add			hl,de						; hl = de+$0020
2466   0A00 D1          				pop			de							; de = old hl
2467   0A01 3D          				dec			a
2468   0A02 C2 F2 09    				jp			nz,L0A16				; loop
2469   0A05 C9          				ret
2470   0A06             
2471   0A06             
2472   0A06             				;; Draw b x c block from de to screen at hl
2473   0A06             L0A2A:
2474   0A06 C5          				push		bc
2475   0A07 E5          				push		hl
2476   0A08             L0A2C:
2477   0A08 1A          				ld			a,(de)
2478   0A09 13          				inc			de
2479   0A0A 77          				ld			(hl),a
2480   0A0B 23          				inc			hl
2481   0A0C 0D          				dec			c
2482   0A0D C2 08 0A    				jp			nz,L0A2C				; Loop for col
2483   0A10             
2484   0A10 E1          				pop			hl
2485   0A11 01 20 00    				ld			bc,$0020				; Row increment
2486   0A14 09          				add			hl,bc
2487   0A15 C1          				pop			bc
2488   0A16 05          				dec			b
2489   0A17 C2 06 0A    				jp			nz,L0A2A				; Loop for row
2490   0A1A C9          				ret
2491   0A1B             
2492   0A1B             
2493   0A1B             				;; Clear (hl - hl+c-1)  b times with row offsets
2494   0A1B             L0A3F:
2495   0A1B AF          				xor			a
2496   0A1C             L0A40:
2497   0A1C C5          				push		bc
2498   0A1D E5          				push		hl
2499   0A1E             L0A42:
2500   0A1E 77          				ld			(hl),a
2501   0A1F 23          				inc			hl
2502   0A20 0D          				dec			c
2503   0A21 C2 1E 0A    				jp			nz,L0A42				; Loop for col
2504   0A24             
2505   0A24 E1          				pop			hl
2506   0A25 01 20 00    				ld			bc,$0020				; Row increment
2507   0A28 09          				add			hl,bc
2508   0A29 C1          				pop			bc
2509   0A2A 05          				dec			b
2510   0A2B C2 1C 0A    				jp			nz,L0A40				; Loop for row
2511   0A2E             
2512   0A2E C9          				ret
2513   0A2F             
2514   0A2F             
2515   0A2F             				;; $09E8 Entry A
2516   0A2F             				;; Print high score / player score
2517   0A2F             JTBLA:													; $0A53
2518   0A2F EB          				ex			de,hl
2519   0A30 4E          				ld			c,(hl)					; Read bc (address of score)
2520   0A31 23          				inc			hl
2521   0A32 46          				ld			b,(hl)
2522   0A33 23          				inc			hl
2523   0A34~            #IF OLDINT
2524   0A34~            				ld			e,(hl)					; Read de
2525   0A34~            				inc			hl
2526   0A34~            				ld			d,(hl)
2527   0A34~            				dec			hl							; Back up to use de again
2528   0A34             #ELSE
2529   0A34 11 E8 21    				ld			de,TXTBUF				; This was a constant
2530   0A37 D5          				push		de							; Store TXTBUF
2531   0A38             #ENDIF
2532   0A38             
2533   0A38             #IF SC3DIG
2534   0A38 CD 8E 0A    				call		BCD300					; 3 nybble BCD+00 to string
2535   0A3B CD D4 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2536   0A3E~            #ELSE
2537   0A3E~            				call		L0A82						; Draw BCD from bc at buffer at de
2538   0A3E~            				ex			de,hl						; Last address now in hl
2539   0A3E~            				call		L0A7A						; Replace space with zero
2540   0A3E~            				inc			hl
2541   0A3E~            				ex			de,hl						; Last address now in de
2542   0A3E~            				ld			a,$30
2543   0A3E~            				ld			(de),a					; Append zero
2544   0A3E~            				inc			de
2545   0A3E~            				ld			(de),a					; Append zero
2546   0A3E~            
2547   0A3E~            				;; #ENDIF
2548   0A3E~            				;; #IF OLDINT*(1-SC3DIG)
2549   0A3E~            #IF OLDINT
2550   0A3E~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
2551   0A3E~            				push		de
2552   0A3E~            #ENDIF
2553   0A3E~            
2554   0A3E~            				;; #IF (1-SC3DIG)
2555   0A3E~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
2556   0A3E             #ENDIF
2557   0A3E             
2558   0A3E 22 00 20    				ld			($2000),hl			; Next command 
2559   0A41 E1          				pop			hl
2560   0A42             #IF SC3DIG
2561   0A42 3E 05       				ld			a,$05						; Length for 5 digit
2562   0A44~            #ELSE
2563   0A44~            				ld			a,$04						; Length
2564   0A44             #ENDIF
2565   0A44 C3 10 0B    				jp			L0B30						; Draw string hl @ de, length a
2566   0A47             
2567   0A47             
2568   0A47             #IF SC3DIG
2569   0A47             				;; 3 digit BCD from bc to de
2570   0A47             				;; #?? -> #00
2571   0A47             				;; 0#? -> _#0
2572   0A47             				;; 00# -> __#
2573   0A47             				;; 000 -> ___
2574   0A47             BCD3:
2575   0A47 03          				inc			bc							; To high byte
2576   0A48 0A          				ld			a,(bc)
2577   0A49 E6 0F       				and			$0F
2578   0A4B C2 5C 0A    				jp			nz,BCD3NZ
2579   0A4E             
2580   0A4E 3E 40       				ld			a,$40						; Space
2581   0A50 12          				ld			(de),a					; Store
2582   0A51 13          				inc			de
2583   0A52 0B          				dec			bc							; To Low byte
2584   0A53             
2585   0A53 0A          				ld			a,(bc)
2586   0A54 E6 F0       				and			$F0
2587   0A56 C2 70 0A    				jp			nz,BCD2_0				; High byte non-zero
2588   0A59 C3 67 0A    				jp			BCD2__					; High byte zero
2589   0A5C             
2590   0A5C             BCD3NZ:
2591   0A5C C6 30       				add			a,$30						; To ASCII
2592   0A5E 12          				ld			(de),a					; Store digit
2593   0A5F 13          				inc			de
2594   0A60 0B          				dec			bc							; To Low byte
2595   0A61             				;; Continue with 2 leading zeros
2596   0A61             
2597   0A61             				;; 2 digit BCD with 2 leading zeros
2598   0A61             BCD200:
2599   0A61 EB          				ex			de,hl
2600   0A62 36 30       				ld			(hl),$30				; 0
2601   0A64 C3 73 0A    				jp			BCD2_0X
2602   0A67             
2603   0A67             				;; 2 digit BCD with no leading zeros
2604   0A67             BCD2__:
2605   0A67 EB          				ex			de,hl
2606   0A68 36 40       				ld			(hl),$40				; Space
2607   0A6A 23          				inc			hl
2608   0A6B 36 40       				ld			(hl),$40				; Space
2609   0A6D C3 79 0A    				jp			BCD2
2610   0A70             
2611   0A70             				;; 2 digit BCD with 1 leading zero
2612   0A70             BCD2_0:
2613   0A70 EB          				ex			de,hl
2614   0A71 36 40       				ld			(hl),$40				; Space
2615   0A73             BCD2_0X:
2616   0A73 23          				inc			hl
2617   0A74 36 30       				ld			(hl),$30				; 0
2618   0A76 C3 79 0A    				jp			BCD2
2619   0A79             
2620   0A79             				;; Common routine
2621   0A79             BCD2:
2622   0A79 2B          				dec			hl
2623   0A7A EB          				ex			de,hl						; Undo swap
2624   0A7B             
2625   0A7B             				;; Do MSB
2626   0A7B 0A          				ld			a,(bc)					; Get BCD
2627   0A7C 1F          				rra
2628   0A7D 1F          				rra
2629   0A7E 1F          				rra
2630   0A7F 1F          				rra
2631   0A80 CD 84 0A    				call		BCDDIG
2632   0A83             
2633   0A83             				;; Do LSB
2634   0A83 0A          				ld			a,(bc)					; Get BCD
2635   0A84             BCDDIG:
2636   0A84 E6 0F       				and			$0F							; Mask high nybble
2637   0A86 CA 8C 0A    				jp			z,BCDDONE
2638   0A89             
2639   0A89 C6 30       				add			a,$30						; Decimal to ascii
2640   0A8B 12          				ld			(de),a					; Store digit
2641   0A8C             
2642   0A8C             BCDDONE:
2643   0A8C 13          				inc			de
2644   0A8D C9          				ret
2645   0A8E             
2646   0A8E             
2647   0A8E             				;; 3 nybble BCD with trailing zeros
2648   0A8E             BCD300:
2649   0A8E CD 47 0A    				call		BCD3
2650   0A91             
2651   0A91             				;; Append zeros
2652   0A91             ADD00:
2653   0A91 3E 30       				ld			a,$30
2654   0A93 12          				ld			(de),a					; Append 0
2655   0A94 13          				inc			de
2656   0A95 12          				ld			(de),a					; Append 0
2657   0A96 C9          				ret
2658   0A97             
2659   0A97~            #ELSE
2660   0A97~            				;; Replace space with a zero
2661   0A97~            L0A7A:
2662   0A97~            				dec			hl
2663   0A97~            				ld			a,(hl)
2664   0A97~            				and			$40
2665   0A97~            				ret			z
2666   0A97~            				ld			(hl),$30
2667   0A97~            				ret
2668   0A97~            
2669   0A97~            				;; BCD at (bc) to string at (de)
2670   0A97~            L0A82:
2671   0A97~            				ld			a,(bc)
2672   0A97~            				rra
2673   0A97~            				rra
2674   0A97~            				rra
2675   0A97~            				rra
2676   0A97~            				and			$0F							; Mask high nybble
2677   0A97~            				jp			nz,L0A8E
2678   0A97~            				ld			a,$10						; $40 -> blank
2679   0A97~            L0A8E:
2680   0A97~            				add			a,$30						; Decimal to ascii
2681   0A97~            				ld			(de),a					; Store digit
2682   0A97~            				inc			de							; Inc buffer pointer
2683   0A97~            				ld			a,(bc)
2684   0A97~            				and			$0F							; Mask low nybble
2685   0A97~            				jp			nz,L0A9A
2686   0A97~            				ld			a,$10						; $40 -> blank
2687   0A97~            L0A9A:
2688   0A97~            				add			a,$30						; Decimal to ascii
2689   0A97~            				ld			(de),a					; Store digit
2690   0A97~            				inc			de							; Inc buffer pointer
2691   0A97~            				ret
2692   0A97             #ENDIF
2693   0A97             
2694   0A97             
2695   0A97             				;; $09E8 Entry 8 -- Copy data from sequence to address (backwards)
2696   0A97             JTBL8:													; $0A9F
2697   0A97 EB          				ex			de,hl						; Sequence address back to hl
2698   0A98 46          				ld			b,(hl)					; Get count
2699   0A99 23          				inc			hl
2700   0A9A 05          				dec			b
2701   0A9B 05          				dec			b
2702   0A9C CD D4 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2  (address)
2703   0A9F 4E          				ld			c,(hl)					; Read first byte
2704   0AA0 23          				inc			hl
2705   0AA1 7E          				ld			a,(hl)					; Read second byte
2706   0AA2 23          				inc			hl
2707   0AA3 12          				ld			(de),a					; Write first byte
2708   0AA4 1B          				dec			de
2709   0AA5 79          				ld			a,c
2710   0AA6 12          				ld			(de),a					; Write second byte
2711   0AA7 1B          				dec			de
2712   0AA8             
2713   0AA8             L0AB0:
2714   0AA8 7E          				ld			a,(hl)					; Loop for rest of count
2715   0AA9 23          				inc			hl
2716   0AAA 12          				ld			(de),a
2717   0AAB 1B          				dec			de
2718   0AAC 05          				dec			b
2719   0AAD C2 A8 0A    				jp			nz,L0AB0
2720   0AB0 22 00 20    				ld			($2000),hl			; Next command
2721   0AB3 C9          				ret
2722   0AB4             
2723   0AB4             				;; $09E8 Entry 9 -- Draw INSERT COIN or PUSH BUTTON
2724   0AB4             JTBL9:													; $0ABC
2725   0AB4 EB          				ex			de,hl
2726   0AB5 CD D4 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2727   0AB8 1A          				ld			a,(de)
2728   0AB9 CD D4 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2729   0ABC D5          				push		de
2730   0ABD CD D4 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2731   0AC0 D5          				push		de
2732   0AC1 CD D4 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2733   0AC4 22 00 20    				ld			($2000),hl			; Next command
2734   0AC7             
2735   0AC7 EB          				ex			de,hl
2736   0AC8 A7          				and			a
2737   0AC9 CA CD 0A    				jp			z,L0AD5					; Draw first string?
2738   0ACC E3          				ex			(sp),hl
2739   0ACD             
2740   0ACD             L0AD5:
2741   0ACD E1          				pop			hl
2742   0ACE D1          				pop			de
2743   0ACF 3E 0B       				ld			a,$0B						; Length
2744   0AD1 C3 10 0B    				jp			L0B30						; Draw string hl @ de, length a
2745   0AD4             
2746   0AD4             				;; (hl, hl+1) -> de, hl+=2
2747   0AD4             GETDE:
2748   0AD4             L0ADC:
2749   0AD4 5E          				ld			e,(hl)					; LSB from table
2750   0AD5 23          				inc			hl
2751   0AD6 56          				ld			d,(hl)					; MSB from table
2752   0AD7 23          				inc			hl
2753   0AD8 C9          				ret
2754   0AD9             
2755   0AD9             				;; $9EA8 Entry 7 -- arg -> addr
2756   0AD9             JTBL7:													; $0AE1
2757   0AD9 1A          				ld			a,(de)					; Next entry
2758   0ADA 13          				inc			de
2759   0ADB EB          				ex			de,hl
2760   0ADC 4E          				ld			c,(hl)					; Next entry
2761   0ADD 23          				inc			hl
2762   0ADE 46          				ld			b,(hl)					; Next entry
2763   0ADF 23          				inc			hl
2764   0AE0 22 00 20    				ld			($2000),hl			; Store command
2765   0AE3 02          				ld			(bc),a					; a -> (bc)
2766   0AE4 C9          				ret
2767   0AE5             
2768   0AE5             
2769   0AE5~            #IF OLDINT
2770   0AE5~            				;; $09E8 Entry 5
2771   0AE5~            				;; This is apparently never called
2772   0AE5~            				;; Read from de table into b, c, a, e, d
2773   0AE5~            JTBL5:													; $0AED
2774   0AE5~            				ex			de,hl
2775   0AE5~            				ld			b,(hl)					; get b,c,a from (hl) [was (de)]
2776   0AE5~            				inc			hl
2777   0AE5~            				ld			c,(hl)
2778   0AE5~            				inc			hl
2779   0AE5~            				ld			a,(hl)
2780   0AE5~            				inc			hl
2781   0AE5~            				call		GETDE						; (hl, hl+1) -> de, hl+=2
2782   0AE5~            				ld   ($2000),hl					; Store command
2783   0AE5~            
2784   0AE5~            				ex			de,hl
2785   0AE5~            				ld			(hl),$DB				; ?? constant?
2786   0AE5~            				inc			hl
2787   0AE5~            				ld			(hl),c
2788   0AE5~            				inc			hl
2789   0AE5~            				ld			(hl),$C9				; ?? constant?
2790   0AE5~            				dec			hl
2791   0AE5~            				dec			hl
2792   0AE5~            				jp			(hl)						; Jump
2793   0AE5             #ENDIF
2794   0AE5             
2795   0AE5             				;; Deal with inputs (when stable)
2796   0AE5             L0B05:
2797   0AE5 AE          				xor			(hl)						; XOR with stored value
2798   0AE6 C8          				ret			z								; No changes
2799   0AE7             
2800   0AE7 4F          				ld			c,a							; Stash changed bits
2801   0AE8 06 01       				ld			b,$01						; Bit being checked
2802   0AEA             
2803   0AEA             L0B0A:
2804   0AEA 79          				ld			a,c							; Restore changed bits
2805   0AEB 0F          				rrca
2806   0AEC DA F8 0A    				jp			c,L0B18					; Bit is high
2807   0AEF             
2808   0AEF 4F          				ld			c,a							; Stash changed bits
2809   0AF0 78          				ld			a,b							; Shift check bit
2810   0AF1 07          				rlca
2811   0AF2 47          				ld			b,a
2812   0AF3 13          				inc			de							; Advance jump table
2813   0AF4 13          				inc			de
2814   0AF5 C3 EA 0A    				jp			L0B0A						; Loop
2815   0AF8             
2816   0AF8             L0B18:
2817   0AF8 78          				ld			a,b							; Bit found to a
2818   0AF9 AE          				xor			(hl)						; Clear bit
2819   0AFA 77          				ld			(hl),a					; Store back
2820   0AFB A0          				and			b								; Value of changed bit
2821   0AFC             
2822   0AFC             				;; Get jump address from table
2823   0AFC EB          				ex			de,hl
2824   0AFD 4E          				ld			c,(hl)
2825   0AFE 23          				inc			hl
2826   0AFF 66          				ld			h,(hl)
2827   0B00 69          				ld			l,c
2828   0B01 E9          				jp			(hl)						; Jump to handler
2829   0B02             
2830   0B02             				;; $09E8 Entry 4 (Draw string)
2831   0B02             JTBL4:													; $0E22
2832   0B02 EB          				ex			de,hl						; 
2833   0B03 7E          				ld			a,(hl)					; Length
2834   0B04 23          				inc			hl
2835   0B05 CD D4 0A    				call		GETDE						; (hl, hl+1) -> de, hl+=2
2836   0B08 D5          				push		de
2837   0B09 CD D4 0A    				call		GETDE						; (hl, hl,1) -> de, hl+=2
2838   0B0C 22 00 20    				ld			($2000),hl			; Next command
2839   0B0F E1          				pop			hl							; String src address
2840   0B10             
2841   0B10             				;; Write string length a from hl to de
2842   0B10             L0B30:
2843   0B10 F5          				push		af
2844   0B11             L0B31:
2845   0B11 7E          				ld			a,(hl)					; Get byte
2846   0B12 23          				inc			hl
2847   0B13 D6 30       				sub			$30							; Ascii -> tbl
2848   0B15 F2 29 0B    				jp			p,L0B49					; Jump if >=$30
2849   0B18             
2850   0B18             				;; Blank space = $30-a (?)
2851   0B18 47          				ld			b,a
2852   0B19             L0B39:
2853   0B19 1C          				inc			e
2854   0B1A 7B          				ld			a,e
2855   0B1B E6 1F       				and			$1F
2856   0B1D C2 22 0B    				jp			nz,L0B42				; No wrap
2857   0B20 14          				inc			d
2858   0B21 14          				inc			d
2859   0B22             L0B42:
2860   0B22 04          				inc			b
2861   0B23 C2 19 0B    				jp			nz,L0B39				; Loop for space
2862   0B26             
2863   0B26 C3 11 0B    				jp			L0B31						; Loop for chars
2864   0B29             
2865   0B29             				;; ASCII
2866   0B29             L0B49:
2867   0B29 E5          				push		hl
2868   0B2A D5          				push		de
2869   0B2B             				;; hl = CHARS + a * $0A
2870   0B2B 21 6F 0B    				ld			hl,CHARS				; Start of char table
2871   0B2E CA 39 0B    				jp			z,L0B59					; (no need to add)
2872   0B31 01 0A 00    				ld			bc,$000A				; Add a*$0a
2873   0B34             L0B54:
2874   0B34 09          				add			hl,bc
2875   0B35 3D          				dec			a
2876   0B36 C2 34 0B    				jp			nz,L0B54
2877   0B39             
2878   0B39             L0B59:
2879   0B39 EB          				ex			de,hl
2880   0B3A 01 20 00    				ld			bc,$0020				; Row increment
2881   0B3D 3E 0A       				ld			a,$0A						; Loop $a times
2882   0B3F             
2883   0B3F             L0B5F:
2884   0B3F F5          				push		af
2885   0B40 1A          				ld			a,(de)					; Load byte
2886   0B41 13          				inc			de							; Inc index
2887   0B42 77          				ld			(hl),a					; Store to screen
2888   0B43 09          				add			hl,bc						; Next row
2889   0B44 F1          				pop			af
2890   0B45 3D          				dec			a
2891   0B46 C2 3F 0B    				jp			nz,L0B5F				; Loop for this char
2892   0B49             
2893   0B49 D1          				pop			de
2894   0B4A E1          				pop			hl
2895   0B4B 13          				inc			de							; Next screen loc
2896   0B4C F1          				pop			af
2897   0B4D 3D          				dec			a
2898   0B4E C2 10 0B    				jp			nz,L0B30				; Next char
2899   0B51             
2900   0B51 C9          				ret
2901   0B52             
2902   0B52             				;; $09E8 Entry 2  (argument to 2010)
2903   0B52             JTBL2:													; $0B72
2904   0B52 EB          				ex			de,hl
2905   0B53 7E          				ld			a,(hl)					; Argument
2906   0B54 23          				inc			hl
2907   0B55 22 00 20    				ld			($2000),hl			; Next command
2908   0B58 32 10 20    				ld			($2010),a				; Store arg
2909   0B5B C9          				ret
2910   0B5C             
2911   0B5C             				;; $09E8 Entry 1 (argument to 2011)
2912   0B5C             JTBL1:													; $0B7C
2913   0B5C EB          				ex			de,hl
2914   0B5D 7E          				ld			a,(hl)					; Argument
2915   0B5E 23          				inc			hl
2916   0B5F 22 00 20    				ld			($2000),hl			; Next command
2917   0B62 32 11 20    				ld			($2011),a				; Store arg
2918   0B65 C9          				ret
2919   0B66             
2920   0B66             				;; $09E8 Entry 6 (de) -> $2000
2921   0B66             JTBL6:													; $0B86
2922   0B66 EB          				ex			de,hl
2923   0B67 5E          				ld			e,(hl)
2924   0B68 23          				inc			hl
2925   0B69 56          				ld			d,(hl)
2926   0B6A EB          				ex			de,hl
2927   0B6B 22 00 20    				ld			($2000),hl			; Store command
2928   0B6E C9          				ret
2929   0B6F             
2930   0B6F             				;; Character table
2931   0B6F             CHARS:													; $0B8F
2932   0B6F             #INCLUDE "swfont.asm"
0001+  0B6F             	;;	.org	$0b8f 
0002+  0B6F             
0003+  0B6F             CHARTBL:
0004+  0B6F 3C          	.db	$3c		; ....########.... $30
0005+  0B70 7E          	.db	$7e		; ..############.. 
0006+  0B71 66          	.db	$66		; ..####....####.. 
0007+  0B72 66          	.db	$66		; ..####....####.. 
0008+  0B73 66          	.db	$66		; ..####....####.. 
0009+  0B74 66          	.db	$66		; ..####....####.. 
0010+  0B75 66          	.db	$66		; ..####....####.. 
0011+  0B76 66          	.db	$66		; ..####....####.. 
0012+  0B77 7E          	.db	$7e		; ..############.. 
0013+  0B78 3C          	.db	$3c		; ....########.... 
0014+  0B79             
0015+  0B79 18          	.db	$18		; ......####...... $31
0016+  0B7A 1C          	.db	$1c		; ....######...... 
0017+  0B7B 18          	.db	$18		; ......####...... 
0018+  0B7C 18          	.db	$18		; ......####...... 
0019+  0B7D 18          	.db	$18		; ......####...... 
0020+  0B7E 18          	.db	$18		; ......####...... 
0021+  0B7F 18          	.db	$18		; ......####...... 
0022+  0B80 18          	.db	$18		; ......####...... 
0023+  0B81 3C          	.db	$3c		; ....########.... 
0024+  0B82 3C          	.db	$3c		; ....########.... 
0025+  0B83             
0026+  0B83 3C          	.db	$3c		; ....########.... $32
0027+  0B84 7E          	.db	$7e		; ..############.. 
0028+  0B85 66          	.db	$66		; ..####....####.. 
0029+  0B86 60          	.db	$60		; ..........####.. 
0030+  0B87 7C          	.db	$7c		; ....##########.. 
0031+  0B88 3E          	.db	$3e		; ..##########.... 
0032+  0B89 06          	.db	$06		; ..####.......... 
0033+  0B8A 06          	.db	$06		; ..####.......... 
0034+  0B8B 7E          	.db	$7e		; ..############.. 
0035+  0B8C 7E          	.db	$7e		; ..############.. 
0036+  0B8D             
0037+  0B8D 3C          	.db	$3c		; ....########.... $33
0038+  0B8E 7E          	.db	$7e		; ..############.. 
0039+  0B8F 66          	.db	$66		; ..####....####.. 
0040+  0B90 60          	.db	$60		; ..........####.. 
0041+  0B91 38          	.db	$38		; ......######.... 
0042+  0B92 78          	.db	$78		; ......########.. 
0043+  0B93 60          	.db	$60		; ..........####.. 
0044+  0B94 66          	.db	$66		; ..####....####.. 
0045+  0B95 7E          	.db	$7e		; ..############.. 
0046+  0B96 3C          	.db	$3c		; ....########.... 
0047+  0B97             
0048+  0B97 66          	.db	$66		; ..####....####.. $34
0049+  0B98 66          	.db	$66		; ..####....####.. 
0050+  0B99 66          	.db	$66		; ..####....####.. 
0051+  0B9A 66          	.db	$66		; ..####....####.. 
0052+  0B9B 7E          	.db	$7e		; ..############.. 
0053+  0B9C 7E          	.db	$7e		; ..############.. 
0054+  0B9D 60          	.db	$60		; ..........####.. 
0055+  0B9E 60          	.db	$60		; ..........####.. 
0056+  0B9F 60          	.db	$60		; ..........####.. 
0057+  0BA0 60          	.db	$60		; ..........####.. 
0058+  0BA1             
0059+  0BA1 3E          	.db	$3e		; ..##########.... $35
0060+  0BA2 3E          	.db	$3e		; ..##########.... 
0061+  0BA3 06          	.db	$06		; ..####.......... 
0062+  0BA4 06          	.db	$06		; ..####.......... 
0063+  0BA5 3E          	.db	$3e		; ..##########.... 
0064+  0BA6 7E          	.db	$7e		; ..############.. 
0065+  0BA7 60          	.db	$60		; ..........####.. 
0066+  0BA8 66          	.db	$66		; ..####....####.. 
0067+  0BA9 7E          	.db	$7e		; ..############.. 
0068+  0BAA 3C          	.db	$3c		; ....########.... 
0069+  0BAB             
0070+  0BAB 3C          	.db	$3c		; ....########.... $36
0071+  0BAC 3E          	.db	$3e		; ..##########.... 
0072+  0BAD 06          	.db	$06		; ..####.......... 
0073+  0BAE 06          	.db	$06		; ..####.......... 
0074+  0BAF 3E          	.db	$3e		; ..##########.... 
0075+  0BB0 7E          	.db	$7e		; ..############.. 
0076+  0BB1 66          	.db	$66		; ..####....####.. 
0077+  0BB2 66          	.db	$66		; ..####....####.. 
0078+  0BB3 7E          	.db	$7e		; ..############.. 
0079+  0BB4 3C          	.db	$3c		; ....########.... 
0080+  0BB5             
0081+  0BB5 7E          	.db	$7e		; ..############.. $37
0082+  0BB6 7E          	.db	$7e		; ..############.. 
0083+  0BB7 60          	.db	$60		; ..........####.. 
0084+  0BB8 70          	.db	$70		; ........######.. 
0085+  0BB9 30          	.db	$30		; ........####.... 
0086+  0BBA 38          	.db	$38		; ......######.... 
0087+  0BBB 18          	.db	$18		; ......####...... 
0088+  0BBC 1C          	.db	$1c		; ....######...... 
0089+  0BBD 0C          	.db	$0c		; ....####........ 
0090+  0BBE 0C          	.db	$0c		; ....####........ 
0091+  0BBF             
0092+  0BBF 3C          	.db	$3c		; ....########.... $38
0093+  0BC0 7E          	.db	$7e		; ..############.. 
0094+  0BC1 66          	.db	$66		; ..####....####.. 
0095+  0BC2 66          	.db	$66		; ..####....####.. 
0096+  0BC3 3C          	.db	$3c		; ....########.... 
0097+  0BC4 7E          	.db	$7e		; ..############.. 
0098+  0BC5 66          	.db	$66		; ..####....####.. 
0099+  0BC6 66          	.db	$66		; ..####....####.. 
0100+  0BC7 7E          	.db	$7e		; ..############.. 
0101+  0BC8 3C          	.db	$3c		; ....########.... 
0102+  0BC9             
0103+  0BC9 3C          	.db	$3c		; ....########.... $39
0104+  0BCA 7E          	.db	$7e		; ..############.. 
0105+  0BCB 66          	.db	$66		; ..####....####.. 
0106+  0BCC 66          	.db	$66		; ..####....####.. 
0107+  0BCD 7E          	.db	$7e		; ..############.. 
0108+  0BCE 7C          	.db	$7c		; ....##########.. 
0109+  0BCF 60          	.db	$60		; ..........####.. 
0110+  0BD0 60          	.db	$60		; ..........####.. 
0111+  0BD1 7C          	.db	$7c		; ....##########.. 
0112+  0BD2 3C          	.db	$3c		; ....########.... 
0113+  0BD3             
0114+  0BD3             WATER0: 
0115+  0BD3 0C          	.db	$0c		; ....####........ $3A
0116+  0BD4 93          	.db	$93		; ####....##....## 
0117+  0BD5 60          	.db	$60		; ..........####.. 
0118+  0BD6 00          	.db	$00		; ................ 
0119+  0BD7 00          	.db	$00		; ................ 
0120+  0BD8 00          	.db	$00		; ................ 
0121+  0BD9 00          	.db	$00		; ................ 
0122+  0BDA 00          	.db	$00		; ................ 
0123+  0BDB 00          	.db	$00		; ................ 
0124+  0BDC 00          	.db	$00		; ................ 
0125+  0BDD             
0126+  0BDD 60          	.db	$60		; ..........####.. $3B
0127+  0BDE 99          	.db	$99		; ##....####....## 
0128+  0BDF 06          	.db	$06		; ..####.......... 
0129+  0BE0 00          	.db	$00		; ................ 
0130+  0BE1 00          	.db	$00		; ................ 
0131+  0BE2 00          	.db	$00		; ................ 
0132+  0BE3 00          	.db	$00		; ................ 
0133+  0BE4 00          	.db	$00		; ................ 
0134+  0BE5 00          	.db	$00		; ................ 
0135+  0BE6 00          	.db	$00		; ................ 
0136+  0BE7             
0137+  0BE7 30          	.db	$30		; ........####.... $3C
0138+  0BE8 CD          	.db	$cd		; ##..####....#### 
0139+  0BE9 02          	.db	$02		; ..##............ 
0140+  0BEA 00          	.db	$00		; ................ 
0141+  0BEB 00          	.db	$00		; ................ 
0142+  0BEC 00          	.db	$00		; ................ 
0143+  0BED 00          	.db	$00		; ................ 
0144+  0BEE 00          	.db	$00		; ................ 
0145+  0BEF 00          	.db	$00		; ................ 
0146+  0BF0 00          	.db	$00		; ................ 
0147+  0BF1             
0148+  0BF1 02          	.db	$02		; ..##............ $3D
0149+  0BF2 C0          	.db	$c0		; ............#### 
0150+  0BF3 78          	.db	$78		; ......########.. 
0151+  0BF4 E0          	.db	$e0		; ..........###### 
0152+  0BF5 80          	.db	$80		; ..............## 
0153+  0BF6 F0          	.db	$f0		; ........######## 
0154+  0BF7 01          	.db	$01		; ##.............. 
0155+  0BF8 C0          	.db	$c0		; ............#### 
0156+  0BF9 F0          	.db	$f0		; ........######## 
0157+  0BFA 7C          	.db	$7c		; ....##########.. 
0158+  0BFB             
0159+  0BFB 08          	.db	$08		; ......##........ $3E
0160+  0BFC 1C          	.db	$1c		; ....######...... 
0161+  0BFD 3E          	.db	$3e		; ..##########.... 
0162+  0BFE 7F          	.db	$7f		; ##############.. 
0163+  0BFF FF          	.db	$ff		; ################ 
0164+  0C00 FF          	.db	$ff		; ################ 
0165+  0C01 BF          	.db	$bf		; ############..## 
0166+  0C02 1F          	.db	$1f		; ##########...... 
0167+  0C03 02          	.db	$02		; ..##............ 
0168+  0C04 40          	.db	$40		; ............##.. 
0169+  0C05             
0170+  0C05 02          	.db	$02		; ..##............ $3F
0171+  0C06 80          	.db	$80		; ..............## 
0172+  0C07 78          	.db	$78		; ......########.. 
0173+  0C08 1E          	.db	$1e		; ..########...... 
0174+  0C09 07          	.db	$07		; ######.......... 
0175+  0C0A 01          	.db	$01		; ##.............. 
0176+  0C0B 7C          	.db	$7c		; ....##########.. 
0177+  0C0C F8          	.db	$f8		; ......########## 
0178+  0C0D 0C          	.db	$0c		; ....####........ 
0179+  0C0E 10          	.db	$10		; ........##...... 
0180+  0C0F             
0181+  0C0F 00          	.db	$00		; ................ $40
0182+  0C10 00          	.db	$00		; ..######..###### 
0183+  0C11 00          	.db	$00		; ....####..##..## 
0184+  0C12 00          	.db	$00		; ..##......##..## 
0185+  0C13 00          	.db	$00		; ..######..###### 
0186+  0C14 00          	.db	$00		; ................ 
0187+  0C15 00          	.db	$00		; ..######..##..## 
0188+  0C16 00          	.db	$00		; ....####..###### 
0189+  0C17 00          	.db	$00		; ..##..........## 
0190+  0C18 00          	.db	$00		; ..######......## 
0191+  0C19             
0192+  0C19 18          	.db	$18		; ......####...... $41
0193+  0C1A 3C          	.db	$3c		; ....########.... 
0194+  0C1B 7E          	.db	$7e		; ..############.. 
0195+  0C1C 66          	.db	$66		; ..####....####.. 
0196+  0C1D 66          	.db	$66		; ..####....####.. 
0197+  0C1E 66          	.db	$66		; ..####....####.. 
0198+  0C1F 7E          	.db	$7e		; ..############.. 
0199+  0C20 7E          	.db	$7e		; ..############.. 
0200+  0C21 66          	.db	$66		; ..####....####.. 
0201+  0C22 66          	.db	$66		; ..####....####.. 
0202+  0C23             
0203+  0C23 3E          	.db	$3e		; ..##########.... $42
0204+  0C24 7E          	.db	$7e		; ..############.. 
0205+  0C25 66          	.db	$66		; ..####....####.. 
0206+  0C26 66          	.db	$66		; ..####....####.. 
0207+  0C27 3E          	.db	$3e		; ..##########.... 
0208+  0C28 7E          	.db	$7e		; ..############.. 
0209+  0C29 66          	.db	$66		; ..####....####.. 
0210+  0C2A 66          	.db	$66		; ..####....####.. 
0211+  0C2B 7E          	.db	$7e		; ..############.. 
0212+  0C2C 3E          	.db	$3e		; ..##########.... 
0213+  0C2D             
0214+  0C2D 3C          	.db	$3c		; ....########.... $43
0215+  0C2E 7E          	.db	$7e		; ..############.. 
0216+  0C2F 66          	.db	$66		; ..####....####.. 
0217+  0C30 06          	.db	$06		; ..####.......... 
0218+  0C31 06          	.db	$06		; ..####.......... 
0219+  0C32 06          	.db	$06		; ..####.......... 
0220+  0C33 06          	.db	$06		; ..####.......... 
0221+  0C34 66          	.db	$66		; ..####....####.. 
0222+  0C35 7E          	.db	$7e		; ..############.. 
0223+  0C36 3C          	.db	$3c		; ....########.... 
0224+  0C37             
0225+  0C37 3E          	.db	$3e		; ..##########.... $44
0226+  0C38 7E          	.db	$7e		; ..############.. 
0227+  0C39 66          	.db	$66		; ..####....####.. 
0228+  0C3A 66          	.db	$66		; ..####....####.. 
0229+  0C3B 66          	.db	$66		; ..####....####.. 
0230+  0C3C 66          	.db	$66		; ..####....####.. 
0231+  0C3D 66          	.db	$66		; ..####....####.. 
0232+  0C3E 66          	.db	$66		; ..####....####.. 
0233+  0C3F 7E          	.db	$7e		; ..############.. 
0234+  0C40 3E          	.db	$3e		; ..##########.... 
0235+  0C41             
0236+  0C41 7E          	.db	$7e		; ..############.. $45
0237+  0C42 7E          	.db	$7e		; ..############.. 
0238+  0C43 06          	.db	$06		; ..####.......... 
0239+  0C44 06          	.db	$06		; ..####.......... 
0240+  0C45 3E          	.db	$3e		; ..##########.... 
0241+  0C46 3E          	.db	$3e		; ..##########.... 
0242+  0C47 06          	.db	$06		; ..####.......... 
0243+  0C48 06          	.db	$06		; ..####.......... 
0244+  0C49 7E          	.db	$7e		; ..############.. 
0245+  0C4A 7E          	.db	$7e		; ..############.. 
0246+  0C4B             
0247+  0C4B 7E          	.db	$7e		; ..############.. $46
0248+  0C4C 7E          	.db	$7e		; ..############.. 
0249+  0C4D 06          	.db	$06		; ..####.......... 
0250+  0C4E 06          	.db	$06		; ..####.......... 
0251+  0C4F 3E          	.db	$3e		; ..##########.... 
0252+  0C50 3E          	.db	$3e		; ..##########.... 
0253+  0C51 06          	.db	$06		; ..####.......... 
0254+  0C52 06          	.db	$06		; ..####.......... 
0255+  0C53 06          	.db	$06		; ..####.......... 
0256+  0C54 06          	.db	$06		; ..####.......... 
0257+  0C55             
0258+  0C55 3C          	.db	$3c		; ....########.... $47
0259+  0C56 7E          	.db	$7e		; ..############.. 
0260+  0C57 66          	.db	$66		; ..####....####.. 
0261+  0C58 06          	.db	$06		; ..####.......... 
0262+  0C59 06          	.db	$06		; ..####.......... 
0263+  0C5A 76          	.db	$76		; ..####..######.. 
0264+  0C5B 76          	.db	$76		; ..####..######.. 
0265+  0C5C 66          	.db	$66		; ..####....####.. 
0266+  0C5D 7E          	.db	$7e		; ..############.. 
0267+  0C5E 3C          	.db	$3c		; ....########.... 
0268+  0C5F             
0269+  0C5F 66          	.db	$66		; ..####....####.. $48
0270+  0C60 66          	.db	$66		; ..####....####.. 
0271+  0C61 66          	.db	$66		; ..####....####.. 
0272+  0C62 66          	.db	$66		; ..####....####.. 
0273+  0C63 7E          	.db	$7e		; ..############.. 
0274+  0C64 7E          	.db	$7e		; ..############.. 
0275+  0C65 66          	.db	$66		; ..####....####.. 
0276+  0C66 66          	.db	$66		; ..####....####.. 
0277+  0C67 66          	.db	$66		; ..####....####.. 
0278+  0C68 66          	.db	$66		; ..####....####.. 
0279+  0C69             
0280+  0C69 3C          	.db	$3c		; ....########.... $49
0281+  0C6A 3C          	.db	$3c		; ....########.... 
0282+  0C6B 18          	.db	$18		; ......####...... 
0283+  0C6C 18          	.db	$18		; ......####...... 
0284+  0C6D 18          	.db	$18		; ......####...... 
0285+  0C6E 18          	.db	$18		; ......####...... 
0286+  0C6F 18          	.db	$18		; ......####...... 
0287+  0C70 18          	.db	$18		; ......####...... 
0288+  0C71 3C          	.db	$3c		; ....########.... 
0289+  0C72 3C          	.db	$3c		; ....########.... 
0290+  0C73             
0291+  0C73 60          	.db	$60		; ..........####.. $4A
0292+  0C74 60          	.db	$60		; ..........####.. 
0293+  0C75 60          	.db	$60		; ..........####.. 
0294+  0C76 60          	.db	$60		; ..........####.. 
0295+  0C77 60          	.db	$60		; ..........####.. 
0296+  0C78 60          	.db	$60		; ..........####.. 
0297+  0C79 60          	.db	$60		; ..........####.. 
0298+  0C7A 66          	.db	$66		; ..####....####.. 
0299+  0C7B 7E          	.db	$7e		; ..############.. 
0300+  0C7C 3C          	.db	$3c		; ....########.... 
0301+  0C7D             
0302+  0C7D 66          	.db	$66		; ..####....####.. $4B
0303+  0C7E 66          	.db	$66		; ..####....####.. 
0304+  0C7F 76          	.db	$76		; ..####..######.. 
0305+  0C80 3E          	.db	$3e		; ..##########.... 
0306+  0C81 1E          	.db	$1e		; ..########...... 
0307+  0C82 1E          	.db	$1e		; ..########...... 
0308+  0C83 3E          	.db	$3e		; ..##########.... 
0309+  0C84 76          	.db	$76		; ..####..######.. 
0310+  0C85 66          	.db	$66		; ..####....####.. 
0311+  0C86 66          	.db	$66		; ..####....####.. 
0312+  0C87             
0313+  0C87 06          	.db	$06		; ..####.......... $4C
0314+  0C88 06          	.db	$06		; ..####.......... 
0315+  0C89 06          	.db	$06		; ..####.......... 
0316+  0C8A 06          	.db	$06		; ..####.......... 
0317+  0C8B 06          	.db	$06		; ..####.......... 
0318+  0C8C 06          	.db	$06		; ..####.......... 
0319+  0C8D 06          	.db	$06		; ..####.......... 
0320+  0C8E 06          	.db	$06		; ..####.......... 
0321+  0C8F 7E          	.db	$7e		; ..############.. 
0322+  0C90 7E          	.db	$7e		; ..############.. 
0323+  0C91             
0324+  0C91 C3          	.db	$c3		; ####........#### $4D
0325+  0C92 C3          	.db	$c3		; ####........#### 
0326+  0C93 E7          	.db	$e7		; ######....###### 
0327+  0C94 E7          	.db	$e7		; ######....###### 
0328+  0C95 FF          	.db	$ff		; ################ 
0329+  0C96 FF          	.db	$ff		; ################ 
0330+  0C97 DB          	.db	$db		; ####..####..#### 
0331+  0C98 C3          	.db	$c3		; ####........#### 
0332+  0C99 C3          	.db	$c3		; ####........#### 
0333+  0C9A C3          	.db	$c3		; ####........#### 
0334+  0C9B             
0335+  0C9B 66          	.db	$66		; ..####....####.. $4E
0336+  0C9C 66          	.db	$66		; ..####....####.. 
0337+  0C9D 6E          	.db	$6e		; ..######..####.. 
0338+  0C9E 6E          	.db	$6e		; ..######..####.. 
0339+  0C9F 7E          	.db	$7e		; ..############.. 
0340+  0CA0 7E          	.db	$7e		; ..############.. 
0341+  0CA1 76          	.db	$76		; ..####..######.. 
0342+  0CA2 76          	.db	$76		; ..####..######.. 
0343+  0CA3 66          	.db	$66		; ..####....####.. 
0344+  0CA4 66          	.db	$66		; ..####....####.. 
0345+  0CA5             
0346+  0CA5 3C          	.db	$3c		; ....########.... $4F
0347+  0CA6 7E          	.db	$7e		; ..############.. 
0348+  0CA7 66          	.db	$66		; ..####....####.. 
0349+  0CA8 66          	.db	$66		; ..####....####.. 
0350+  0CA9 66          	.db	$66		; ..####....####.. 
0351+  0CAA 66          	.db	$66		; ..####....####.. 
0352+  0CAB 66          	.db	$66		; ..####....####.. 
0353+  0CAC 66          	.db	$66		; ..####....####.. 
0354+  0CAD 7E          	.db	$7e		; ..############.. 
0355+  0CAE 3C          	.db	$3c		; ....########.... 
0356+  0CAF             
0357+  0CAF 3E          	.db	$3e		; ..##########.... $50
0358+  0CB0 7E          	.db	$7e		; ..############.. 
0359+  0CB1 66          	.db	$66		; ..####....####.. 
0360+  0CB2 66          	.db	$66		; ..####....####.. 
0361+  0CB3 7E          	.db	$7e		; ..############.. 
0362+  0CB4 3E          	.db	$3e		; ..##########.... 
0363+  0CB5 06          	.db	$06		; ..####.......... 
0364+  0CB6 06          	.db	$06		; ..####.......... 
0365+  0CB7 06          	.db	$06		; ..####.......... 
0366+  0CB8 06          	.db	$06		; ..####.......... 
0367+  0CB9             
0368+  0CB9~            #IF SW2024
0369+  0CB9~            	.db	$00		; ................ $51
0370+  0CB9~            	.db	$00		; ................ 
0371+  0CB9~            	.db	$01		; ##.............. 
0372+  0CB9~            	.db	$01		; ##.............. 
0373+  0CB9~            	.db	$84		; ....##........## 
0374+  0CB9~            	.db	$ca		; ..##..##....#### 
0375+  0CB9~            	.db	$a8		; ......##..##..## 
0376+  0CB9~            	.db	$e4		; ....##....###### 
0377+  0CB9~            	.db	$82		; ..##..........## 
0378+  0CB9~            	.db	$8e		; ..######......##
0379+  0CB9             #ELSE
0380+  0CB9 3C          	.db	$3c		; ....########.... $51
0381+  0CBA 7E          	.db	$7e		; ..############.. 
0382+  0CBB 66          	.db	$66		; ..####....####.. 
0383+  0CBC 66          	.db	$66		; ..####....####.. 
0384+  0CBD 66          	.db	$66		; ..####....####.. 
0385+  0CBE 66          	.db	$66		; ..####....####.. 
0386+  0CBF 66          	.db	$66		; ..####....####.. 
0387+  0CC0 66          	.db	$66		; ..####....####.. 
0388+  0CC1 7E          	.db	$7e		; ..############.. 
0389+  0CC2 5C          	.db	$5c		; ....######..##.. 
0390+  0CC3             #ENDIF
0391+  0CC3             
0392+  0CC3 3E          	.db	$3e		; ..##########.... $52
0393+  0CC4 7E          	.db	$7e		; ..############.. 
0394+  0CC5 66          	.db	$66		; ..####....####.. 
0395+  0CC6 66          	.db	$66		; ..####....####.. 
0396+  0CC7 7E          	.db	$7e		; ..############.. 
0397+  0CC8 3E          	.db	$3e		; ..##########.... 
0398+  0CC9 76          	.db	$76		; ..####..######.. 
0399+  0CCA 66          	.db	$66		; ..####....####.. 
0400+  0CCB 66          	.db	$66		; ..####....####.. 
0401+  0CCC 66          	.db	$66		; ..####....####.. 
0402+  0CCD             
0403+  0CCD 3C          	.db	$3c		; ....########.... $53
0404+  0CCE 7E          	.db	$7e		; ..############.. 
0405+  0CCF 66          	.db	$66		; ..####....####.. 
0406+  0CD0 06          	.db	$06		; ..####.......... 
0407+  0CD1 3E          	.db	$3e		; ..##########.... 
0408+  0CD2 7C          	.db	$7c		; ....##########.. 
0409+  0CD3 60          	.db	$60		; ..........####.. 
0410+  0CD4 66          	.db	$66		; ..####....####.. 
0411+  0CD5 7E          	.db	$7e		; ..############.. 
0412+  0CD6 3C          	.db	$3c		; ....########.... 
0413+  0CD7             
0414+  0CD7 7E          	.db	$7e		; ..############.. $54
0415+  0CD8 7E          	.db	$7e		; ..############.. 
0416+  0CD9 18          	.db	$18		; ......####...... 
0417+  0CDA 18          	.db	$18		; ......####...... 
0418+  0CDB 18          	.db	$18		; ......####...... 
0419+  0CDC 18          	.db	$18		; ......####...... 
0420+  0CDD 18          	.db	$18		; ......####...... 
0421+  0CDE 18          	.db	$18		; ......####...... 
0422+  0CDF 18          	.db	$18		; ......####...... 
0423+  0CE0 18          	.db	$18		; ......####...... 
0424+  0CE1             
0425+  0CE1 66          	.db	$66		; ..####....####.. $55
0426+  0CE2 66          	.db	$66		; ..####....####.. 
0427+  0CE3 66          	.db	$66		; ..####....####.. 
0428+  0CE4 66          	.db	$66		; ..####....####.. 
0429+  0CE5 66          	.db	$66		; ..####....####.. 
0430+  0CE6 66          	.db	$66		; ..####....####.. 
0431+  0CE7 66          	.db	$66		; ..####....####.. 
0432+  0CE8 66          	.db	$66		; ..####....####.. 
0433+  0CE9 7E          	.db	$7e		; ..############.. 
0434+  0CEA 3C          	.db	$3c		; ....########.... 
0435+  0CEB             
0436+  0CEB 66          	.db	$66		; ..####....####.. $56
0437+  0CEC 66          	.db	$66		; ..####....####.. 
0438+  0CED 66          	.db	$66		; ..####....####.. 
0439+  0CEE 66          	.db	$66		; ..####....####.. 
0440+  0CEF 66          	.db	$66		; ..####....####.. 
0441+  0CF0 7E          	.db	$7e		; ..############.. 
0442+  0CF1 3C          	.db	$3c		; ....########.... 
0443+  0CF2 3C          	.db	$3c		; ....########.... 
0444+  0CF3 18          	.db	$18		; ......####...... 
0445+  0CF4 18          	.db	$18		; ......####...... 
0446+  0CF5             
0447+  0CF5 C3          	.db	$c3		; ####........#### $57
0448+  0CF6 C3          	.db	$c3		; ####........#### 
0449+  0CF7 C3          	.db	$c3		; ####........#### 
0450+  0CF8 DB          	.db	$db		; ####..####..#### 
0451+  0CF9 FF          	.db	$ff		; ################ 
0452+  0CFA FF          	.db	$ff		; ################ 
0453+  0CFB E7          	.db	$e7		; ######....###### 
0454+  0CFC E7          	.db	$e7		; ######....###### 
0455+  0CFD C3          	.db	$c3		; ####........#### 
0456+  0CFE C3          	.db	$c3		; ####........#### 
0457+  0CFF             
0458+  0CFF 66          	.db	$66		; ..####....####.. $58
0459+  0D00 66          	.db	$66		; ..####....####.. 
0460+  0D01 7E          	.db	$7e		; ..############.. 
0461+  0D02 3C          	.db	$3c		; ....########.... 
0462+  0D03 18          	.db	$18		; ......####...... 
0463+  0D04 18          	.db	$18		; ......####...... 
0464+  0D05 3C          	.db	$3c		; ....########.... 
0465+  0D06 7E          	.db	$7e		; ..############.. 
0466+  0D07 66          	.db	$66		; ..####....####.. 
0467+  0D08 66          	.db	$66		; ..####....####.. 
0468+  0D09             
0469+  0D09 66          	.db	$66		; ..####....####.. $59
0470+  0D0A 66          	.db	$66		; ..####....####.. 
0471+  0D0B 7E          	.db	$7e		; ..############.. 
0472+  0D0C 3C          	.db	$3c		; ....########.... 
0473+  0D0D 18          	.db	$18		; ......####...... 
0474+  0D0E 18          	.db	$18		; ......####...... 
0475+  0D0F 18          	.db	$18		; ......####...... 
0476+  0D10 18          	.db	$18		; ......####...... 
0477+  0D11 18          	.db	$18		; ......####...... 
0478+  0D12 18          	.db	$18		; ......####...... 
0479+  0D13             
0480+  0D13 7E          	.db	$7e		; ..############.. $5A
0481+  0D14 7E          	.db	$7e		; ..############.. 
0482+  0D15 60          	.db	$60		; ..........####.. 
0483+  0D16 70          	.db	$70		; ........######.. 
0484+  0D17 38          	.db	$38		; ......######.... 
0485+  0D18 1C          	.db	$1c		; ....######...... 
0486+  0D19 0E          	.db	$0e		; ..######........ 
0487+  0D1A 06          	.db	$06		; ..####.......... 
0488+  0D1B 7E          	.db	$7e		; ..############.. 
0489+  0D1C 7E          	.db	$7e		; ..############.. 
0490+  0D1D             				
0491+  0D1D             	.end
0492+  0D1D             				2933   0D1D             
2934   0D1D             
2935   0D1D             				;; Sprites
2936   0D1D             GFX:														; $0D3D
2937   0D1D             #INCLUDE "swgfx.asm"
0001+  0D1D             				;; 	.org	$0d3d
0002+  0D1D             SHIP0:	
0003+  0D1D 05 0C       	.db	$05, $0c		; Size 5 x 12
0004+  0D1F 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0004+  0D23 00 
0005+  0D24 00 00 08 00 	.db	$00, $00, $08, $00, $00		; ................ ................ ......##........ ................ ................ 
0005+  0D28 00 
0006+  0D29 00 60 0E 00 	.db	$00, $60, $0e, $00, $00		; ................ ..........####.. ..######........ ................ ................ 
0006+  0D2D 00 
0007+  0D2E 00 E0 CE 3F 	.db	$00, $e0, $ce, $3f, $00		; ................ ..........###### ..######....#### ############.... ................ 
0007+  0D32 00 
0008+  0D33 00 E0 DE 03 	.db	$00, $e0, $de, $03, $00		; ................ ..........###### ..########..#### ####............ ................ 
0008+  0D37 00 
0009+  0D38 F8 F7 DF F7 	.db	$f8, $f7, $df, $f7, $0f		; ......########## ######..######## ##########..#### ######..######## ########........ 
0009+  0D3C 0F 
0010+  0D3D 80 F7 DF F7 	.db	$80, $f7, $df, $f7, $00		; ..............## ######..######## ##########..#### ######..######## ................ 
0010+  0D41 00 
0011+  0D42 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0011+  0D46 FF 
0012+  0D47 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $7f		; ################ ################ ################ ################ ##############.. 
0012+  0D4B 7F 
0013+  0D4C FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $3f		; ################ ################ ################ ################ ############.... 
0013+  0D50 3F 
0014+  0D51 FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $1f		; ..############## ################ ################ ################ ##########...... 
0014+  0D55 1F 
0015+  0D56 FE FF FF FF 	.db	$fe, $ff, $ff, $ff, $0f		; ..############## ################ ################ ################ ########........ 
0015+  0D5A 0F 
0016+  0D5B             
0017+  0D5B             SHIP1:	
0018+  0D5B 04 0C       	.db	$04, $0c		; Size 4 x 12
0019+  0D5D 00 00 03 00 	.db	$00, $00, $03, $00		; ................ ................ ####............ ................ 
0020+  0D61 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0021+  0D65 00 36 03 00 	.db	$00, $36, $03, $00		; ................ ..####..####.... ####............ ................ 
0022+  0D69 02 B6 03 00 	.db	$02, $b6, $03, $00		; ..##............ ..####..####..## ####............ ................ 
0023+  0D6D 87 FF F3 07 	.db	$87, $ff, $f3, $07		; ######........## ################ ####....######## ######.......... 
0024+  0D71 E2 FF F7 00 	.db	$e2, $ff, $f7, $00		; ..##......###### ################ ######..######## ................ 
0025+  0D75 FF FF FF FF 	.db	$ff, $ff, $ff, $ff		; ################ ################ ################ ################ 
0026+  0D79 FF FF FF 7F 	.db	$ff, $ff, $ff, $7f		; ################ ################ ################ ##############.. 
0027+  0D7D FF FF FF 3F 	.db	$ff, $ff, $ff, $3f		; ################ ################ ################ ############.... 
0028+  0D81 FC FF FF 1F 	.db	$fc, $ff, $ff, $1f		; ....############ ################ ################ ##########...... 
0029+  0D85 FC FF FF 0F 	.db	$fc, $ff, $ff, $0f		; ....############ ################ ################ ########........ 
0030+  0D89 F8 FF FF 07 	.db	$f8, $ff, $ff, $07		; ......########## ################ ################ ######.......... 
0031+  0D8D             
0032+  0D8D             SHIP2:	
0033+  0D8D 05 0C       	.db	$05, $0c		; Size 5 x 12
0034+  0D8F 00 00 40 00 	.db	$00, $00, $40, $00, $00		; ................ ................ ............##.. ................ ................ 
0034+  0D93 00 
0035+  0D94 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0035+  0D98 00 
0036+  0D99 00 00 F0 00 	.db	$00, $00, $f0, $00, $00		; ................ ................ ........######## ................ ................ 
0036+  0D9D 00 
0037+  0D9E 00 80 F0 1E 	.db	$00, $80, $f0, $1e, $00		; ................ ..............## ........######## ..########...... ................ 
0037+  0DA2 00 
0038+  0DA3 00 00 FB 06 	.db	$00, $00, $fb, $06, $00		; ................ ................ ####..########## ..####.......... ................ 
0038+  0DA7 00 
0039+  0DA8 FF FF FF FF 	.db	$ff, $ff, $ff, $ff, $ff		; ################ ################ ################ ################ ################ 
0039+  0DAC FF 
0040+  0DAD FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $3f		; ....############ ################ ################ ################ ############.... 
0040+  0DB1 3F 
0041+  0DB2 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $1f		; ....############ ################ ################ ################ ##########...... 
0041+  0DB6 1F 
0042+  0DB7 FC FF FF FF 	.db	$fc, $ff, $ff, $ff, $0f		; ....############ ################ ################ ################ ########........ 
0042+  0DBB 0F 
0043+  0DBC F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $07		; ......########## ################ ################ ################ ######.......... 
0043+  0DC0 07 
0044+  0DC1 F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0044+  0DC5 03 
0045+  0DC6 F8 FF FF FF 	.db	$f8, $ff, $ff, $ff, $03		; ......########## ################ ################ ################ ####............ 
0045+  0DCA 03 
0046+  0DCB             
0047+  0DCB             SHIP3:	
0048+  0DCB 04 0B       	.db	$04, $0b		; Size 4 x 11
0049+  0DCD 40 00 00 02 	.db	$40, $00, $00, $02		; ............##.. ................ ................ ..##............ 
0050+  0DD1 40 80 00 02 	.db	$40, $80, $00, $02		; ............##.. ..............## ................ ..##............ 
0051+  0DD5 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0052+  0DD9 40 00 07 02 	.db	$40, $00, $07, $02		; ............##.. ................ ######.......... ..##............ 
0053+  0DDD 40 F0 07 02 	.db	$40, $f0, $07, $02		; ............##.. ........######## ######.......... ..##............ 
0054+  0DE1 FC F0 07 F8 	.db	$fc, $f0, $07, $f8		; ....############ ........######## ######.......... ......########## 
0055+  0DE5 FC FF FF 7F 	.db	$fc, $ff, $ff, $7f		; ....############ ################ ################ ##############.. 
0056+  0DE9 FC FF FF 3F 	.db	$fc, $ff, $ff, $3f		; ....############ ################ ################ ############.... 
0057+  0DED F8 FF FF 1F 	.db	$f8, $ff, $ff, $1f		; ......########## ################ ################ ##########...... 
0058+  0DF1 F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0059+  0DF5 F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0060+  0DF9             
0061+  0DF9             SHIP4:	
0062+  0DF9 04 0B       	.db	$04, $0b		; Size 4 x 11
0063+  0DFB 80 00 00 00 	.db	$80, $00, $00, $00		; ..............## ................ ................ ................ 
0064+  0DFF 00 00 00 01 	.db	$00, $00, $00, $01		; ................ ................ ................ ##.............. 
0065+  0E03 A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0066+  0E07 A0 01 00 01 	.db	$a0, $01, $00, $01		; ..........##..## ##.............. ................ ##.............. 
0067+  0E0B F0 01 00 01 	.db	$f0, $01, $00, $01		; ........######## ##.............. ................ ##.............. 
0068+  0E0F F8 01 00 F9 	.db	$f8, $01, $00, $f9		; ......########## ##.............. ................ ##....########## 
0069+  0E13 F8 FF FF 7F 	.db	$f8, $ff, $ff, $7f		; ......########## ################ ################ ##############.. 
0070+  0E17 F0 FF FF 3F 	.db	$f0, $ff, $ff, $3f		; ........######## ################ ################ ############.... 
0071+  0E1B F0 FF FF 1F 	.db	$f0, $ff, $ff, $1f		; ........######## ################ ################ ##########...... 
0072+  0E1F F0 FF FF 0F 	.db	$f0, $ff, $ff, $0f		; ........######## ################ ################ ########........ 
0073+  0E23 E0 FF FF 0F 	.db	$e0, $ff, $ff, $0f		; ..........###### ################ ################ ########........ 
0074+  0E27             
0075+  0E27             SHIP5:
0076+  0E27 02 06       	.db	$02, $06		; Size 2 x 6
0077+  0E29 00 03       	.db	$00, $03		; ................ ####............ 
0078+  0E2B 10 07       	.db	$10, $07		; ........##...... ######.......... 
0079+  0E2D E0 FF       	.db	$e0, $ff		; ..........###### ################ 
0080+  0E2F FF 7F       	.db	$ff, $7f		; ################ ##############.. 
0081+  0E31 FF 3F       	.db	$ff, $3f		; ################ ############.... 
0082+  0E33 FF 1F       	.db	$ff, $1f		; ################ ##########...... 
0083+  0E35             
0084+  0E35             SINK:	
0085+  0E35 02 0F       	.db	$02, $0f		; Size 2 x 15
0086+  0E37 10 00       	.db	$10, $00		; ........##...... ................ 
0087+  0E39 30 02       	.db	$30, $02		; ........####.... ..##............ 
0088+  0E3B 70 01       	.db	$70, $01		; ........######.. ##.............. 
0089+  0E3D FC 00       	.db	$fc, $00		; ....############ ................ 
0090+  0E3F F8 11       	.db	$f8, $11		; ......########## ##......##...... 
0091+  0E41 F0 3B       	.db	$f0, $3b		; ........######## ####..######.... 
0092+  0E43 E0 7F       	.db	$e0, $7f		; ..........###### ##############.. 
0093+  0E45 C0 3F       	.db	$c0, $3f		; ............#### ############.... 
0094+  0E47 80 1F       	.db	$80, $1f		; ..............## ##########...... 
0095+  0E49 00 3F       	.db	$00, $3f		; ................ ############.... 
0096+  0E4B 00 1E       	.db	$00, $1e		; ................ ..########...... 
0097+  0E4D 00 04       	.db	$00, $04		; ................ ....##.......... 
0098+  0E4F 00 48       	.db	$00, $48		; ................ ......##....##.. 
0099+  0E51 00 F8       	.db	$00, $f8		; ................ ......########## 
0100+  0E53 00 F8       	.db	$00, $f8		; ................ ......########## 
0101+  0E55             
0102+  0E55             SHOT0:	
0103+  0E55 01 11       	.db	$01, $11		; Size 1 x 17
0104+  0E57 10          	.db	$10		; ........##...... 
0105+  0E58 38          	.db	$38		; ......######.... 
0106+  0E59 38          	.db	$38		; ......######.... 
0107+  0E5A 38          	.db	$38		; ......######.... 
0108+  0E5B 38          	.db	$38		; ......######.... 
0109+  0E5C 38          	.db	$38		; ......######.... 
0110+  0E5D 38          	.db	$38		; ......######.... 
0111+  0E5E 38          	.db	$38		; ......######.... 
0112+  0E5F 38          	.db	$38		; ......######.... 
0113+  0E60 38          	.db	$38		; ......######.... 
0114+  0E61 38          	.db	$38		; ......######.... 
0115+  0E62 38          	.db	$38		; ......######.... 
0116+  0E63 38          	.db	$38		; ......######.... 
0117+  0E64 10          	.db	$10		; ........##...... 
0118+  0E65 10          	.db	$10		; ........##...... 
0119+  0E66 10          	.db	$10		; ........##...... 
0120+  0E67 38          	.db	$38		; ......######.... 
0121+  0E68             
0122+  0E68             SHOT1:	
0123+  0E68 01 0E       	.db	$01, $0e		; Size 1 x 14
0124+  0E6A 18          	.db	$18		; ......####...... 
0125+  0E6B 18          	.db	$18		; ......####...... 
0126+  0E6C 18          	.db	$18		; ......####...... 
0127+  0E6D 18          	.db	$18		; ......####...... 
0128+  0E6E 18          	.db	$18		; ......####...... 
0129+  0E6F 18          	.db	$18		; ......####...... 
0130+  0E70 18          	.db	$18		; ......####...... 
0131+  0E71 18          	.db	$18		; ......####...... 
0132+  0E72 18          	.db	$18		; ......####...... 
0133+  0E73 18          	.db	$18		; ......####...... 
0134+  0E74 18          	.db	$18		; ......####...... 
0135+  0E75 18          	.db	$18		; ......####...... 
0136+  0E76 00          	.db	$00		; ................ 
0137+  0E77 18          	.db	$18		; ......####...... 
0138+  0E78             
0139+  0E78             SHOT2:	
0140+  0E78 01 09       	.db	$01, $09		; Size 1 x 9
0141+  0E7A 10          	.db	$10		; ........##...... 
0142+  0E7B 10          	.db	$10		; ........##...... 
0143+  0E7C 10          	.db	$10		; ........##...... 
0144+  0E7D 10          	.db	$10		; ........##...... 
0145+  0E7E 10          	.db	$10		; ........##...... 
0146+  0E7F 10          	.db	$10		; ........##...... 
0147+  0E80 10          	.db	$10		; ........##...... 
0148+  0E81 10          	.db	$10		; ........##...... 
0149+  0E82 10          	.db	$10		; ........##...... 
0150+  0E83             
0151+  0E83             MINE:
0152+  0E83             #IF OLDMINE
0153+  0E83 01 10       	.db	$01, $10		; Size 1 x 16
0154+  0E85 10          	.db	$10		; ........##...... 
0155+  0E86 BA          	.db	$ba		; ..##..######..## 
0156+  0E87 7C          	.db	$7c		; ....##########.. 
0157+  0E88 FE          	.db	$fe		; ..############## 
0158+  0E89 7C          	.db	$7c		; ....##########.. 
0159+  0E8A 38          	.db	$38		; ......######.... 
0160+  0E8B 54          	.db	$54		; ....##..##..##.. 
0161+  0E8C 10          	.db	$10		; ........##...... 
0162+  0E8D 00          	.db	$00		; ................ 
0163+  0E8E 10          	.db	$10		; ........##...... 
0164+  0E8F 00          	.db	$00		; ................ 
0165+  0E90 08          	.db	$08		; ......##........ 
0166+  0E91 00          	.db	$00		; ................ 
0167+  0E92 00          	.db	$00		; ................ 
0168+  0E93 04          	.db	$04		; ....##.......... 
0169+  0E94 00          	.db	$00		; ................ 
0170+  0E95~            #ELSE														; Cant use left 2 pixels, right pixels, or top line, else artifacts
0171+  0E95~            	.db	$01, $10		; Size 1 x 16
0172+  0E95~            	.db	$00		; ................ 
0173+  0E95~            	.db	$54		; ....##..##..##.. 
0174+  0E95~            	.db	$38		; ......######.... 
0175+  0E95~            	.db	$7c		; ....##########.. 
0176+  0E95~            	.db	$6c		; ....####..####.. 
0177+  0E95~            	.db	$7c		; ....##########.. 
0178+  0E95~            	.db	$38		; ......######.... 
0179+  0E95~            	.db	$54		; ....##..##..##.. 
0180+  0E95~            	.db	$10		; ........##...... 
0181+  0E95~            	.db	$00		; ................ 
0182+  0E95~            	.db	$10		; ........##...... 
0183+  0E95~            	.db	$00		; ................ 
0184+  0E95~            	.db	$08		; ......##........ 
0185+  0E95~            	.db	$00		; ................ 
0186+  0E95~            	.db	$04		; ....##.......... 
0187+  0E95~            	.db	$00		; ................ 
0188+  0E95             #ENDIF
0189+  0E95             			
0190+  0E95             	.end
0191+  0E95             				2938   0E95             
2939   0E95             
2940   0E95             				;; Table for $07CF
2941   0E95             MINEEXP:																									; $0EB5
2942   0E95 3D 3E 3F    				.db			$3D, $3E, $3F															; Mine explosion
2943   0E98             
2944   0E98             LTBLANK:																									; $0EB8
2945   0E98 40 40 40 40 				.db			$40, $40, $40, $40, $40, $40, $40, $40		; ________
2945   0E9C 40 40 40 40 
2946   0EA0 40 40 40    				.db			$40, $40, $40															; ___
2947   0EA3             
2948   0EA3             LTOVER:																										; $0EC3
2949   0EA3 47 41 4D 45 				.db			$47, $41, $4D, $45, $40, $4F, $56, $45		; GAME_OVE
2949   0EA7 40 4F 56 45 
2950   0EAB 52          				.db			$52																				; R
2951   0EAC             
2952   0EAC             LTHIGH:																										; $0ECC 
2953   0EAC 48 49 47 48 				.db			$48, $49, $47, $48, $40, $53, $43, $4F		; HIGH_SCO
2953   0EB0 40 53 43 4F 
2954   0EB4 52 45       				.db			$52, $45,																	; RE
2955   0EB6             #IF SC3DIG
2956   0EB6 40 40 40 40 				.db			$40, $40, $40, $40, $40, $40, $40					; _______
2956   0EBA 40 40 40 
2957   0EBD~            #ELSE
2958   0EBD~            				.db			$40, $40, $40, $40, $40, $40							; ______
2959   0EBD             #ENDIF
2960   0EBD 59 4F 55 52 				.db			$59, $4F, $55, $52, $40, $53, $43, $4F		; YOUR_SCO
2960   0EC1 40 53 43 4F 
2961   0EC5 52 45       				.db			$52, $45																	; RE
2962   0EC7             
2963   0EC7             LTCOIN:																										; $0EE6
2964   0EC7 49 4E 53 45 				.db			$49, $4E, $53, $45, $52, $54, $40, $43		; INSERT_C
2964   0ECB 52 54 40 43 
2965   0ECF 4F 49 4E    				.db			$4F, $49, $4E															; OIN
2966   0ED2             
2967   0ED2             LTPUSH:																										; $0EF1
2968   0ED2             #IF SC3DIG
2969   0ED2 50 52 45 53 				.db			$50, $52, $45, $53, $53, $40, $53, $54		; PRESS_ST
2969   0ED6 53 40 53 54 
2970   0EDA 41 52 54    				.db			$41, $52, $54															; ART
2971   0EDD~            #ELSE
2972   0EDD~            				.db			$50, $55, $53, $48, $40, $42, $55, $54		; PUSH_BUT
2973   0EDD~            				.db			$54, $4F, $4E															; TON
2974   0EDD             #ENDIF
2975   0EDD             
2976   0EDD             LTSEA:																									  ; $0EFC
2977   0EDD 53 45 41 40 				.db			$53, $45, $41, $40, $57, $4F, $4C, $46		; SEA_WOLF
2977   0EE1 57 4F 4C 46 
2978   0EE5             
2979   0EE5             				;; Water
2980   0EE5             L0F04:
2981   0EE5 3A 3B 3C 3B 				.db			$3A, $3B, $3C, $3B, $3C, $3A, $3B, $3C		; All
2981   0EE9 3C 3A 3B 3C 
2982   0EED 3A 3C 3B 3C 				.db			$3A, $3C, $3B, $3C, $3A, $3B, $3A, $3C		; Water
2982   0EF1 3A 3B 3A 3C 
2983   0EF5 3B 3A 3C 3A 				.db			$3B, $3A, $3C, $3A, $3B, $3C, $3A, $3C		; Codes
2983   0EF9 3B 3C 3A 3C 
2984   0EFD 3B 3C 3A 3B 				.db			$3B, $3C, $3A, $3B, $3C, $3A, $3B, $3C		; Here
2984   0F01 3C 3A 3B 3C 
2985   0F05             
2986   0F05             LTBONUS:																									; $0F24 
2987   0F05 42 4F 4E 55 				.db			$42, $4F, $4E, $55, $53										; BONUS
2987   0F09 53 
2988   0F0A             
2989   0F0A             LTTIME:																										; $0F29
2990   0F0A 54 49 4D 45 				.db			$54, $49, $4D, $45												; TIME
2991   0F0E             #IF SC3DIG
2992   0F0E 2C          				.db			$2C																				; <space>
2993   0F0F~            #ELSE
2994   0F0F~            				.db			$2D																				; <space>
2995   0F0F             #ENDIF
2996   0F0F 53 43 4F 52 				.db			$53, $43, $4F, $52, $45										; SCORE
2996   0F13 45 
2997   0F14             
2998   0F14             LTEXT:																					; $0F33 
2999   0F14 45 58 54 45 				.db			$45, $58, $54, $45, $4E, $44, $45, $44		; EXTENDED
2999   0F18 4E 44 45 44 
3000   0F1C 16          				.db			$16																				; <space>
3001   0F1D             #IF SC3DIG
3002   0F1D 50 4C 41 59 				.db			$50, $4C, $41, $59     										; PLAY
3003   0F21~            #ELSE
3004   0F21~            				.db			$54, $49, $4D, $45     										; TIME
3005   0F21             #ENDIF
3006   0F21             
3007   0F21~            #IF OLDINT
3008   0F21~            				;; Addresses of mine hit data
3009   0F21~            TEMINE:
3010   0F21~            				.dw			TZAP																			; ZAP
3011   0F21~            				.dw			TWAM																			; WAM
3012   0F21             #ENDIF
3013   0F21             
3014   0F21             				;; Table from $0F40 (For ZAP)
3015   0F21             TZAP:
3016   0F21 01 41 04 3D 				.db			$01, $41, $04, $3D, $5A, $2F, $50, $3F		; *ZAP*
3016   0F25 5A 2F 50 3F 
3017   0F29             
3018   0F29             				;; Table from $0F42 (For WAM)
3019   0F29             TWAM:
3020   0F29 01 41 04 3D 				.db			$01, $41, $04, $3D, $57, $2F, $4D, $3F		; *WAM*
3020   0F2D 57 2F 4D 3F 
3021   0F31             
3022   0F31             #IF OLDDIP
3023   0F31             				;; 4-byte table (time per credit)
3024   0F31             LDTIME:																										; $0F54
3025   0F31 61 71 81 91 				.db			$61, $71, $81, $91												; (Seconds)
3026   0F35             #ENDIF
3027   0F35             
3028   0F35             				;; $0F57 = 8-byte score table (0,7 not used)
3029   0F35             TSCORE:																										; $0F58
3030   0F35 03 03 03 01 				.db			$03, $03, $03, $01, $01, $07							; 
3030   0F39 01 07 
3031   0F3B             
3032   0F3B             				;; Table for $05D2 (0x20 long)
3033   0F3B             				;; Periscope grey code decode
3034   0F3B             TGREY:																										; $0F5E
3035   0F3B 00 08 18 10 				.db			$00, $08, $18, $10, $38, $30, $20, $28		; 
3035   0F3F 38 30 20 28 
3036   0F43 78 70 60 68 				.db			$78, $70, $60, $68, $40, $48, $58, $50		; 
3036   0F47 40 48 58 50 
3037   0F4B F8 F0 E0 E8 				.db			$F8, $F0, $E0, $E8, $C0, $C8, $D8, $D0		; 
3037   0F4F C0 C8 D8 D0 
3038   0F53 80 88 98 90 				.db			$80, $88, $98, $90, $B8, $B0, $A0, $A8		; 
3038   0F57 B8 B0 A0 A8 
3039   0F5B             
3040   0F5B             
3041   0F5B             				;; Ship tables
3042   0F5B             				;; 00-01	= Sprite address
3043   0F5B             				;; 02			= $20 = Right to Left, $40 = Left to Right
3044   0F5B             				;; 03 		= Initial Y
3045   0F5B             				;; 04 		= Delta Y (Always 0 for ships)
3046   0F5B             				;; 05			= Final X
3047   0F5B             				;; 06			= Initial X
3048   0F5B             				;; 07			= Delta X
3049   0F5B             
3050   0F5B             				;; Even ship table
3051   0F5B             L0F7E:
3052   0F5B 0D 1D       				.db			(SHIP0>>8), SHIP0&$ff
3053   0F5D 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 0
3053   0F61 00 02 
3054   0F63 0D 5B       				.db			(SHIP1>>8), SHIP1&$ff
3055   0F65 20 14 00 E0 				.db			$20, $14, $00, $E0, $00, $02		; Ship 1
3055   0F69 00 02 
3056   0F6B 0D 8D       				.db			(SHIP2>>8), SHIP2&$ff
3057   0F6D 20 14 00 D8 				.db			$20, $14, $00, $D8, $00, $02		; Ship 2
3057   0F71 00 02 
3058   0F73 0D CB       				.db			(SHIP3>>8), SHIP3&$ff
3059   0F75 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 3
3059   0F79 00 01 
3060   0F7B 0D F9       				.db			(SHIP4>>8), SHIP4&$ff
3061   0F7D 20 15 00 E0 				.db			$20, $15, $00, $E0, $00, $01		; Ship 4
3061   0F81 00 01 
3062   0F83 0E 27       				.db			(SHIP5>>8), SHIP5&$ff
3063   0F85 20 1A 00 F0 				.db			$20, $1A, $00, $F0, $00, $03		; Ship 5
3063   0F89 00 03 
3064   0F8B             
3065   0F8B             				;; Odd ship table
3066   0F8B             L0FAE:
3067   0F8B 0D 1D       				.db			(SHIP0>>8), SHIP0&$ff
3068   0F8D 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 0
3068   0F91 D8 FE 
3069   0F93 0D 5B       				.db			(SHIP1>>8), SHIP1&$ff
3070   0F95 40 34 00 E0 				.db			$40, $34, $00, $E0, $E0, $FE		; Ship 1
3070   0F99 E0 FE 
3071   0F9B 0D 8D       				.db			(SHIP2>>8), SHIP2&$ff
3072   0F9D 40 34 00 D8 				.db			$40, $34, $00, $D8, $D8, $FE		; Ship 2
3072   0FA1 D8 FE 
3073   0FA3 0D CB       				.db			(SHIP3>>8), SHIP3&$ff
3074   0FA5 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 3
3074   0FA9 E0 FF 
3075   0FAB 0D F9       				.db			(SHIP4>>8), SHIP4&$ff
3076   0FAD 40 35 00 E0 				.db			$40, $35, $00, $E0, $E0, $FF		; Ship 4
3076   0FB1 E0 FF 
3077   0FB3 0E 27       				.db			(SHIP5>>8), SHIP5&$ff
3078   0FB5 40 3A 00 F0 				.db			$40, $3A, $00, $F0, $F0, $FD		; Ship 5
3078   0FB9 F0 FD 
3079   0FBB             
3080   0FBB             				;; Ship type table
3081   0FBB             L0FDE:
3082   0FBB 06          				.db			$06															; Small, fast
3083   0FBC 04          				.db			$04															; Mid, 2 towers
3084   0FBD 02          				.db			$02															; Cross in back
3085   0FBE 06          				.db			$06															; Small, fast
3086   0FBF 03          				.db			$03															; Big, flat top
3087   0FC0 05          				.db			$05															; Tower in back
3088   0FC1 01          				.db			$01															; Battleship
3089   0FC2             
3090   0FC2~            #IF OLDTEST
3091   0FC2~            				.org		$0fff
3092   0FC2~            				.db			$ff
3093   0FC2             #ELSE
3094   0FF7             				.org		$0ff7
3095   0FF7             
3096   0FF7             				;; $400 block checksums
3097   0FF7             				;; Recalculate these with 'swaddchk'
3098   0FF7 9A          				.db			$9A											; Patch byte for $c00 checksum
3099   0FF8             CHKS:
3100   0FF8 EC 3C 10 00 				.db			$EC, $3C, $10, $00			; Checksums
3101   0FFC             
3102   0FFC             				;; Error locations
3103   0FFC             ERRS:
3104   0FFC 48 47 46 45 				.db			$48, $47, $46, $45			; HGFE
3105   1000             #ENDIF
3106   1000             
3107   1000             .end
tasm: Number of errors = 0
